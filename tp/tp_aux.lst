     1                                  global	main
     2                                  extern 	printf
     3                                  extern  gets
     4                                  
     5                                  extern  system
     6                                  
     7                                  section .data
     8 00000000 496E6772657365204F-         msjIngFilaColumnaOrigen	db	'Ingrese Origen [XY]: ',0
     8 00000009 726967656E205B5859-
     8 00000012 5D3A2000           
     9 00000016 496E67726573652044-         msjIngFilaColumnaDestino	db	'Ingrese Destino [XY]: ',0
     9 0000001F 657374696E6F205B58-
     9 00000028 595D3A2000         
    10                                  
    11 0000002D 0A00                        saltoLinea  db 10, 0     ; Salto de línea al final de cada fila     
    12 0000002F 00                          posicion    db       0
    13 00000030 256C6900                    format	db	'%li', 0
    14                                  
    15                                      longitudElemento equ	1
    16                                      cantidadColumnas equ 8
    17                                      cantidadFilas    equ	9
    18                                      
    19 00000034 01                          posx_ini db 1
    20 00000035 01                          posy_ini db 1
    21                                      
    22 00000036 01                          posx_fin db 1
    23 00000037 01                          posy_fin db 1
    24                                      
    25 00000038 01                          elemento_inicial db 1
    26                                  
    27 00000039 256C6920256C6900            format2	db	'%li %li', 0
    28 00000041 636C65617200                cmd_clear db "clear",0
    29                                      
    30 00000047 4573207475726E6F20-         esTurnoDe	db	'Es turno de los %s!',10,0
    30 00000050 6465206C6F73202573-
    30 00000059 210A00             
    31 0000005C 6F66696369616C6573-         oficiales   db 'oficiales',0
    31 00000065 00                 
    32 00000066 736F6C6461646F7300          soldados    db 'soldados',0
    33 0000006F 736F6C6461646F7300          jugadorActual db 'soldados',0
    34 00000078 636173696C6C65726F-         casilleroInvalido db 'casillero invalido!',10,0
    34 00000081 20696E76616C69646F-
    34 0000008A 210A00             
    35 0000008D 6D6F76696D69656E74-         msj_movimiento_oficial_invalido db 'movimiento de oficial invalido! Vuelva a intentarlo',10,0
    35 00000096 6F206465206F666963-
    35 0000009F 69616C20696E76616C-
    35 000000A8 69646F21205675656C-
    35 000000B1 7661206120696E7465-
    35 000000BA 6E7461726C6F0A00   
    36 000000C2 6D6F76696D69656E74-         msj_movimiento_soldado_invalido db 'movimiento de soldado invalido! Vuelva a intentarlo',10,0
    36 000000CB 6F20646520736F6C64-
    36 000000D4 61646F20696E76616C-
    36 000000DD 69646F21205675656C-
    36 000000E6 7661206120696E7465-
    36 000000EF 6E7461726C6F0A00   
    37                                  
    38 000000F7 6C6F73206F66696369-         msj_movimiento_oficial_desatendido db 'los oficiales no cumplieron con su deber! Se retira el oficial que no capturo.',10,0
    38 00000100 616C6573206E6F2063-
    38 00000109 756D706C6965726F6E-
    38 00000112 20636F6E2073752064-
    38 0000011B 656265722120536520-
    38 00000124 72657469726120656C-
    38 0000012D 206F66696369616C20-
    38 00000136 717565206E6F206361-
    38 0000013F 707475726F2E0A00   
    39                                  
    40 00000147 47616E61726F6E206C-         msj_ganaron_soldados_por_falta_oficiales db 'Ganaron los soldados, no hay mas oficiales que puedan defender la fortaleza!',10,0
    40 00000150 6F7320736F6C646164-
    40 00000159 6F732C206E6F206861-
    40 00000162 79206D6173206F6669-
    40 0000016B 6369616C6573207175-
    40 00000174 652070756564616E20-
    40 0000017D 646566656E64657220-
    40 00000186 6C6120666F7274616C-
    40 0000018F 657A61210A00       
    41 00000195 47616E61726F6E206C-         msj_ganaron_soldados_por_invasion db 'Ganaron los soldados, invadieron la fortaleza!',10,0
    41 0000019E 6F7320736F6C646164-
    41 000001A7 6F732C20696E766164-
    41 000001B0 6965726F6E206C6120-
    41 000001B9 666F7274616C657A61-
    41 000001C2 210A00             
    42 000001C5 47616E61726F6E206C-         msj_ganaron_oficiales_por_falta_soldados db 'Ganaron los oficiales, ya no quedan mas soldados!',10,0
    42 000001CE 6F73206F6669636961-
    42 000001D7 6C65732C207961206E-
    42 000001E0 6F2071756564616E20-
    42 000001E9 6D617320736F6C6461-
    42 000001F2 646F73210A00       
    43                                  
    44 000001F8 46696E2064656C206A-         endGame    db 'Fin del juego!',10,0
    44 00000201 7565676F210A00     
    45 00000208 01                          turno db 1
    46 00000209 02                          divisor db 2 
    47                                      
    48 0000020A 7E3132333435363700          matriz  db '~1234567',0
    49 00000213 317E7C5858587C7E00                  db '1~|XXX|~',0
    50 0000021C 327E7C5858587C7E00                  db '2~|XXX|~',0
    51 00000225 335858585858585800                  db '3XXXXXXX',0
    52 0000022E 345858585858585800                  db '4XXXXXXX',0
    53 00000237 355858202020585800                  db '5XX   XX',0
    54 00000240 367E7C20204F7C7E00                  db '6~|  O|~',0
    55 00000249 377E7C4F20207C7E00                  db '7~|O  |~',0
    56 00000252 2D2D2D2D2D2D2D2D00                  db '--------',0
    57                                  
    58                                  section .bss    
    59 00000000 <res Ah>                    buffer		resb	10
    60 0000000A ????                        cadena resb 2
    61 0000000C ??                          numero  resb 1
    62                                  
    63                                  section .text
    64                                  main:
    65 00000000 4889E5                      mov rbp, rsp; for correct debugging
    66 00000003 41BB00000000                mov r11, 0 ;seteo flag de que no eliminaron oficiales
    67 00000009 4153                        push r11
    68 0000000B 41BE02000000                mov r14, 2 ;seteo cantidad de oficiales.
    69 00000011 E93D030000                  jmp asignar_jugador_inicial
    70                                  ciclo_juego:
    71 00000016 E85D000000                  call mostrar_tablero
    72 0000001B E989020000                  jmp mostrar_jugador_actual
    73                                  pedir_movimiento:
    74 00000020 E9BF010000                  jmp pedir_casillero_origen
    75                                  pedir_movimiento_destino:
    76 00000025 E924020000                  jmp pedir_casillero_destino
    77                                  validar_movimiento:
    78 0000002A 8A0425[08020000]            mov al, [turno]
    79 00000031 3C01                        cmp al, 1
    80 00000033 0F84D5080000                je validar_movimiento_soldado
    81 00000039 E9F9040000                  jmp validar_movimiento_oficial ;hacer esto solo si es el turno del oficial.
    82                                  fin_validacion_movimiento_oficial:
    83 0000003E 4983FC00                    cmp r12, 0                  ; Si la validacion esta mal -> r12 != 0 -> volver a pedir origen-destin0
    84 00000042 75DC                        jne pedir_movimiento         ; Si no es 0 -> back to pedir_movimiento
    85 00000044 E97C010000                  jmp validar_desatendido
    86                                  prox_turno:
    87 00000049 E9CC000000                  jmp actualizar_tablero
    88                                  fin_actualizar_tablero:
    89 0000004E E99B020000                  jmp actualizar_turno
    90                                  fin_actualizar_turno:
    91 00000053 E9D5070000                  jmp verificar_ganador
    92                                  fin_verificar_ganador:
    93 00000058 EBBC                        jmp ciclo_juego      ; Repite el bucle
    94                                          
    95                                  fin:
    96 0000005A 48BF-                       mov rdi, endGame
    96 0000005C [F801000000000000] 
    97 00000064 4883EC08                    sub rsp, 8
    98 00000068 E8(00000000)                call printf
    99 0000006D 4883C408                    add rsp,8
   100                                  
   101 00000071 B44C                        mov ah, 4Ch    ; Código de función para terminar el programa;    mov al, 0      ; Código de retorno (0 indica éxito)
   102 00000073 B000                        mov al, 0      ; Código de retorno (0 indica éxito)
   103 00000075 CD21                        int 21h        ; Llamada a la interrupción 21h
   104                                  
   105 00000077 C3                          ret
   106                                  
   107                                  mostrar_tablero:
   108                                  ;clear_screen:
   109 00000078 4889E0                      mov rax, rsp
   110 0000007B 4883E00F                    and rax, 15
   111 0000007F 7419                        je no_restar_rsp_3
   112 00000081 4883EC08                    sub rsp, 8
   113 00000085 48BF-                       mov rdi, cmd_clear
   113 00000087 [4100000000000000] 
   114 0000008F E8(00000000)                call system
   115 00000094 4883C408                    add rsp, 8
   116 00000098 EB0F                        jmp saltar_a_mostrar_tablero
   117                                  no_restar_rsp_3:
   118 0000009A 48BF-                       mov rdi, cmd_clear
   118 0000009C [4100000000000000] 
   119 000000A4 E8(00000000)                call system
   120                                  saltar_a_mostrar_tablero:
   121 000000A9 B800000000                  mov rax, 0
   122 000000AE 48890425[2F000000]          mov [posicion], rax 
   123 000000B6 B908000000                  mov rcx, cantidadColumnas
   124 000000BB 4883EC08                    sub rsp, 8
   125                                      fila_loop:
   126 000000BF 51                              push rcx ;es necesario para loop, sino el registro rcx se pisa y loopea infinito
   127                                          ; Carga la dirección de la fila actual en la matriz
   128                                  
   129                                          ; Imprime la fila actual
   130                                  
   131 000000C0 48BF-                           mov rdi, matriz         ; Pasa la dirección de la fila a printf
   131 000000C2 [0A02000000000000] 
   132 000000CA 48033C25[2F000000]              add rdi, [posicion]
   133 000000D2 4829C0                          sub rax, rax           ; Limpia rax para printf
   134                                          
   135                                          
   136 000000D5 E8(00000000)                    call printf
   137                                          ; Imprime salto de línea después de cada fila
   138 000000DA 48BF-                           mov rdi, saltoLinea
   138 000000DC [2D00000000000000] 
   139 000000E4 4831C0                          xor rax, rax           ; Limpia rax para printf
   140 000000E7 E8(00000000)                    call printf
   141 000000EC 59                              pop rcx ;es necesario para loop, sino el registro rcx se pisa y loopea infinito
   142                                          
   143                                          ; Sumar 10 a "posicion"
   144 000000ED 488B0425[2F000000]              mov rax, [posicion]         ; Carga el valor de "posicion" en rax
   145 000000F5 4883C009                        add rax, cantidadFilas                 ; Suma 10 a rax
   146 000000F9 48890425[2F000000]              mov [posicion], rax         ; Guarda el nuevo valor en "posicion"
   147                                          
   148 00000101 E2BC                            loop fila_loop
   149                                          
   150 00000103 48BF-                           mov rdi, saltoLinea
   150 00000105 [2D00000000000000] 
   151 0000010D 4831C0                          xor rax, rax           ; Limpia rax para printf
   152 00000110 E8(00000000)                    call printf
   153 00000115 4883C408                        add rsp, 8
   154 00000119 C3                              ret
   155                                  
   156                                  actualizar_tablero:
   157                                      ;Posicionamiento en el elemento i,j de una matriz
   158                                      ;(i-1)*longitudFila + (j-1)*longitudElemento
   159                                      ;longitdFila= longitudElemento*cantidadColumnas
   160 0000011A 4829C9                      sub rcx, rcx
   161 0000011D 4829C0                      sub rax, rax
   162 00000120 4829DB                      sub rbx, rbx
   163 00000123 4D29D2                      sub r10, r10
   164 00000126 8A0425[34000000]            mov al,[posx_ini] ;guardo el valor de la fila, en AL(8bits) 
   165                                                      ;ya que posx es db (byte= 8bits) sino guarda cualquier cosa
   166                                  ;    sub rax,1 -> no es necesaria la resta ya que la matriz empieza en 1,1
   167 0000012D 41B809000000                mov r8, cantidadFilas
   168 00000133 49F7E8                      imul r8   ;me desplazo en la fila
   169 00000136 4801C1                      add rcx,rax
   170                                      
   171 00000139 8A0425[35000000]            mov al,[posy_ini] ;guardo el valor de la col,
   172                                  ;    sub rax,1
   173 00000140 41B801000000                mov r8, longitudElemento ;guardo en r8 para darle longitud y poder multiplicar usando imul
   174 00000146 49F7E8                      imul r8 ;me desplazo en la columna
   175 00000149 4801C1                      add rcx,rax ;sumo los desplazamientos
   176                                      
   177                                      
   178 0000014C 48BB-                       mov rbx,matriz ;pongo el pto al inicio de la matriz
   178 0000014E [0A02000000000000] 
   179 00000156 4801CB                      add rbx,rcx ;me posicione en la matriz
   180                                  
   181 00000159 4C8B13                      mov r10, [rbx] ;guardo un elemento
   182 0000015C 4C8B4B01                    mov r9, [rbx+1] ;guardo en r9 lo que le sigue de matriz posterior al elemento a actualizar
   183 00000160 41B820000000                mov r8, " " ; lo muevo a un reg para darle (y estar seguro de su) longitud
   184 00000166 4C8903                      mov [rbx],r8 ;muevo el valor(de igual longitud). muevo a la posicion de la matriz a actualizar
   185                                      
   186                                      ;despues de agregar el nuevo valor, agregarle el resto de la matriz que estaba antes.
   187 00000169 4C894B01                    mov [rbx+1],r9
   188                                      
   189                                      
   190                                      ;;repito con casillero_destino
   191                                      ;;y guardo en el destino lo que guarde en r10 (el elemento origen)
   192                                      
   193                                      
   194                                      ;Posicionamiento en el elemento i,j de una matriz
   195                                      ;(i-1)*longitudFila + (j-1)*longitudElemento
   196                                      ;longitdFila= longitudElemento*cantidadColumnas
   197 0000016D 4829C9                      sub rcx, rcx
   198 00000170 8A0425[36000000]            mov al,[posx_fin] ;guardo el valor de la fila, en AL(8bits) 
   199                                                      ;ya que posx es db (byte= 8bits) sino guarda cualquier cosa
   200                                  ;    sub rax,1 -> no es necesaria la resta ya que la matriz empieza en 1,1
   201 00000177 41B809000000                mov r8, cantidadFilas
   202 0000017D 49F7E8                      imul r8   ;me desplazo en la fila
   203 00000180 4801C1                      add rcx,rax
   204                                      
   205 00000183 8A0425[37000000]            mov al,[posy_fin] ;guardo el valor de la col,
   206                                  ;    sub rax,1
   207 0000018A 41B801000000                mov r8, longitudElemento ;guardo en r8 para darle longitud y poder multiplicar usando imul
   208 00000190 49F7E8                      imul r8 ;me desplazo en la columna
   209 00000193 4801C1                      add rcx,rax ;sumo los desplazamientos
   210                                      
   211                                      
   212 00000196 48BB-                       mov rbx,matriz ;pongo el pto al inicio de la matriz
   212 00000198 [0A02000000000000] 
   213 000001A0 4801CB                      add rbx,rcx ;me posicione en la matriz
   214                                  
   215 000001A3 4C8B4B01                    mov r9, [rbx+1] ;guardo en r9 lo que le sigue de matriz posterior al elemento a actualizar
   216 000001A7 4D89D0                      mov r8, r10 ; lo muevo a un reg para darle (y estar seguro de su) longitud
   217 000001AA 4C8903                      mov [rbx],r8 ;muevo el valor(de igual longitud). muevo a la posicion de la matriz a actualizar
   218                                      
   219                                      ;despues de agregar el nuevo valor, agregarle el resto de la matriz que estaba antes.
   220 000001AD 4C894B01                    mov [rbx+1],r9
   221                                  
   222                                      ;aca deberia ir lo de borrar_oficial  solo si fue turno de oficiales!
   223 000001B1 8A0425[08020000]            mov al, [turno]
   224 000001B8 3C01                        cmp al, 1 ; =1 -> estamos en turno de soldados
   225                                      ;je fin_actualizar_tablero
   226 000001BA 0F847B050000                je validar_si_oficial_debe_comer_prox_turno ;esto deja en r13 si pueden comer.
   227                                      ;si es turno oficiales chequear si deberia borrar oficial.
   228 000001C0 E989FEFFFF                  jmp fin_actualizar_tablero
   229                                  
   230                                  validar_desatendido:
   231 000001C5 4D01EF                      add r15, r13
   232 000001C8 4983FF01                    cmp r15, 1
   233 000001CC 0F84AC040000                je borrar_oficial
   234 000001D2 41BB00000000                mov r11, 0 ;reseteo r11, indicador de que eliminaron un oficial ya que no lo hicieron este turno.
   235 000001D8 4153                        push r11
   236 000001DA E93BFFFFFF                  jmp actualizar_tablero
   237                                  fin_validar_desatendido:
   238 000001DF E96AFEFFFF                  jmp fin_actualizar_tablero
   239                                      
   240                                  pedir_casillero_origen:
   241 000001E4 4889E0                      mov rax, rsp
   242 000001E7 4883E00F                    and rax, 15
   243 000001EB 7404                        je no_restar_rsp_1
   244 000001ED 4883EC08                    sub rsp, 8
   245                                  no_restar_rsp_1:
   246 000001F1 48BF-                       mov rdi, msjIngFilaColumnaOrigen
   246 000001F3 [0000000000000000] 
   247 000001FB E8(00000000)                call printf
   248                                  
   249 00000200 48BF-                       mov rdi, cadena      ; Dirección de 'cadena'
   249 00000202 [0A00000000000000] 
   250 0000020A E8(00000000)                call gets
   251 0000020F 4883C408                    add rsp, 8
   252                                  
   253                                      ; Extraer el primer carácter (primer número)
   254 00000213 480FB60425-                 movzx rax, byte [cadena]     ; Cargar el primer carácter de 'cadena' en rax
   254 00000218 [0A000000]         
   255 0000021C 4883E830                    sub rax, '0'                 ; Convertir de ASCII a valor numérico
   256 00000220 880425[34000000]            mov [posx_ini], al            ; Guardar el valor en 'posx_ini'
   257                                      
   258 00000227 803C25[34000000]00          cmp byte [posx_ini], 0
   259 0000022F 0F8425FEFFFF                je fin               ; Si es 0, salta a "fin de juego"
   260                                      
   261                                      ; Extraer el segundo carácter (segundo número)
   262 00000235 480FB60425-                 movzx rax, byte [cadena + 1] ; Cargar el segundo carácter de 'cadena' en rax
   262 0000023A [0B000000]         
   263 0000023E 4883E830                    sub rax, '0'                 ; Convertir de ASCII a valor numérico
   264 00000242 880425[35000000]            mov [posy_ini], al            ; Guardar el valor en 'posy_ini'
   265                                      
   266 00000249 E91A010000                  jmp validar_casillero_origen
   267                                      
   268                                  pedir_casillero_destino:
   269 0000024E 4883EC08                    sub rsp, 8
   270 00000252 48BF-                       mov rdi, msjIngFilaColumnaDestino
   270 00000254 [1600000000000000] 
   271 0000025C E8(00000000)                call printf
   272 00000261 4883C408                    add rsp, 8
   273                                  
   274 00000265 48BF-                       mov rdi, cadena      ; Dirección de 'cadena'
   274 00000267 [0A00000000000000] 
   275 0000026F 4883EC08                    sub rsp, 8
   276 00000273 E8(00000000)                call gets
   277 00000278 4883C408                    add rsp, 8
   278                                  
   279                                      ; Extraer el primer carácter (primer número)
   280 0000027C 480FB60425-                 movzx rax, byte [cadena]     ; Cargar el primer carácter de 'cadena' en rax
   280 00000281 [0A000000]         
   281 00000285 4883E830                    sub rax, '0'                 ; Convertir de ASCII a valor numérico
   282 00000289 880425[36000000]            mov [posx_fin], al            ; Guardar el valor en 'posx_ini'
   283                                      
   284                                      ; Extraer el segundo carácter (segundo número)
   285 00000290 480FB60425-                 movzx rax, byte [cadena + 1] ; Cargar el segundo carácter de 'cadena' en rax
   285 00000295 [0B000000]         
   286 00000299 4883E830                    sub rax, '0'                 ; Convertir de ASCII a valor numérico
   287 0000029D 880425[37000000]            mov [posy_fin], al            ; Guardar el valor en 'posy_ini'
   288 000002A4 E9E9010000                  jmp es_destino_valido
   289                                      
   290                                  mostrar_jugador_actual:
   291 000002A9 415B                        pop r11
   292 000002AB 4983FB01                    cmp r11, 1
   293 000002AF 7424                        je mostrar_eliminacion_de_oficial
   294                                  fin_mostrar_eliminacion_de_oficial:
   295 000002B1 4883EC08                    sub rsp, 8
   296 000002B5 48BF-                       mov rdi, esTurnoDe
   296 000002B7 [4700000000000000] 
   297 000002BF 488B3425[6F000000]          mov rsi, [jugadorActual]
   298                                   
   299 000002C7 E8(00000000)                call printf
   300 000002CC 4883C408                    add rsp, 8
   301 000002D0 E94BFDFFFF                  jmp pedir_movimiento
   302                                      
   303                                  mostrar_eliminacion_de_oficial:
   304 000002D5 4883EC08                    sub rsp, 8
   305 000002D9 48BF-                       mov rdi, msj_movimiento_oficial_desatendido
   305 000002DB [F700000000000000] 
   306 000002E3 E8(00000000)                call printf
   307 000002E8 4883C408                    add rsp, 8
   308 000002EC EBC3                        jmp fin_mostrar_eliminacion_de_oficial
   309                                  
   310                                  actualizar_turno:
   311 000002EE 8A0425[08020000]            mov al, [turno]
   312 000002F5 800425[08020000]01          add byte [turno], 1
   313 000002FD 8A0425[08020000]            mov al, [turno]
   314 00000304 30E4                        xor ah, ah        ; Limpiar AH para asegurar que AX está correcto
   315                                  
   316                                      ; Dividir AX entre el divisor (2)
   317 00000306 4831DB                      xor rbx, rbx        
   318 00000309 8A1C25[09020000]            mov bl, [divisor]
   319 00000310 F6F3                        div bl            ; AX / BL -> AL = cociente, AH = resto
   320                                  
   321                                      ; Ahora, AH contiene el resto (turno % 2)
   322 00000312 80FC00                      cmp ah, 0         ; Compara el resto con 0
   323 00000315 7402                        je es_par         ; Si el resto es 0, turno es par
   324 00000317 EB1D                        jmp es_impar      ; Si no, turno es impar
   325                                  
   326                                  es_par:          
   327 00000319 C60425[08020000]00          mov byte[turno], 0
   328 00000321 488D0425[5C000000]          lea rax, [oficiales]          ; Cargar la dirección de 'soldados' en AX
   329 00000329 48890425[6F000000]          mov [jugadorActual], rax
   330 00000331 E91DFDFFFF                  jmp fin_actualizar_turno
   331                                  
   332                                  es_impar:        
   333 00000336 C60425[08020000]01          mov byte[turno], 1
   334 0000033E 488D0425[66000000]          lea rax, [soldados]          ; Cargar la dirección de 'soldados' en AX
   335 00000346 48890425[6F000000]          mov [jugadorActual], rax
   336 0000034E E900FDFFFF                  jmp fin_actualizar_turno
   337                                      
   338                                  asignar_jugador_inicial:
   339 00000353 488D0425[66000000]          lea rax, [soldados]          ; Cargar la dirección de 'soldados' en AX
   340 0000035B 48890425[6F000000]          mov [jugadorActual], rax
   341 00000363 E9AEFCFFFF                  jmp ciclo_juego
   342                                      
   343                                  validar_casillero_origen:
   344                                      ;;valido que este dentro del tablero
   345 00000368 4829C0                      sub rax, rax
   346 0000036B 4829DB                      sub rbx, rbx
   347 0000036E 8A0425[34000000]            mov al,[posx_ini]
   348 00000375 8A1C25[35000000]            mov bl,[posy_ini]
   349                                      
   350                                      validar_dentro_x:
   351 0000037C 3C01                        cmp al, 1
   352 0000037E 740E                        je validar_dentro_y
   353 00000380 3C02                        cmp al, 2
   354 00000382 740A                        je validar_dentro_y
   355 00000384 3C06                        cmp al, 6
   356 00000386 7406                        je validar_dentro_y
   357 00000388 3C07                        cmp al, 7
   358 0000038A 7402                        je validar_dentro_y
   359 0000038C EB16                        jmp dentro_tablero_origen_ok
   360                                  validar_dentro_y:
   361 0000038E 80FB01                      cmp bl, 1
   362 00000391 7475                        je origen_invalido
   363 00000393 80FB02                      cmp bl, 2
   364 00000396 7470                        je origen_invalido
   365 00000398 80FB06                      cmp bl, 6
   366 0000039B 746B                        je origen_invalido
   367 0000039D 80FB07                      cmp bl, 7
   368 000003A0 7466                        je origen_invalido
   369 000003A2 EB00                        jmp dentro_tablero_origen_ok
   370                                      
   371                                  dentro_tablero_origen_ok:
   372 000003A4 8A0425[08020000]            mov al, [turno]
   373 000003AB 30E4                        xor ah, ah        ; Limpiar AH para asegurar que AX está correcto
   374                                  
   375                                      ; Dividir AX entre el divisor (2)
   376 000003AD 4831DB                      xor rbx, rbx        
   377 000003B0 8A1C25[09020000]            mov bl, [divisor]
   378 000003B7 F6F3                        div bl            ; AX / BL -> AL = cociente, AH = resto
   379                                  
   380                                      ; Ahora, AH contiene el resto (turno % 2)
   381 000003B9 80FC00                      cmp ah, 0         ; Compara el resto con 0
   382 000003BC 746B                        je es_oficial_valido         ; Si el resto es 0, turno es par
   383 000003BE EB00                        jmp es_soldado_valido ; Si no, turno es impar
   384                                      
   385                                  es_soldado_valido:
   386                                  ;busco el elemento en la matriz; y lo guardo en r10 para comparar el elemento.
   387 000003C0 4829C9                      sub rcx, rcx
   388 000003C3 4829C0                      sub rax, rax
   389 000003C6 4829DB                      sub rbx, rbx
   390 000003C9 4D29D2                      sub r10, r10
   391 000003CC 8A0425[34000000]            mov al,[posx_ini] 
   392 000003D3 41B809000000                mov r8, cantidadFilas
   393 000003D9 49F7E8                      imul r8
   394 000003DC 4801C1                      add rcx,rax
   395                                      
   396 000003DF 8A0425[35000000]            mov al,[posy_ini]
   397 000003E6 41B801000000                mov r8, longitudElemento 
   398 000003EC 49F7E8                      imul r8
   399 000003EF 4801C1                      add rcx,rax
   400                                      
   401 000003F2 48BB-                       mov rbx,matriz 
   401 000003F4 [0A02000000000000] 
   402 000003FC 4801CB                      add rbx,rcx ;me posicione en la matriz
   403                                  
   404 000003FF 4C8B13                      mov r10, [rbx] ;guardo un elemento
   405 00000402 4180FA58                    cmp r10b, 'X'
   406 00000406 741C                        je turno_soldado_ok
   407                                      ;sino fue un mal ingreso:
   408                                  origen_invalido:
   409 00000408 48BF-                       mov rdi, casilleroInvalido
   409 0000040A [7800000000000000] 
   410 00000412 4883EC08                    sub rsp, 8
   411 00000416 E8(00000000)                call printf
   412 0000041B 4883C408                    add rsp, 8
   413 0000041F E9C0FDFFFF                  jmp pedir_casillero_origen
   414                                  turno_soldado_ok:
   415 00000424 E9FCFBFFFF                  jmp pedir_movimiento_destino
   416                                      
   417                                  es_oficial_valido:
   418                                  ;busco el elemento en la matriz; y lo guardo en r10 para comparar el elemento.
   419 00000429 4829C9                      sub rcx, rcx
   420 0000042C 4829C0                      sub rax, rax
   421 0000042F 4829DB                      sub rbx, rbx
   422 00000432 4D29D2                      sub r10, r10
   423 00000435 8A0425[34000000]            mov al,[posx_ini] 
   424 0000043C 41B809000000                mov r8, cantidadFilas
   425 00000442 49F7E8                      imul r8
   426 00000445 4801C1                      add rcx,rax
   427                                      
   428 00000448 8A0425[35000000]            mov al,[posy_ini]
   429 0000044F 41B801000000                mov r8, longitudElemento 
   430 00000455 49F7E8                      imul r8
   431 00000458 4801C1                      add rcx,rax
   432                                      
   433 0000045B 48BB-                       mov rbx,matriz 
   433 0000045D [0A02000000000000] 
   434 00000465 4801CB                      add rbx,rcx ;me posicione en la matriz
   435                                  
   436 00000468 4C8B13                      mov r10, [rbx] ;guardo un elemento
   437                                  ;;
   438 0000046B 4180FA4F                    cmp r10b, 'O'
   439 0000046F 741C                        je turno_oficial_ok
   440                                      ;sino fue un mal ingreso:
   441 00000471 48BF-                       mov rdi, casilleroInvalido
   441 00000473 [7800000000000000] 
   442 0000047B 4883EC08                    sub rsp, 8
   443 0000047F E8(00000000)                call printf
   444 00000484 4883C408                    add rsp, 8
   445 00000488 E957FDFFFF                  jmp pedir_casillero_origen
   446                                  turno_oficial_ok:
   447 0000048D E993FBFFFF                  jmp pedir_movimiento_destino    
   448                                      
   449                                      
   450                                  es_destino_valido:
   451                                      ;;valido que este dentro del tablero
   452 00000492 4829C0                      sub rax, rax
   453 00000495 4829DB                      sub rbx, rbx
   454 00000498 8A0425[36000000]            mov al,[posx_fin]
   455 0000049F 8A1C25[37000000]            mov bl,[posy_fin]
   456                                      
   457                                  validar_dentro_x_fin:
   458 000004A6 3C01                        cmp al, 1
   459 000004A8 740E                        je validar_dentro_y_fin
   460 000004AA 3C02                        cmp al, 2
   461 000004AC 740A                        je validar_dentro_y_fin
   462 000004AE 3C06                        cmp al, 6
   463 000004B0 7406                        je validar_dentro_y_fin
   464 000004B2 3C07                        cmp al, 7
   465 000004B4 7402                        je validar_dentro_y_fin
   466 000004B6 EB16                        jmp dentro_tablero_destino_ok
   467                                  validar_dentro_y_fin:
   468 000004B8 80FB01                      cmp bl, 1
   469 000004BB 7459                        je destino_invalido
   470 000004BD 80FB02                      cmp bl, 2
   471 000004C0 7454                        je destino_invalido
   472 000004C2 80FB06                      cmp bl, 6
   473 000004C5 744F                        je destino_invalido
   474 000004C7 80FB07                      cmp bl, 7
   475 000004CA 744A                        je destino_invalido
   476 000004CC EB00                        jmp dentro_tablero_destino_ok
   477                                      
   478                                  dentro_tablero_destino_ok:
   479                                  ;busco el elemento en la matriz; y lo guardo en r10 para comparar el elemento.
   480 000004CE 4829C9                      sub rcx, rcx
   481 000004D1 4829C0                      sub rax, rax
   482 000004D4 4829DB                      sub rbx, rbx
   483 000004D7 4D29D2                      sub r10, r10
   484 000004DA 8A0425[36000000]            mov al,[posx_fin] 
   485 000004E1 41B809000000                mov r8, cantidadFilas
   486 000004E7 49F7E8                      imul r8
   487 000004EA 4801C1                      add rcx,rax
   488                                      
   489 000004ED 8A0425[37000000]            mov al,[posy_fin]
   490 000004F4 41B801000000                mov r8, longitudElemento 
   491 000004FA 49F7E8                      imul r8
   492 000004FD 4801C1                      add rcx,rax
   493                                      
   494 00000500 48BB-                       mov rbx,matriz 
   494 00000502 [0A02000000000000] 
   495 0000050A 4801CB                      add rbx,rcx ;me posicione en la matriz
   496                                  
   497 0000050D 4C8B13                      mov r10, [rbx] ;guardo un elemento
   498                                  ;;
   499 00000510 4180FA20                    cmp r10b, ' '
   500 00000514 741C                        je destino_ok
   501                                      ;sino fue un mal ingreso:
   502                                  destino_invalido:
   503 00000516 48BF-                       mov rdi, casilleroInvalido
   503 00000518 [7800000000000000] 
   504 00000520 4883EC08                    sub rsp, 8
   505 00000524 E8(00000000)                call printf
   506 00000529 4883C408                    add rsp, 8
   507 0000052D E91CFDFFFF                  jmp pedir_casillero_destino
   508                                  destino_ok:
   509 00000532 E9F3FAFFFF                  jmp validar_movimiento    
   510                                  validar_movimiento_oficial:
   511 00000537 41BC00000000                mov r12,0
   512 0000053D B800000000                  mov rax,0
   513 00000542 8A0425[34000000]            mov al, [posx_ini]
   514 00000549 8A2425[36000000]            mov ah, [posx_fin]
   515 00000550 28E0                        sub al,ah
   516                                  
   517 00000552 BA00000000                  mov rdx,0
   518 00000557 8A1425[35000000]            mov dl, [posy_ini]
   519 0000055E 8A3425[37000000]            mov dh, [posy_fin]
   520 00000565 28F2                        sub dl,dh
   521                                  
   522 00000567 3C00                        cmp al, 0
   523 00000569 7410                        je validar_movimientos_oficial_horizontal ;;listo
   524 0000056B 3C01                        cmp al, 1
   525 0000056D 7428                        je validar_movimiento_simple_oficial_arriba_abajo ;;listo
   526 0000056F 3CFF                        cmp al,-1
   527 00000571 7424                        je validar_movimiento_simple_oficial_arriba_abajo ;;listo
   528                                      
   529 00000573 3C02                        cmp al, 2
   530 00000575 7440                        je validar_movimiento_doble_oficial_superiores ;;voy a validar esto
   531 00000577 3CFE                        cmp al,-2
   532 00000579 7450                        je validar_movimiento_doble_oficial_inferiores ;;falta validar
   533                                      
   534                                  ;;esto valida OK movimientos simples y dobles horizontales (falta validar dobles horizontales)
   535                                  validar_movimientos_oficial_horizontal:
   536                                      ;;movimiento simple
   537 0000057B 80FA01                      cmp dl, 1
   538 0000057E 0F84DE000000                je movimiento_oficial_ok
   539 00000584 80FAFF                      cmp dl,-1
   540 00000587 0F84D5000000                je movimiento_oficial_ok
   541                                      ;;movimiento doble (comio)
   542 0000058D 80FA02                      cmp dl, 2
   543 00000590 744D                        je validar_movimiento_doble_izquierda ;; aca falta validar que haya X en el medio
   544 00000592 80FAFE                      cmp dl,-2
   545 00000595 744C                        je validar_movimiento_doble_derecha ;; aca falta validar que haya X en el medio
   546                                  ;funcion ready (no necesita nada mas)
   547                                  validar_movimiento_simple_oficial_arriba_abajo:
   548                                      ;;si se movio 1 en x, solo puede ser movimiento simple
   549 00000597 80FA01                      cmp dl, 1
   550 0000059A 0F84C2000000                je movimiento_oficial_ok
   551 000005A0 80FAFF                      cmp dl,-1
   552 000005A3 0F84B9000000                je movimiento_oficial_ok
   553 000005A9 80FA00                      cmp dl, 0
   554 000005AC 0F84B0000000                je movimiento_oficial_ok
   555 000005B2 E92A010000                  jmp movimiento_oficial_invalido
   556                                  
   557                                  ;;movimientos dobles!
   558                                  validar_movimiento_doble_oficial_superiores:
   559 000005B7 80FA02                      cmp dl, 2
   560 000005BA 742B                        je validar_movimiento_doble_izquierda_superior
   561 000005BC 80FAFE                      cmp dl,-2
   562 000005BF 7430                        je validar_movimiento_doble_derecha_superior
   563 000005C1 80FA00                      cmp dl, 0
   564 000005C4 7427                        je validar_movimiento_doble_superior
   565 000005C6 E916010000                  jmp movimiento_oficial_invalido
   566                                  
   567                                  validar_movimiento_doble_oficial_inferiores:
   568 000005CB 80FA02                      cmp dl, 2
   569 000005CE 7427                        je validar_movimiento_doble_izquierda_inferior
   570 000005D0 80FAFE                      cmp dl,-2
   571 000005D3 742C                        je validar_movimiento_doble_derecha_inferior
   572 000005D5 80FA00                      cmp dl, 0
   573 000005D8 7423                        je validar_movimiento_doble_inferior
   574 000005DA E902010000                  jmp movimiento_oficial_invalido
   575                                      
   576                                  ;;tengo que validar que haya una X en los movimientos dobles
   577                                  ;;voy a setear una posicion posx - posy para buscar elemento en la matriz
   578                                  ;;si hay una X efectivamente habia un soldado -> eliminar soldado -> movimiento ok!
   579                                  ;;else invalido.
   580                                  
   581                                  ;;hasta este momento en ah y dh estan los valores x y destino respectivamente
   582                                  validar_movimiento_doble_izquierda:
   583 000005DF FEC6                        inc dh
   584 000005E1 EB24                        jmp validar_habia_soldado_en_movimiento_doble
   585                                  validar_movimiento_doble_derecha:
   586 000005E3 FECE                        dec dh
   587 000005E5 EB20                        jmp validar_habia_soldado_en_movimiento_doble
   588                                  validar_movimiento_doble_izquierda_superior:
   589 000005E7 FEC6                        inc dh
   590 000005E9 FEC4                        inc ah
   591 000005EB EB1A                        jmp validar_habia_soldado_en_movimiento_doble
   592                                  validar_movimiento_doble_superior:
   593 000005ED FEC4                        inc ah
   594 000005EF EB16                        jmp validar_habia_soldado_en_movimiento_doble
   595                                  validar_movimiento_doble_derecha_superior:
   596 000005F1 FECE                        dec dh
   597 000005F3 FEC4                        inc ah
   598 000005F5 EB10                        jmp validar_habia_soldado_en_movimiento_doble
   599                                  validar_movimiento_doble_izquierda_inferior:
   600 000005F7 FEC6                        inc dh
   601 000005F9 FECC                        dec ah
   602 000005FB EB0A                        jmp validar_habia_soldado_en_movimiento_doble
   603                                  validar_movimiento_doble_inferior:
   604 000005FD FECC                        dec ah
   605 000005FF EB06                        jmp validar_habia_soldado_en_movimiento_doble
   606                                  validar_movimiento_doble_derecha_inferior:
   607 00000601 FECE                        dec dh
   608 00000603 FECC                        dec ah
   609 00000605 EB00                        jmp validar_habia_soldado_en_movimiento_doble
   610                                  
   611                                  
   612                                  ;;falta estar seguro de lo que hago aca. (validar X e Y..)
   613                                  validar_habia_soldado_en_movimiento_doble:
   614                                      
   615 00000607 4829DB                      sub rbx, rbx
   616 0000060A 88E3                        mov bl, ah      
   617 0000060C 4829C0                      sub rax, rax      
   618 0000060F 88D8                        mov al, bl
   619                                  
   620 00000611 4829DB                      sub rbx, rbx
   621 00000614 88F3                        mov bl, dh
   622                                                  
   623 00000616 4829C9                      sub rcx, rcx
   624 00000619 4829D2                      sub rdx, rdx
   625 0000061C 4D29C0                      sub r8, r8
   626 0000061F 4D29D2                      sub r10, r10
   627                                      
   628                                   
   629 00000622 41B809000000                mov r8, cantidadFilas
   630 00000628 49F7E8                      imul r8
   631 0000062B 4801C1                      add rcx,rax
   632                                      
   633 0000062E 88D8                        mov al, bl
   634 00000630 41B801000000                mov r8, longitudElemento 
   635 00000636 49F7E8                      imul r8
   636 00000639 4801C1                      add rcx,rax
   637                                      
   638 0000063C 4829DB                      sub rbx, rbx   
   639 0000063F 48BB-                       mov rbx,matriz 
   639 00000641 [0A02000000000000] 
   640 00000649 4801CB                      add rbx,rcx ;me posicione en la matriz
   641                                  
   642 0000064C 4C8B13                      mov r10, [rbx] ;guardo un elemento
   643 0000064F 4180FA58                    cmp r10b, 'X'
   644 00000653 7405                        je oficial_realizo_captura
   645 00000655 E987000000                  jmp movimiento_oficial_invalido
   646                                  
   647                                  oficial_realizo_captura:
   648 0000065A 41BF01000000                mov r15, 1
   649 00000660 EB00                        jmp movimiento_oficial_ok
   650                                  
   651                                  ;;fin;; validaciones terminan en estas 2 funciones.
   652                                  movimiento_oficial_ok:
   653                                      
   654 00000662 4C8B4B01                    mov r9, [rbx+1] ;guardo en r9 lo que le sigue de matriz posterior al elemento a actualizar
   655 00000666 41B820000000                mov r8, " " ; lo muevo a un reg para darle (y estar seguro de su) longitud
   656 0000066C 4C8903                      mov [rbx],r8 ;muevo el valor(de igual longitud). muevo a la posicion de la matriz a actualizar
   657                                      
   658                                      ;despues de agregar el nuevo valor, agregarle el resto de la matriz que estaba antes.
   659 0000066F 4C894B01                    mov [rbx+1],r9
   660 00000673 41BC00000000                mov r12,0 ;si r12=0, movimiento OK
   661                                  ;si se desentendio borrar el oficial que se movio.
   662                                      ;else termina turno oficiales
   663                                  termina_turno_oficiales:
   664 00000679 E9C0F9FFFF                  jmp fin_validacion_movimiento_oficial
   665                                  borrar_oficial:
   666                                  ;voy a la posicion destino y borro el "O"
   667 0000067E 4829C9                      sub rcx, rcx
   668 00000681 4829C0                      sub rax, rax
   669 00000684 4829DB                      sub rbx, rbx
   670 00000687 4D29D2                      sub r10, r10
   671 0000068A 8A0425[34000000]            mov al,[posx_ini] ;guardo el valor de la fila, en AL(8bits) 
   672                                                      ;ya que posx es db (byte= 8bits) sino guarda cualquier cosa
   673                                  ;    sub rax,1 -> no es necesaria la resta ya que la matriz empieza en 1,1
   674 00000691 41B809000000                mov r8, cantidadFilas
   675 00000697 49F7E8                      imul r8   ;me desplazo en la fila
   676 0000069A 4801C1                      add rcx,rax
   677                                      
   678 0000069D 8A0425[35000000]            mov al,[posy_ini] ;guardo el valor de la col,
   679                                  ;    sub rax,1
   680 000006A4 41B801000000                mov r8, longitudElemento ;guardo en r8 para darle longitud y poder multiplicar usando imul
   681 000006AA 49F7E8                      imul r8 ;me desplazo en la columna
   682 000006AD 4801C1                      add rcx,rax ;sumo los desplazamientos
   683                                      
   684                                      
   685 000006B0 48BB-                       mov rbx,matriz ;pongo el pto al inicio de la matriz
   685 000006B2 [0A02000000000000] 
   686 000006BA 4801CB                      add rbx,rcx ;me posicione en la matriz
   687                                  
   688 000006BD 4C8B13                      mov r10, [rbx] ;guardo un elemento
   689 000006C0 4C8B4B01                    mov r9, [rbx+1] ;guardo en r9 lo que le sigue de matriz posterior al elemento a actualizar
   690 000006C4 41B820000000                mov r8, " " ; lo muevo a un reg para darle (y estar seguro de su) longitud
   691 000006CA 4C8903                      mov [rbx],r8 ;muevo el valor(de igual longitud). muevo a la posicion de la matriz a actualizar
   692                                      
   693                                      ;despues de agregar el nuevo valor, agregarle el resto de la matriz que estaba antes.
   694 000006CD 4C894B01                    mov [rbx+1],r9
   695                                      
   696 000006D1 49FFCE                      dec r14 ;descuento un oficial
   697 000006D4 41BB01000000                mov r11, 1 ;indicar que tengo que imprimir mensaje.
   698 000006DA 4153                        push r11
   699 000006DC E9FEFAFFFF                  jmp fin_validar_desatendido
   700                                  
   701                                  movimiento_oficial_invalido:
   702 000006E1 48BF-                       mov rdi,msj_movimiento_oficial_invalido
   702 000006E3 [8D00000000000000] 
   703 000006EB 4883EC08                    sub rsp, 8
   704 000006EF E8(00000000)                call printf
   705 000006F4 4883C408                    add rsp,8
   706                                      
   707 000006F8 41BC01000000                mov r12,1
   708 000006FE E93BF9FFFF                  jmp fin_validacion_movimiento_oficial
   709                                  
   710                                  movimiento_soldado_invalido:
   711 00000703 4889E0                      mov rax, rsp
   712 00000706 4883E00F                    and rax, 15
   713 0000070A 7404                        je no_restar_rsp
   714 0000070C 4883EC08                    sub rsp, 8
   715                                  no_restar_rsp:
   716 00000710 48BF-                       mov rdi,msj_movimiento_soldado_invalido
   716 00000712 [C200000000000000] 
   717 0000071A E8(00000000)                call printf
   718 0000071F 4883C408                    add rsp,8
   719 00000723 E9F8F8FFFF                  jmp pedir_movimiento
   720                                  
   721                                  movimiento_soldado_valido:
   722 00000728 41BF00000000                mov r15, 0 ;reseteo r15 antes que jueguen los oficiales
   723 0000072E 41BB00000000                mov r11, 0 ;reseteo r11, indicador de que eliminaron un oficial ya que no lo hicieron este turno.
   724 00000734 4153                        push r11
   725 00000736 E90EF9FFFF                  jmp prox_turno
   726                                  
   727                                  validar_si_oficial_debe_comer_prox_turno:
   728                                      ;encontrar oficial_1 (solo con el desplazamiento)
   729 0000073B 4829C9                      sub rcx, rcx
   730 0000073E 4829C0                      sub rax, rax
   731 00000741 4829DB                      sub rbx, rbx
   732 00000744 4D29D2                      sub r10, r10
   733                                      
   734 00000747 48BB-                       mov rbx,matriz ;pongo el pto al inicio de la matriz
   734 00000749 [0A02000000000000] 
   735                                  actualizo_indice:
   736 00000751 4C8B13                      mov r10, [rbx] ;guardo el oficial_1
   737 00000754 4180FA4F                    cmp r10b, 'O'
   738 00000758 7405                        je revisar_si_oficial_puede_comer
   739 0000075A 48FFC3                      inc rbx
   740 0000075D EBF2                        jmp actualizo_indice
   741                                  
   742                                  
   743                                  ;;;;;;;;aca viene lo bueno
   744                                  revisar_si_oficial_puede_comer:
   745                                      ;tengo en rbx la matriz en el indice del soldado.
   746                                  revisar_celda_derecha:
   747 0000075F 4C8B5301                    mov r10, [rbx+1]; +1 = a la derecha de la posicion actual
   748 00000763 4180FA58                    cmp r10b, 'X'
   749 00000767 7402                        je revisar_captura_derecha
   750 00000769 EB0E                        jmp revisar_celda_abajo_derecha
   751                                  revisar_captura_derecha:
   752 0000076B 4C8B5302                    mov r10, [rbx+2] ;+2 = a la derecha 2posiciones de la posicion actual
   753 0000076F 4180FA20                    cmp r10b, ' '
   754 00000773 0F84A9000000                je oficiales_pueden_comer
   755                                  
   756                                  revisar_celda_abajo_derecha:
   757 00000779 4C8B530A                    mov r10, [rbx+10]; +10 = a la derecha abajo de la posicion actual
   758 0000077D 4180FA58                    cmp r10b, 'X'
   759 00000781 7402                        je revisar_captura_abajo_derecha
   760 00000783 EB0E                        jmp revisar_celda_abajo
   761                                  revisar_captura_abajo_derecha:
   762 00000785 4C8B5314                    mov r10, [rbx+20] ;+2 = a la derecha abajo 2posiciones de la posicion actual
   763 00000789 4180FA20                    cmp r10b, ' '
   764 0000078D 0F848F000000                je oficiales_pueden_comer
   765                                  
   766                                  revisar_celda_abajo:
   767 00000793 4C8B5309                    mov r10, [rbx+9]; +1 = abajo de la posicion actual
   768 00000797 4180FA58                    cmp r10b, 'X'
   769 0000079B 7402                        je revisar_captura_abajo
   770 0000079D EB0A                        jmp revisar_celda_abajo_izquierda
   771                                  revisar_captura_abajo:
   772 0000079F 4C8B5312                    mov r10, [rbx+18] ;+2 = abajo 2posiciones de la posicion actual
   773 000007A3 4180FA20                    cmp r10b, ' '
   774 000007A7 7479                        je oficiales_pueden_comer
   775                                  
   776                                  revisar_celda_abajo_izquierda:
   777 000007A9 4C8B5308                    mov r10, [rbx+8]
   778 000007AD 4180FA58                    cmp r10b, 'X'
   779 000007B1 7402                        je revisar_captura_abajo_izquierda
   780 000007B3 EB0A                        jmp revisar_celda_izquierda
   781                                  revisar_captura_abajo_izquierda:
   782 000007B5 4C8B5310                    mov r10, [rbx+16]
   783 000007B9 4180FA20                    cmp r10b, ' '
   784 000007BD 7463                        je oficiales_pueden_comer
   785                                  
   786                                  revisar_celda_izquierda:
   787 000007BF 4C8B53FF                    mov r10, [rbx-1]
   788 000007C3 4180FA58                    cmp r10b, 'X'
   789 000007C7 7402                        je revisar_captura_izquierda
   790 000007C9 EB0A                        jmp revisar_celda_arriba_izquierda
   791                                  revisar_captura_izquierda:
   792 000007CB 4C8B53FE                    mov r10, [rbx-2]
   793 000007CF 4180FA20                    cmp r10b, ' '
   794 000007D3 744D                        je oficiales_pueden_comer
   795                                  
   796                                  revisar_celda_arriba_izquierda:
   797 000007D5 4C8B53F6                    mov r10, [rbx-10]
   798 000007D9 4180FA58                    cmp r10b, 'X'
   799 000007DD 7402                        je revisar_captura_arriba_izquierda
   800 000007DF EB0A                        jmp revisar_celda_arriba
   801                                  revisar_captura_arriba_izquierda:
   802 000007E1 4C8B53EC                    mov r10, [rbx-20]
   803 000007E5 4180FA20                    cmp r10b, ' '
   804 000007E9 7437                        je oficiales_pueden_comer
   805                                  
   806                                  revisar_celda_arriba:
   807 000007EB 4C8B53F7                    mov r10, [rbx-9]
   808 000007EF 4180FA58                    cmp r10b, 'X'
   809 000007F3 7402                        je revisar_captura_arriba
   810 000007F5 EB0A                        jmp revisar_celda_arriba_derecha
   811                                  revisar_captura_arriba:
   812 000007F7 4C8B53EE                    mov r10, [rbx-18]
   813 000007FB 4180FA20                    cmp r10b, ' '
   814 000007FF 7421                        je oficiales_pueden_comer
   815                                  
   816                                  revisar_celda_arriba_derecha:
   817 00000801 4C8B53F8                    mov r10, [rbx-8]
   818 00000805 4180FA58                    cmp r10b, 'X'
   819 00000809 7402                        je revisar_captura_arriba_derecha
   820 0000080B EB0A                        jmp oficiales_no_pueden_comer ;fin de validaciones
   821                                  revisar_captura_arriba_derecha:
   822 0000080D 4C8B53F0                    mov r10, [rbx-16]
   823 00000811 4180FA20                    cmp r10b, ' '
   824 00000815 740B                        je oficiales_pueden_comer
   825                                  
   826                                  oficiales_no_pueden_comer:
   827 00000817 41BD00000000                mov r13, 0 ;se resetea siempre antes que jueguen oficiales
   828 0000081D E92CF8FFFF                  jmp fin_actualizar_tablero
   829                                      
   830                                  oficiales_pueden_comer:
   831 00000822 41BD01000000                mov r13, 1 ;se resetea siempre antes que jueguen oficiales
   832 00000828 E921F8FFFF                  jmp fin_actualizar_tablero
   833                                  
   834                                  verificar_ganador:
   835 0000082D 4983FE00                    cmp r14, 0
   836 00000831 0F8495000000                je ganaron_soldados_por_falta_oficiales
   837                                  verificar_invasion:
   838 00000837 4829C9                      sub rcx, rcx
   839 0000083A 4829C0                      sub rax, rax
   840 0000083D 4829DB                      sub rbx, rbx
   841 00000840 4D29D2                      sub r10, r10
   842 00000843 B005                        mov al, 5
   843 00000845 41B809000000                mov r8, cantidadFilas
   844 0000084B 49F7E8                      imul r8
   845 0000084E 4801C1                      add rcx,rax
   846                                      
   847 00000851 B003                        mov al, 3
   848 00000853 41B801000000                mov r8, longitudElemento 
   849 00000859 49F7E8                      imul r8
   850 0000085C 4801C1                      add rcx,rax
   851                                      
   852 0000085F 48BB-                       mov rbx,matriz 
   852 00000861 [0A02000000000000] 
   853 00000869 4801CB                      add rbx,rcx ;me posicione en la matriz
   854                                  
   855                                  ;fila_5_fortaleza
   856 0000086C 4C8B13                      mov r10, [rbx] ;guardo un elemento
   857 0000086F 4180FA58                    cmp r10b, 'X'
   858 00000873 7552                        jne no_invadieron_la_fortaleza
   859 00000875 4C8B5301                    mov r10, [rbx+1] ;guardo un elemento
   860 00000879 4180FA58                    cmp r10b, 'X'
   861 0000087D 7548                        jne no_invadieron_la_fortaleza
   862 0000087F 4C8B5302                    mov r10, [rbx+2] ;guardo un elemento
   863 00000883 4180FA58                    cmp r10b, 'X'
   864 00000887 753E                        jne no_invadieron_la_fortaleza
   865                                  ;fila_6_fortaleza
   866 00000889 4C8B5309                    mov r10, [rbx+9] ;guardo un elemento
   867 0000088D 4180FA58                    cmp r10b, 'X'
   868 00000891 7534                        jne no_invadieron_la_fortaleza
   869 00000893 4C8B530A                    mov r10, [rbx+10] ;guardo un elemento
   870 00000897 4180FA58                    cmp r10b, 'X'
   871 0000089B 752A                        jne no_invadieron_la_fortaleza
   872 0000089D 4C8B530B                    mov r10, [rbx+11] ;guardo un elemento
   873 000008A1 4180FA58                    cmp r10b, 'X'
   874 000008A5 7520                        jne no_invadieron_la_fortaleza
   875                                  ;fila_7_fortaleza
   876 000008A7 4C8B5312                    mov r10, [rbx+18] ;guardo un elemento
   877 000008AB 4180FA58                    cmp r10b, 'X'
   878 000008AF 7516                        jne no_invadieron_la_fortaleza
   879 000008B1 4C8B5313                    mov r10, [rbx+19] ;guardo un elemento
   880 000008B5 4180FA58                    cmp r10b, 'X'
   881 000008B9 750C                        jne no_invadieron_la_fortaleza
   882 000008BB 4C8B5314                    mov r10, [rbx+20] ;guardo un elemento
   883 000008BF 4180FA58                    cmp r10b, 'X'
   884 000008C3 7502                        jne no_invadieron_la_fortaleza
   885                                  
   886 000008C5 EB26                        jmp ganaron_soldados_por_invasion
   887                                      
   888                                  no_invadieron_la_fortaleza:
   889 000008C7 E98CF7FFFF                  jmp fin_verificar_ganador
   890                                  
   891                                  ganaron_soldados_por_falta_oficiales:
   892 000008CC E8A7F7FFFF                  call mostrar_tablero
   893 000008D1 48BF-                       mov rdi,msj_ganaron_soldados_por_falta_oficiales
   893 000008D3 [4701000000000000] 
   894 000008DB 4883EC08                    sub rsp, 8
   895 000008DF E8(00000000)                call printf
   896 000008E4 4883C408                    add rsp,8
   897 000008E8 E96DF7FFFF                  jmp fin
   898                                  
   899                                  ganaron_soldados_por_invasion:
   900 000008ED E886F7FFFF                  call mostrar_tablero
   901 000008F2 48BF-                       mov rdi,msj_ganaron_soldados_por_invasion
   901 000008F4 [9501000000000000] 
   902 000008FC 4883EC08                    sub rsp, 8
   903 00000900 E8(00000000)                call printf
   904 00000905 4883C408                    add rsp,8
   905 00000909 E94CF7FFFF                  jmp fin
   906                                  
   907                                  
   908                                  
   909                                  validar_movimiento_soldado:
   910 0000090E B800000000                  mov rax,0
   911                                      
   912 00000913 8A0425[36000000]            mov al, [posx_fin]
   913 0000091A 8A2425[34000000]            mov ah, [posx_ini]
   914 00000921 28E0                        sub al, ah
   915                                  
   916 00000923 3C00                        cmp al, 0
   917 00000925 7415                        je validar_movimiento_soldado_horizontal
   918 00000927 3CFF                        cmp al,-1 
   919 00000929 0F84D6000000                je validar_movimiento_soldado_arriba
   920 0000092F 3C01                        cmp al, 1
   921 00000931 0F845C010000                je validar_movimiento_soldado_abajo
   922 00000937 E9C7FDFFFF                  jmp movimiento_soldado_invalido
   923                                      
   924                                  ;fn terminada
   925                                  validar_movimiento_soldado_horizontal:
   926 0000093C B800000000                  mov rax,0
   927 00000941 8A0425[34000000]            mov al, [posx_ini]
   928                                  
   929 00000948 3C07                        cmp al, 7
   930 0000094A 740D                        je validar_movimiento_soldado_horizontal_fila_siete_seis
   931 0000094C 3C06                        cmp al, 6
   932 0000094E 7409                        je validar_movimiento_soldado_horizontal_fila_siete_seis
   933 00000950 3C05                        cmp al, 5
   934 00000952 7451                        je validar_movimiento_soldado_horizontal_fila_cinco
   935                                  
   936 00000954 E9AAFDFFFF                  jmp movimiento_soldado_invalido
   937                                  
   938                                  ;fn terminada
   939                                  validar_movimiento_soldado_horizontal_fila_siete_seis:
   940 00000959 BA00000000                  mov rdx,0
   941 0000095E 8A1425[35000000]            mov dl, [posy_ini]
   942 00000965 8A3425[37000000]            mov dh, [posy_fin]
   943                                  
   944 0000096C 80FA03                      cmp dl, 3
   945 0000096F 740F                        je validar_movimiento_soldado_horizontal_columna_tres_cinco
   946 00000971 80FA04                      cmp dl, 4
   947 00000974 7418                        je validar_movimiento_soldado_horizontal_columna_cuatro
   948 00000976 80FA05                      cmp dl, 5
   949 00000979 7405                        je validar_movimiento_soldado_horizontal_columna_tres_cinco
   950 0000097B E983FDFFFF                  jmp movimiento_soldado_invalido
   951                                  
   952                                  validar_movimiento_soldado_horizontal_columna_tres_cinco:
   953 00000980 80FE04                      cmp dh, 4
   954 00000983 0F849FFDFFFF                je movimiento_soldado_valido
   955 00000989 E975FDFFFF                  jmp movimiento_soldado_invalido
   956                                  
   957                                  validar_movimiento_soldado_horizontal_columna_cuatro:
   958 0000098E 80FE03                      cmp dh, 3
   959 00000991 0F8491FDFFFF                je movimiento_soldado_valido
   960 00000997 80FE05                      cmp dh, 5
   961 0000099A 0F8488FDFFFF                je movimiento_soldado_valido
   962 000009A0 E95EFDFFFF                  jmp movimiento_soldado_invalido
   963                                  
   964                                  validar_movimiento_soldado_horizontal_fila_cinco:
   965 000009A5 BA00000000                  mov rdx,0
   966 000009AA 8A1425[35000000]            mov dl, [posy_ini]
   967 000009B1 8A3425[37000000]            mov dh, [posy_fin]
   968                                      
   969 000009B8 80FA03                      cmp dl, 3
   970 000009BB 7E0F                        jle movimiento_soldado_derecha
   971 000009BD 80FA04                      cmp dl, 4
   972 000009C0 742A                        je movimiento_soldado_derecha_izquierda
   973 000009C2 80FA07                      cmp dl, 7
   974 000009C5 7E15                        jle movimiento_soldado_izquierda
   975 000009C7 E937FDFFFF                  jmp movimiento_soldado_invalido
   976                                  
   977                                  movimiento_soldado_derecha:
   978 000009CC 28D6                        sub dh,dl
   979 000009CE 80FE01                      cmp dh, 1
   980 000009D1 0F8451FDFFFF                je movimiento_soldado_valido
   981 000009D7 E927FDFFFF                  jmp movimiento_soldado_invalido
   982                                  
   983                                  movimiento_soldado_izquierda:
   984 000009DC 28D6                        sub dh,dl
   985 000009DE 80FEFF                      cmp dh,-1
   986 000009E1 0F8441FDFFFF                je movimiento_soldado_valido
   987 000009E7 E917FDFFFF                  jmp movimiento_soldado_invalido
   988                                  
   989                                  movimiento_soldado_derecha_izquierda:
   990 000009EC 28D6                        sub dh,dl
   991 000009EE 80FEFF                      cmp dh,-1
   992 000009F1 0F8431FDFFFF                je movimiento_soldado_valido
   993 000009F7 80FE01                      cmp dh, 1
   994 000009FA 0F8428FDFFFF                je movimiento_soldado_valido
   995 00000A00 E9FEFCFFFF                  jmp movimiento_soldado_invalido
   996                                  
   997                                  ;;fin validar movimientos horizontales
   998                                  validar_movimiento_soldado_arriba:
   999 00000A05 B800000000                  mov rax,0
  1000 00000A0A 8A0425[34000000]            mov al, [posx_ini]
  1001                                      
  1002 00000A11 3C06                        cmp al, 6
  1003 00000A13 7409                        je validar_movimiento_soldado_arriba_en_fortaleza
  1004 00000A15 3C07                        cmp al, 7
  1005 00000A17 7405                        je validar_movimiento_soldado_arriba_en_fortaleza
  1006 00000A19 E9E5FCFFFF                  jmp movimiento_soldado_invalido
  1007                                  
  1008                                  validar_movimiento_soldado_arriba_en_fortaleza:
  1009 00000A1E BA00000000                  mov rdx,0
  1010 00000A23 8A1425[35000000]            mov dl, [posy_ini]
  1011 00000A2A 8A3425[37000000]            mov dh, [posy_fin]
  1012                                  
  1013 00000A31 80FA03                      cmp dl, 3
  1014 00000A34 740F                        je validar_movimiento_soldado_arriba_en_fortaleza_columna_tres
  1015 00000A36 80FA04                      cmp dl, 4
  1016 00000A39 7421                        je validar_movimiento_soldado_arriba_en_fortaleza_columna_cuatro
  1017 00000A3B 80FA05                      cmp dl, 5
  1018 00000A3E 743C                        je validar_movimiento_soldado_arriba_en_fortaleza_columna_cinco
  1019 00000A40 E9BEFCFFFF                  jmp movimiento_soldado_invalido
  1020                                  
  1021                                  validar_movimiento_soldado_arriba_en_fortaleza_columna_tres:
  1022 00000A45 80FE03                      cmp dh, 3
  1023 00000A48 0F84DAFCFFFF                je movimiento_soldado_valido
  1024 00000A4E 80FE04                      cmp dh, 4
  1025 00000A51 0F84D1FCFFFF                je movimiento_soldado_valido
  1026 00000A57 E9A7FCFFFF                  jmp movimiento_soldado_invalido
  1027                                  
  1028                                  validar_movimiento_soldado_arriba_en_fortaleza_columna_cuatro:
  1029 00000A5C 80FE03                      cmp dh, 3
  1030 00000A5F 0F84C3FCFFFF                je movimiento_soldado_valido
  1031 00000A65 80FE04                      cmp dh, 4
  1032 00000A68 0F84BAFCFFFF                je movimiento_soldado_valido
  1033 00000A6E 80FE05                      cmp dh, 5
  1034 00000A71 0F84B1FCFFFF                je movimiento_soldado_valido
  1035 00000A77 E987FCFFFF                  jmp movimiento_soldado_invalido
  1036                                  
  1037                                  validar_movimiento_soldado_arriba_en_fortaleza_columna_cinco:
  1038 00000A7C 80FE04                      cmp dh, 4
  1039 00000A7F 0F84A3FCFFFF                je movimiento_soldado_valido
  1040 00000A85 80FE05                      cmp dh, 5
  1041 00000A88 0F849AFCFFFF                je movimiento_soldado_valido
  1042 00000A8E E970FCFFFF                  jmp movimiento_soldado_invalido
  1043                                  
  1044                                  validar_movimiento_soldado_abajo:
  1045 00000A93 BA00000000                  mov rdx,0
  1046 00000A98 8A1425[35000000]            mov dl, [posy_ini]
  1047 00000A9F 8A3425[37000000]            mov dh, [posy_fin]
  1048                                      
  1049 00000AA6 28D6                        sub dh, dl
  1050 00000AA8 80FEFF                      cmp dh,-1
  1051 00000AAB 0F8477FCFFFF                je movimiento_soldado_valido
  1052 00000AB1 80FE00                      cmp dh, 0
  1053 00000AB4 0F846EFCFFFF                je movimiento_soldado_valido
  1054 00000ABA 80FE01                      cmp dh, 1
  1055 00000ABD 0F8465FCFFFF                je movimiento_soldado_valido
  1056 00000AC3 E93BFCFFFF                  jmp movimiento_soldado_invalido
  1057                                  
  1058                                  ;;fin validar_movimiento_soldado
  1059 00000AC8 E97CF5FFFF                  jmp prox_turno
