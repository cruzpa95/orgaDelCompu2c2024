     1                                  global	main
     2                                  extern 	printf
     3                                  extern  gets
     4                                  
     5                                  extern  system
     6                                  
     7                                  section .data
     8 00000000 496E6772657365204F-         msjIngFilaColumnaOrigen	db	'Ingrese Origen [XY]: ',0
     8 00000009 726967656E205B5859-
     8 00000012 5D3A2000           
     9 00000016 496E67726573652044-         msjIngFilaColumnaDestino	db	'Ingrese Destino [XY]: ',0
     9 0000001F 657374696E6F205B58-
     9 00000028 595D3A2000         
    10                                  
    11 0000002D 0A00                        saltoLinea  db 10, 0     ; Salto de línea al final de cada fila     
    12 0000002F 00                          posicion    db       0
    13 00000030 256C6900                    format	db	'%li', 0
    14                                  
    15                                      longitudElemento equ	1
    16                                      cantidadColumnas equ 8
    17                                      cantidadFilas    equ	9
    18                                      
    19 00000034 01                          posx_ini db 1
    20 00000035 01                          posy_ini db 1
    21                                      
    22 00000036 01                          posx_fin db 1
    23 00000037 01                          posy_fin db 1
    24                                      
    25 00000038 01                          elemento_inicial db 1
    26                                  
    27 00000039 256C6920256C6900            format2	db	'%li %li', 0
    28 00000041 636C65617200                cmd_clear db "clear",0
    29                                      
    30 00000047 4573207475726E6F20-         esTurnoDe	db	'Es turno de los %s!',10,0
    30 00000050 6465206C6F73202573-
    30 00000059 210A00             
    31 0000005C 6F66696369616C6573-         oficiales   db 'oficiales',0
    31 00000065 00                 
    32 00000066 736F6C6461646F7300          soldados    db 'soldados',0
    33 0000006F 736F6C6461646F7300          jugadorActual db 'soldados',0
    34 00000078 636173696C6C65726F-         casilleroInvalido db 'casillero invalido!',10,0
    34 00000081 20696E76616C69646F-
    34 0000008A 210A00             
    35 0000008D 6D6F76696D69656E74-         msj_movimiento_oficial_invalido db 'movimiento_oficial_invalido! Vuelva a intentarlo',10,0
    35 00000096 6F5F6F66696369616C-
    35 0000009F 5F696E76616C69646F-
    35 000000A8 21205675656C766120-
    35 000000B1 6120696E74656E7461-
    35 000000BA 726C6F0A00         
    36                                  
    37 000000BF 46696E2064656C206A-         endGame    db 'Fin del juego!',10,0
    37 000000C8 7565676F210A00     
    38 000000CF 01                          turno db 1
    39 000000D0 02                          divisor db 2 
    40                                      
    41 000000D1 203132333435363700          matriz  db ' 1234567',0
    42 000000DA 315820585858202000                  db '1X XXX  ',0
    43 000000E3 322020582058202000                  db '2  X X  ',0
    44 000000EC 335820202020585800                  db '3X    XX',0
    45 000000F5 345820204F20205800                  db '4X  O  X',0
    46 000000FE 355858202020585800                  db '5XX   XX',0
    47 00000107 36202020204F202000                  db '6    O  ',0
    48 00000110 3720204F2020202000                  db '7  O    ',0
    49                                  
    50                                  section .bss    
    51 00000000 <res Ah>                    buffer		resb	10
    52 0000000A ????                        cadena resb 2
    53 0000000C ??                          numero  resb 1
    54                                  
    55                                  section .text
    56                                  main:
    57 00000000 4889E5                       mov rbp, rsp; for correct debugging   
    58 00000003 4883EC08                    sub rsp, 8
    59 00000007 E8BD020000                  call asignar_jugador_inicial
    60                                  ciclo_juego:
    61 0000000C E866010000                  call clear_screen
    62 00000011 E858000000                  call mostrar_tablero
    63 00000016 E831020000                  call mostrar_jugador_actual
    64                                  pedir_movimiento:
    65 0000001B E86F010000                  call pedir_casillero_origen
    66 00000020 E8CB010000                  call pedir_casillero_destino
    67                                  
    68                                  
    69                                  
    70 00000025 8A0425[CF000000]            mov al, [turno]
    71 0000002C 3C01                        cmp al, 1
    72 0000002E 740D                        je call_validar_movimiento_soldado
    73                                  call_validar_movimiento_oficial:    
    74 00000030 E869040000                  call validar_movimiento_oficial ;hacer esto solo si es el turno del oficial.
    75 00000035 4983FC00                    cmp r12, 0                  ; Si la validacion esta mal -> r12 != 0 -> volver a pedir origen-destin0
    76 00000039 75E0                        jne pedir_movimiento         ; Si no es 0 -> back to pedir_movimiento
    77 0000003B EB02                        jmp prox_turno
    78                                  call_validar_movimiento_soldado:
    79 0000003D EB00                        jmp prox_turno
    80                                      
    81                                  prox_turno:
    82 0000003F E828020000                  call actualizar_turno
    83 00000044 E896000000                  call actualizar_tablero
    84 00000049 EBC1                        jmp ciclo_juego      ; Repite el bucle
    85                                          
    86                                      fin:
    87                                  ;    add rsp, 8             ; Restaura el espacio de la pila
    88 0000004B E827010000                  call clear_screen
    89                                  
    90 00000050 48BF-                       mov rdi, endGame
    90 00000052 [BF00000000000000] 
    91 0000005A 4883EC08                    sub rsp, 8
    92 0000005E E8(00000000)                call printf
    93 00000063 4883C408                    add rsp,8
    94                                  
    95 00000067 B44C                        mov ah, 4Ch    ; Código de función para terminar el programa;    mov al, 0      ; Código de retorno (0 indica éxito)
    96 00000069 B000                        mov al, 0      ; Código de retorno (0 indica éxito)
    97 0000006B CD21                        int 21h        ; Llamada a la interrupción 21h
    98                                  
    99 0000006D C3                          ret
   100                                  
   101                                  mostrar_tablero:
   102 0000006E B800000000                  mov rax, 0
   103 00000073 48890425[2F000000]          mov [posicion], rax 
   104 0000007B B908000000                  mov rcx, cantidadColumnas
   105 00000080 4883EC08                    sub rsp, 8
   106                                      fila_loop:
   107 00000084 51                              push rcx ;es necesario para loop, sino el registro rcx se pisa y loopea infinito
   108                                          ; Carga la dirección de la fila actual en la matriz
   109                                  
   110                                          ; Imprime la fila actual
   111                                  
   112 00000085 48BF-                           mov rdi, matriz         ; Pasa la dirección de la fila a printf
   112 00000087 [D100000000000000] 
   113 0000008F 48033C25[2F000000]              add rdi, [posicion]
   114 00000097 4829C0                          sub rax, rax           ; Limpia rax para printf
   115                                          
   116                                          
   117 0000009A E8(00000000)                    call printf
   118                                          ; Imprime salto de línea después de cada fila
   119 0000009F 48BF-                           mov rdi, saltoLinea
   119 000000A1 [2D00000000000000] 
   120 000000A9 4831C0                          xor rax, rax           ; Limpia rax para printf
   121 000000AC E8(00000000)                    call printf
   122 000000B1 59                              pop rcx ;es necesario para loop, sino el registro rcx se pisa y loopea infinito
   123                                          
   124                                          ; Sumar 10 a "posicion"
   125 000000B2 488B0425[2F000000]              mov rax, [posicion]         ; Carga el valor de "posicion" en rax
   126 000000BA 4883C009                        add rax, cantidadFilas                 ; Suma 10 a rax
   127 000000BE 48890425[2F000000]              mov [posicion], rax         ; Guarda el nuevo valor en "posicion"
   128                                          
   129 000000C6 E2BC                            loop fila_loop
   130                                          
   131 000000C8 48BF-                           mov rdi, saltoLinea
   131 000000CA [2D00000000000000] 
   132 000000D2 4831C0                          xor rax, rax           ; Limpia rax para printf
   133 000000D5 E8(00000000)                    call printf
   134 000000DA 4883C408                        add rsp, 8
   135 000000DE C3                              ret
   136                                  
   137                                  actualizar_tablero:
   138                                      ;Posicionamiento en el elemento i,j de una matriz
   139                                      ;(i-1)*longitudFila + (j-1)*longitudElemento
   140                                      ;longitdFila= longitudElemento*cantidadColumnas
   141 000000DF 4829C9                      sub rcx, rcx
   142 000000E2 4829C0                      sub rax, rax
   143 000000E5 4829DB                      sub rbx, rbx
   144 000000E8 4D29D2                      sub r10, r10
   145 000000EB 8A0425[34000000]            mov al,[posx_ini] ;guardo el valor de la fila, en AL(8bits) 
   146                                                      ;ya que posx es db (byte= 8bits) sino guarda cualquier cosa
   147                                  ;    sub rax,1 -> no es necesaria la resta ya que la matriz empieza en 1,1
   148 000000F2 41B809000000                mov r8, cantidadFilas
   149 000000F8 49F7E8                      imul r8   ;me desplazo en la fila
   150 000000FB 4801C1                      add rcx,rax
   151                                      
   152 000000FE 8A0425[35000000]            mov al,[posy_ini] ;guardo el valor de la col,
   153                                  ;    sub rax,1
   154 00000105 41B801000000                mov r8, longitudElemento ;guardo en r8 para darle longitud y poder multiplicar usando imul
   155 0000010B 49F7E8                      imul r8 ;me desplazo en la columna
   156 0000010E 4801C1                      add rcx,rax ;sumo los desplazamientos
   157                                      
   158                                      
   159 00000111 48BB-                       mov rbx,matriz ;pongo el pto al inicio de la matriz
   159 00000113 [D100000000000000] 
   160 0000011B 4801CB                      add rbx,rcx ;me posicione en la matriz
   161                                  
   162 0000011E 4C8B13                      mov r10, [rbx] ;guardo un elemento
   163 00000121 4C8B4B01                    mov r9, [rbx+1] ;guardo en r9 lo que le sigue de matriz posterior al elemento a actualizar
   164 00000125 41B820000000                mov r8, " " ; lo muevo a un reg para darle (y estar seguro de su) longitud
   165 0000012B 4C8903                      mov [rbx],r8 ;muevo el valor(de igual longitud). muevo a la posicion de la matriz a actualizar
   166                                      
   167                                      ;despues de agregar el nuevo valor, agregarle el resto de la matriz que estaba antes.
   168 0000012E 4C894B01                    mov [rbx+1],r9
   169                                      
   170                                      
   171                                      ;;repito con casillero_destino
   172                                      ;;y guardo en el destino lo que guarde en r10 (el elemento origen)
   173                                      
   174                                      
   175                                      ;Posicionamiento en el elemento i,j de una matriz
   176                                      ;(i-1)*longitudFila + (j-1)*longitudElemento
   177                                      ;longitdFila= longitudElemento*cantidadColumnas
   178 00000132 4829C9                      sub rcx, rcx
   179 00000135 8A0425[36000000]            mov al,[posx_fin] ;guardo el valor de la fila, en AL(8bits) 
   180                                                      ;ya que posx es db (byte= 8bits) sino guarda cualquier cosa
   181                                  ;    sub rax,1 -> no es necesaria la resta ya que la matriz empieza en 1,1
   182 0000013C 41B809000000                mov r8, cantidadFilas
   183 00000142 49F7E8                      imul r8   ;me desplazo en la fila
   184 00000145 4801C1                      add rcx,rax
   185                                      
   186 00000148 8A0425[37000000]            mov al,[posy_fin] ;guardo el valor de la col,
   187                                  ;    sub rax,1
   188 0000014F 41B801000000                mov r8, longitudElemento ;guardo en r8 para darle longitud y poder multiplicar usando imul
   189 00000155 49F7E8                      imul r8 ;me desplazo en la columna
   190 00000158 4801C1                      add rcx,rax ;sumo los desplazamientos
   191                                      
   192                                      
   193 0000015B 48BB-                       mov rbx,matriz ;pongo el pto al inicio de la matriz
   193 0000015D [D100000000000000] 
   194 00000165 4801CB                      add rbx,rcx ;me posicione en la matriz
   195                                  
   196 00000168 4C8B4B01                    mov r9, [rbx+1] ;guardo en r9 lo que le sigue de matriz posterior al elemento a actualizar
   197 0000016C 4D89D0                      mov r8, r10 ; lo muevo a un reg para darle (y estar seguro de su) longitud
   198 0000016F 4C8903                      mov [rbx],r8 ;muevo el valor(de igual longitud). muevo a la posicion de la matriz a actualizar
   199                                      
   200                                      ;despues de agregar el nuevo valor, agregarle el resto de la matriz que estaba antes.
   201 00000172 4C894B01                    mov [rbx+1],r9
   202                                  
   203 00000176 C3                          ret
   204                                  
   205                                  clear_screen:
   206                                  
   207 00000177 48BF-                       mov rdi, cmd_clear
   207 00000179 [4100000000000000] 
   208 00000181 4883EC08                    sub rsp, 8
   209 00000185 E8(00000000)                call system
   210 0000018A 4883C408                    add rsp, 8
   211 0000018E C3                          ret
   212                                      
   213                                  pedir_casillero_origen:
   214                                      
   215 0000018F 4883EC08                    sub rsp, 8
   216 00000193 48BF-                       mov rdi, msjIngFilaColumnaOrigen
   216 00000195 [0000000000000000] 
   217 0000019D E8(00000000)                call printf
   218                                  
   219                                  
   220 000001A2 48BF-                       mov rdi, cadena      ; Dirección de 'cadena'
   220 000001A4 [0A00000000000000] 
   221 000001AC E8(00000000)                call gets
   222 000001B1 4883C408                    add rsp, 8
   223                                  
   224                                      ; Extraer el primer carácter (primer número)
   225 000001B5 480FB60425-                 movzx rax, byte [cadena]     ; Cargar el primer carácter de 'cadena' en rax
   225 000001BA [0A000000]         
   226 000001BE 4883E830                    sub rax, '0'                 ; Convertir de ASCII a valor numérico
   227 000001C2 880425[34000000]            mov [posx_ini], al            ; Guardar el valor en 'posx_ini'
   228                                      
   229 000001C9 803C25[34000000]00          cmp byte [posx_ini], 0
   230 000001D1 0F8474FEFFFF                je fin               ; Si es 0, salta a "fin de juego"
   231                                      
   232                                      ; Extraer el segundo carácter (segundo número)
   233 000001D7 480FB60425-                 movzx rax, byte [cadena + 1] ; Cargar el segundo carácter de 'cadena' en rax
   233 000001DC [0B000000]         
   234 000001E0 4883E830                    sub rax, '0'                 ; Convertir de ASCII a valor numérico
   235 000001E4 880425[35000000]            mov [posy_ini], al            ; Guardar el valor en 'posy_ini'
   236                                      
   237 000001EB E9EA000000                  jmp validar_casillero_origen
   238                                      
   239                                  pedir_casillero_destino:
   240 000001F0 4883EC08                    sub rsp, 8
   241 000001F4 48BF-                       mov rdi, msjIngFilaColumnaDestino
   241 000001F6 [1600000000000000] 
   242 000001FE E8(00000000)                call printf
   243 00000203 4883C408                    add rsp, 8
   244                                  
   245 00000207 48BF-                       mov rdi, cadena      ; Dirección de 'cadena'
   245 00000209 [0A00000000000000] 
   246 00000211 4883EC08                    sub rsp, 8
   247 00000215 E8(00000000)                call gets
   248 0000021A 4883C408                    add rsp, 8
   249                                  
   250                                      ; Extraer el primer carácter (primer número)
   251 0000021E 480FB60425-                 movzx rax, byte [cadena]     ; Cargar el primer carácter de 'cadena' en rax
   251 00000223 [0A000000]         
   252 00000227 4883E830                    sub rax, '0'                 ; Convertir de ASCII a valor numérico
   253 0000022B 880425[36000000]            mov [posx_fin], al            ; Guardar el valor en 'posx_ini'
   254                                      
   255                                      ; Extraer el segundo carácter (segundo número)
   256 00000232 480FB60425-                 movzx rax, byte [cadena + 1] ; Cargar el segundo carácter de 'cadena' en rax
   256 00000237 [0B000000]         
   257 0000023B 4883E830                    sub rax, '0'                 ; Convertir de ASCII a valor numérico
   258 0000023F 880425[37000000]            mov [posy_fin], al            ; Guardar el valor en 'posy_ini'
   259 00000246 E9B2010000                  jmp es_destino_valido
   260 0000024B C3                          ret
   261                                      
   262                                  mostrar_jugador_actual:    
   263 0000024C 4883EC08                    sub rsp, 8
   264 00000250 48BF-                       mov rdi, esTurnoDe
   264 00000252 [4700000000000000] 
   265 0000025A 488B3425[6F000000]          mov rsi, [jugadorActual]
   266                                   
   267 00000262 E8(00000000)                call printf
   268 00000267 4883C408                    add rsp, 8
   269 0000026B C3                          ret
   270                                      
   271                                  actualizar_turno:
   272 0000026C 8A0425[CF000000]            mov al, [turno]
   273 00000273 800425[CF000000]01          add byte [turno], 1
   274 0000027B 8A0425[CF000000]            mov al, [turno]
   275 00000282 30E4                        xor ah, ah        ; Limpiar AH para asegurar que AX está correcto
   276                                  
   277                                      ; Dividir AX entre el divisor (2)
   278 00000284 4831DB                      xor rbx, rbx        
   279 00000287 8A1C25[D0000000]            mov bl, [divisor]
   280 0000028E F6F3                        div bl            ; AX / BL -> AL = cociente, AH = resto
   281                                  
   282                                      ; Ahora, AH contiene el resto (turno % 2)
   283 00000290 80FC00                      cmp ah, 0         ; Compara el resto con 0
   284 00000293 7402                        je es_par         ; Si el resto es 0, turno es par
   285 00000295 EB19                        jmp es_impar      ; Si no, turno es impar
   286                                  
   287                                  es_par:          
   288 00000297 C60425[CF000000]00          mov byte[turno], 0
   289 0000029F 488D0425[5C000000]          lea rax, [oficiales]          ; Cargar la dirección de 'soldados' en AX
   290 000002A7 48890425[6F000000]          mov [jugadorActual], rax
   291 000002AF C3                          ret
   292                                  
   293                                  es_impar:        
   294 000002B0 C60425[CF000000]01          mov byte[turno], 1
   295 000002B8 488D0425[66000000]          lea rax, [soldados]          ; Cargar la dirección de 'soldados' en AX
   296 000002C0 48890425[6F000000]          mov [jugadorActual], rax
   297 000002C8 C3                          ret
   298                                      
   299                                  asignar_jugador_inicial:
   300 000002C9 488D0425[66000000]          lea rax, [soldados]          ; Cargar la dirección de 'soldados' en AX
   301 000002D1 48890425[6F000000]          mov [jugadorActual], rax
   302 000002D9 C3                          ret
   303                                      
   304                                  validar_casillero_origen:
   305                                      ;;valido que este dentro del tablero
   306 000002DA 4829C0                      sub rax, rax
   307 000002DD 4829DB                      sub rbx, rbx
   308 000002E0 8A0425[34000000]            mov al,[posx_ini]
   309 000002E7 8A1C25[35000000]            mov bl,[posy_ini]
   310                                      
   311                                      validar_dentro_x:
   312 000002EE 3C01                        cmp al, 1
   313 000002F0 740E                        je validar_dentro_y
   314 000002F2 3C02                        cmp al, 2
   315 000002F4 740A                        je validar_dentro_y
   316 000002F6 3C06                        cmp al, 6
   317 000002F8 7406                        je validar_dentro_y
   318 000002FA 3C07                        cmp al, 7
   319 000002FC 7402                        je validar_dentro_y
   320 000002FE EB16                        jmp dentro_tablero_origen_ok
   321                                  validar_dentro_y:
   322 00000300 80FB01                      cmp bl, 1
   323 00000303 7476                        je origen_invalido
   324 00000305 80FB02                      cmp bl, 2
   325 00000308 7471                        je origen_invalido
   326 0000030A 80FB06                      cmp bl, 6
   327 0000030D 746C                        je origen_invalido
   328 0000030F 80FB07                      cmp bl, 7
   329 00000312 7467                        je origen_invalido
   330 00000314 EB00                        jmp dentro_tablero_origen_ok
   331                                      
   332                                  dentro_tablero_origen_ok:
   333 00000316 8A0425[CF000000]            mov al, [turno]
   334 0000031D 30E4                        xor ah, ah        ; Limpiar AH para asegurar que AX está correcto
   335                                  
   336                                      ; Dividir AX entre el divisor (2)
   337 0000031F 4831DB                      xor rbx, rbx        
   338 00000322 8A1C25[D0000000]            mov bl, [divisor]
   339 00000329 F6F3                        div bl            ; AX / BL -> AL = cociente, AH = resto
   340                                  
   341                                      ; Ahora, AH contiene el resto (turno % 2)
   342 0000032B 80FC00                      cmp ah, 0         ; Compara el resto con 0
   343 0000032E 7468                        je es_oficial_valido         ; Si el resto es 0, turno es par
   344 00000330 EB01                        jmp es_soldado_valido ; Si no, turno es impar
   345 00000332 C3                          ret
   346                                      
   347                                  es_soldado_valido:
   348                                  ;busco el elemento en la matriz; y lo guardo en r10 para comparar el elemento.
   349 00000333 4829C9                      sub rcx, rcx
   350 00000336 4829C0                      sub rax, rax
   351 00000339 4829DB                      sub rbx, rbx
   352 0000033C 4D29D2                      sub r10, r10
   353 0000033F 8A0425[34000000]            mov al,[posx_ini] 
   354 00000346 41B809000000                mov r8, cantidadFilas
   355 0000034C 49F7E8                      imul r8
   356 0000034F 4801C1                      add rcx,rax
   357                                      
   358 00000352 8A0425[35000000]            mov al,[posy_ini]
   359 00000359 41B801000000                mov r8, longitudElemento 
   360 0000035F 49F7E8                      imul r8
   361 00000362 4801C1                      add rcx,rax
   362                                      
   363 00000365 48BB-                       mov rbx,matriz 
   363 00000367 [D100000000000000] 
   364 0000036F 4801CB                      add rbx,rcx ;me posicione en la matriz
   365                                  
   366 00000372 4C8B13                      mov r10, [rbx] ;guardo un elemento
   367                                  ;;
   368 00000375 4180FA58                    cmp r10b, 'X'
   369 00000379 741C                        je turno_soldado_ok
   370                                      ;sino fue un mal ingreso:
   371                                  origen_invalido:
   372 0000037B 48BF-                       mov rdi, casilleroInvalido
   372 0000037D [7800000000000000] 
   373 00000385 4883EC08                    sub rsp, 8
   374 00000389 E8(00000000)                call printf
   375 0000038E 4883C408                    add rsp, 8
   376 00000392 E9F8FDFFFF                  jmp pedir_casillero_origen
   377                                      turno_soldado_ok:
   378 00000397 C3                          ret    
   379                                      
   380                                  es_oficial_valido:
   381                                  ;busco el elemento en la matriz; y lo guardo en r10 para comparar el elemento.
   382 00000398 4829C9                      sub rcx, rcx
   383 0000039B 4829C0                      sub rax, rax
   384 0000039E 4829DB                      sub rbx, rbx
   385 000003A1 4D29D2                      sub r10, r10
   386 000003A4 8A0425[34000000]            mov al,[posx_ini] 
   387 000003AB 41B809000000                mov r8, cantidadFilas
   388 000003B1 49F7E8                      imul r8
   389 000003B4 4801C1                      add rcx,rax
   390                                      
   391 000003B7 8A0425[35000000]            mov al,[posy_ini]
   392 000003BE 41B801000000                mov r8, longitudElemento 
   393 000003C4 49F7E8                      imul r8
   394 000003C7 4801C1                      add rcx,rax
   395                                      
   396 000003CA 48BB-                       mov rbx,matriz 
   396 000003CC [D100000000000000] 
   397 000003D4 4801CB                      add rbx,rcx ;me posicione en la matriz
   398                                  
   399 000003D7 4C8B13                      mov r10, [rbx] ;guardo un elemento
   400                                  ;;
   401 000003DA 4180FA4F                    cmp r10b, 'O'
   402 000003DE 741C                        je turno_oficial_ok
   403                                      ;sino fue un mal ingreso:
   404 000003E0 48BF-                       mov rdi, casilleroInvalido
   404 000003E2 [7800000000000000] 
   405 000003EA 4883EC08                    sub rsp, 8
   406 000003EE E8(00000000)                call printf
   407 000003F3 4883C408                    add rsp, 8
   408 000003F7 E993FDFFFF                  jmp pedir_casillero_origen
   409                                      turno_oficial_ok:
   410 000003FC C3                          ret    
   411                                      
   412                                      
   413                                  es_destino_valido:
   414                                      ;;valido que este dentro del tablero
   415 000003FD 4829C0                      sub rax, rax
   416 00000400 4829DB                      sub rbx, rbx
   417 00000403 8A0425[36000000]            mov al,[posx_fin]
   418 0000040A 8A1C25[37000000]            mov bl,[posy_fin]
   419                                      
   420                                  validar_dentro_x_fin:
   421 00000411 3C01                        cmp al, 1
   422 00000413 740E                        je validar_dentro_y_fin
   423 00000415 3C02                        cmp al, 2
   424 00000417 740A                        je validar_dentro_y_fin
   425 00000419 3C06                        cmp al, 6
   426 0000041B 7406                        je validar_dentro_y_fin
   427 0000041D 3C07                        cmp al, 7
   428 0000041F 7402                        je validar_dentro_y_fin
   429 00000421 EB16                        jmp dentro_tablero_destino_ok
   430                                  validar_dentro_y_fin:
   431 00000423 80FB01                      cmp bl, 1
   432 00000426 7459                        je destino_invalido
   433 00000428 80FB02                      cmp bl, 2
   434 0000042B 7454                        je destino_invalido
   435 0000042D 80FB06                      cmp bl, 6
   436 00000430 744F                        je destino_invalido
   437 00000432 80FB07                      cmp bl, 7
   438 00000435 744A                        je destino_invalido
   439 00000437 EB00                        jmp dentro_tablero_destino_ok
   440                                      
   441                                  dentro_tablero_destino_ok:
   442                                  ;busco el elemento en la matriz; y lo guardo en r10 para comparar el elemento.
   443 00000439 4829C9                      sub rcx, rcx
   444 0000043C 4829C0                      sub rax, rax
   445 0000043F 4829DB                      sub rbx, rbx
   446 00000442 4D29D2                      sub r10, r10
   447 00000445 8A0425[36000000]            mov al,[posx_fin] 
   448 0000044C 41B809000000                mov r8, cantidadFilas
   449 00000452 49F7E8                      imul r8
   450 00000455 4801C1                      add rcx,rax
   451                                      
   452 00000458 8A0425[37000000]            mov al,[posy_fin]
   453 0000045F 41B801000000                mov r8, longitudElemento 
   454 00000465 49F7E8                      imul r8
   455 00000468 4801C1                      add rcx,rax
   456                                      
   457 0000046B 48BB-                       mov rbx,matriz 
   457 0000046D [D100000000000000] 
   458 00000475 4801CB                      add rbx,rcx ;me posicione en la matriz
   459                                  
   460 00000478 4C8B13                      mov r10, [rbx] ;guardo un elemento
   461                                  ;;
   462 0000047B 4180FA20                    cmp r10b, ' '
   463 0000047F 741C                        je destino_ok
   464                                      ;sino fue un mal ingreso:
   465                                  destino_invalido:
   466 00000481 48BF-                       mov rdi, casilleroInvalido
   466 00000483 [7800000000000000] 
   467 0000048B 4883EC08                    sub rsp, 8
   468 0000048F E8(00000000)                call printf
   469 00000494 4883C408                    add rsp, 8
   470 00000498 E953FDFFFF                  jmp pedir_casillero_destino
   471                                      destino_ok:
   472 0000049D C3                          ret    
   473                                  validar_movimiento_oficial:
   474                                  ;;falta resolver esto -> solo de a 1 en cualqeuir dir.
   475 0000049E 41BC00000000                mov r12,0
   476 000004A4 B800000000                  mov rax,0
   477                                  
   478 000004A9 8A0425[34000000]            mov al, [posx_ini]
   479 000004B0 8A2425[36000000]            mov ah, [posx_fin]
   480 000004B7 28E0                        sub al,ah
   481 000004B9 3C00                        cmp al, 0
   482 000004BB 740A                        je validar_movimiento_oficial_y_horizontal
   483 000004BD 3C01                        cmp al, 1
   484 000004BF 7425                        je validar_movimiento_oficial_y_arriba_abajo
   485 000004C1 3CFF                        cmp al,-1
   486 000004C3 7421                        je validar_movimiento_oficial_y_arriba_abajo
   487 000004C5 EB49                        jmp movimiento_oficial_invalido
   488                                      
   489                                  validar_movimiento_oficial_y_horizontal:
   490 000004C7 B800000000                  mov rax,0
   491 000004CC 8A0425[35000000]            mov al, [posy_ini]
   492 000004D3 8A2425[37000000]            mov ah, [posy_fin]
   493 000004DA 28E0                        sub al,ah
   494 000004DC 3C01                        cmp al, 1
   495 000004DE 7429                        je movimiento_oficial_ok
   496 000004E0 3CFF                        cmp al,-1
   497 000004E2 7425                        je movimiento_oficial_ok
   498 000004E4 EB2A                        jmp movimiento_oficial_invalido
   499                                  validar_movimiento_oficial_y_arriba_abajo:
   500 000004E6 B800000000                  mov rax,0
   501 000004EB 8A0425[35000000]            mov al, [posy_ini]
   502 000004F2 8A2425[37000000]            mov ah, [posy_fin]
   503 000004F9 28E0                        sub al,ah
   504 000004FB 3C01                        cmp al, 1
   505 000004FD 740A                        je movimiento_oficial_ok
   506 000004FF 3C00                        cmp al, 0
   507 00000501 7406                        je movimiento_oficial_ok
   508 00000503 3CFF                        cmp al,-1
   509 00000505 7402                        je movimiento_oficial_ok
   510 00000507 EB07                        jmp movimiento_oficial_invalido
   511                                      
   512                                      
   513                                  movimiento_oficial_ok:
   514 00000509 41BC00000000                mov r12,0
   515 0000050F C3                          ret
   516                                  movimiento_oficial_invalido:
   517 00000510 48BF-                       mov rdi,msj_movimiento_oficial_invalido
   517 00000512 [8D00000000000000] 
   518 0000051A 4883EC08                    sub rsp, 8
   519 0000051E E8(00000000)                call printf
   520 00000523 4883C408                    add rsp,8
   521                                      
   522 00000527 41BC01000000                mov r12,1
   523 0000052D C3                          ret
   524                                  
   525                                      
   526                                      
