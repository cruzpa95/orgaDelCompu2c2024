     1                                  global	main
     2                                  extern 	printf
     3                                  extern  gets
     4                                  
     5                                  extern  system
     6                                  
     7                                  section .data
     8 00000000 496E6772657365204F-         msjIngFilaColumnaOrigen	db	'Ingrese Origen [XY]: ',0
     8 00000009 726967656E205B5859-
     8 00000012 5D3A2000           
     9 00000016 496E67726573652044-         msjIngFilaColumnaDestino	db	'Ingrese Destino [XY]: ',0
     9 0000001F 657374696E6F205B58-
     9 00000028 595D3A2000         
    10                                  
    11 0000002D 0A00                        saltoLinea  db 10, 0     ; Salto de l√≠nea al final de cada fila     
    12 0000002F 00                          posicion    db       0
    13 00000030 256C6900                    format	db	'%li', 0
    14                                  
    15                                      longitudElemento equ	1
    16                                      cantidadColumnas equ 8
    17                                      cantidadFilas    equ	9
    18                                      
    19 00000034 01                          posx_ini db 1
    20 00000035 01                          posy_ini db 1
    21                                      
    22 00000036 01                          posx_fin db 1
    23 00000037 01                          posy_fin db 1
    24                                      
    25 00000038 01                          elemento_inicial db 1
    26                                  
    27 00000039 256C6920256C6900            format2	db	'%li %li', 0
    28 00000041 636C65617200                cmd_clear db "clear",0
    29                                      
    30 00000047 4573207475726E6F20-         esTurnoDe	db	'Es turno de los %s!',10,0
    30 00000050 6465206C6F73202573-
    30 00000059 210A00             
    31 0000005C 6F66696369616C6573-         oficiales   db 'oficiales',0
    31 00000065 00                 
    32 00000066 736F6C6461646F7300          soldados    db 'soldados',0
    33 0000006F 736F6C6461646F7300          jugadorActual db 'soldados',0
    34 00000078 636173696C6C65726F-         casilleroInvalido db 'casillero invalido!',10,0
    34 00000081 20696E76616C69646F-
    34 0000008A 210A00             
    35 0000008D 6D6F76696D69656E74-         msj_movimiento_oficial_invalido db 'movimiento_oficial_invalido! Vuelva a intentarlo',10,0
    35 00000096 6F5F6F66696369616C-
    35 0000009F 5F696E76616C69646F-
    35 000000A8 21205675656C766120-
    35 000000B1 6120696E74656E7461-
    35 000000BA 726C6F0A00         
    36 000000BF 6D6F76696D69656E74-         msj_movimiento_soldado_invalido db 'movimiento_soldado_invalido! Vuelva a intentarlo',10,0
    36 000000C8 6F5F736F6C6461646F-
    36 000000D1 5F696E76616C69646F-
    36 000000DA 21205675656C766120-
    36 000000E3 6120696E74656E7461-
    36 000000EC 726C6F0A00         
    37                                  
    38 000000F1 47616E61726F6E206C-         msj_ganaron_soldados_por_falta_oficiales db 'Ganaron los soldados, no hay mas oficiales que puedan defender la fortaleza!',10,0
    38 000000FA 6F7320736F6C646164-
    38 00000103 6F732C206E6F206861-
    38 0000010C 79206D6173206F6669-
    38 00000115 6369616C6573207175-
    38 0000011E 652070756564616E20-
    38 00000127 646566656E64657220-
    38 00000130 6C6120666F7274616C-
    38 00000139 657A61210A00       
    39 0000013F 47616E61726F6E206C-         msj_ganaron_soldados_por_invasion db 'Ganaron los soldados, invadieron la fortaleza!',10,0
    39 00000148 6F7320736F6C646164-
    39 00000151 6F732C20696E766164-
    39 0000015A 6965726F6E206C6120-
    39 00000163 666F7274616C657A61-
    39 0000016C 210A00             
    40 0000016F 47616E61726F6E206C-         msj_ganaron_oficiales_por_falta_soldados db 'Ganaron los oficiales, ya no quedan mas soldados!',10,0
    40 00000178 6F73206F6669636961-
    40 00000181 6C65732C207961206E-
    40 0000018A 6F2071756564616E20-
    40 00000193 6D617320736F6C6461-
    40 0000019C 646F73210A00       
    41                                  
    42 000001A2 46696E2064656C206A-         endGame    db 'Fin del juego!',10,0
    42 000001AB 7565676F210A00     
    43 000001B2 01                          turno db 1
    44 000001B3 02                          divisor db 2 
    45                                      
    46 000001B4 203132333435363700          matriz  db ' 1234567',0
    47 000001BD 31207C2020207C2000                  db '1 |   | ',0
    48 000001C6 325F7C2020207C5F00                  db '2_|   |_',0
    49 000001CF 332020205820202000                  db '3   X   ',0
    50 000001D8 342020202020202000                  db '4       ',0
    51 000001E1 352020202020202000                  db '5       ',0
    52 000001EA 367E7C2020207C7E00                  db '6~|   |~',0
    53 000001F3 37207C2020207C2000                  db '7 |   | ',0
    54                                  
    55                                  
    56                                  section .bss    
    57 00000000 <res Ah>                    buffer		resb	10
    58 0000000A ????                        cadena resb 2
    59 0000000C ??                          numero  resb 1
    60                                  
    61                                  section .text
    62                                  main:
    63 00000000 4889E5                      mov rbp, rsp; for correct debugging
    64 00000003 4883EC08                    sub rsp, 8
    65 00000007 41BE02000000                mov r14, 2 ;seteo cantidad de oficiales.
    66 0000000D E886040000                  call asignar_jugador_inicial
    67                                  ciclo_juego:
    68 00000012 E826030000                  call clear_screen
    69 00000017 E818020000                  call mostrar_tablero
    70 0000001C E8FA030000                  call mostrar_jugador_actual
    71                                  pedir_movimiento:
    72 00000021 E82F030000                  call pedir_casillero_origen
    73                                  pedir_movimiento_destino:
    74 00000026 E894030000                  call pedir_casillero_destino
    75                                  
    76 0000002B 8A0425[B2010000]            mov al, [turno]
    77 00000032 3C01                        cmp al, 1
    78 00000034 7410                        je validar_movimiento_soldado
    79 00000036 E832060000                  call validar_movimiento_oficial ;hacer esto solo si es el turno del oficial.
    80 0000003B 4983FC00                    cmp r12, 0                  ; Si la validacion esta mal -> r12 != 0 -> volver a pedir origen-destin0
    81 0000003F 75E0                        jne pedir_movimiento         ; Si no es 0 -> back to pedir_movimiento
    82 00000041 E9BC010000                  jmp prox_turno
    83                                  
    84                                  validar_movimiento_soldado:
    85 00000046 B800000000                  mov rax,0
    86                                      
    87 0000004B 8A0425[36000000]            mov al, [posx_fin]
    88 00000052 8A2425[34000000]            mov ah, [posx_ini]
    89 00000059 28E0                        sub al, ah
    90                                  
    91 0000005B 3C00                        cmp al, 0
    92 0000005D 7415                        je validar_movimiento_soldado_horizontal
    93 0000005F 3CFF                        cmp al,-1 
    94 00000061 0F84D6000000                je validar_movimiento_soldado_arriba
    95 00000067 3C01                        cmp al, 1
    96 00000069 0F845C010000                je validar_movimiento_soldado_abajo
    97 0000006F E94F070000                  jmp movimiento_soldado_invalido
    98                                      
    99                                  ;fn terminada
   100                                  validar_movimiento_soldado_horizontal:
   101 00000074 B800000000                  mov rax,0
   102 00000079 8A0425[34000000]            mov al, [posx_ini]
   103                                  
   104 00000080 3C07                        cmp al, 7
   105 00000082 740D                        je validar_movimiento_soldado_horizontal_fila_siete_seis
   106 00000084 3C06                        cmp al, 6
   107 00000086 7409                        je validar_movimiento_soldado_horizontal_fila_siete_seis
   108 00000088 3C05                        cmp al, 5
   109 0000008A 7451                        je validar_movimiento_soldado_horizontal_fila_cinco
   110                                  
   111 0000008C E932070000                  jmp movimiento_soldado_invalido
   112                                  
   113                                  ;fn terminada
   114                                  validar_movimiento_soldado_horizontal_fila_siete_seis:
   115 00000091 BA00000000                  mov rdx,0
   116 00000096 8A1425[35000000]            mov dl, [posy_ini]
   117 0000009D 8A3425[37000000]            mov dh, [posy_fin]
   118                                  
   119 000000A4 80FA03                      cmp dl, 3
   120 000000A7 740F                        je validar_movimiento_soldado_horizontal_columna_tres_cinco
   121 000000A9 80FA04                      cmp dl, 4
   122 000000AC 7418                        je validar_movimiento_soldado_horizontal_columna_cuatro
   123 000000AE 80FA05                      cmp dl, 5
   124 000000B1 7405                        je validar_movimiento_soldado_horizontal_columna_tres_cinco
   125 000000B3 E90B070000                  jmp movimiento_soldado_invalido
   126                                  
   127                                  validar_movimiento_soldado_horizontal_columna_tres_cinco:
   128 000000B8 80FE04                      cmp dh, 4
   129 000000BB 0F8427070000                je movimiento_soldado_valido
   130 000000C1 E9FD060000                  jmp movimiento_soldado_invalido
   131                                  
   132                                  validar_movimiento_soldado_horizontal_columna_cuatro:
   133 000000C6 80FE03                      cmp dh, 3
   134 000000C9 0F8419070000                je movimiento_soldado_valido
   135 000000CF 80FE05                      cmp dh, 5
   136 000000D2 0F8410070000                je movimiento_soldado_valido
   137 000000D8 E9E6060000                  jmp movimiento_soldado_invalido
   138                                  
   139                                  validar_movimiento_soldado_horizontal_fila_cinco:
   140 000000DD BA00000000                  mov rdx,0
   141 000000E2 8A1425[35000000]            mov dl, [posy_ini]
   142 000000E9 8A3425[37000000]            mov dh, [posy_fin]
   143                                      
   144 000000F0 80FA03                      cmp dl, 3
   145 000000F3 7E0F                        jle movimiento_soldado_derecha
   146 000000F5 80FA04                      cmp dl, 4
   147 000000F8 742A                        je movimiento_soldado_derecha_izquierda
   148 000000FA 80FA07                      cmp dl, 7
   149 000000FD 7E15                        jle movimiento_soldado_izquierda
   150 000000FF E9BF060000                  jmp movimiento_soldado_invalido
   151                                  
   152                                  movimiento_soldado_derecha:
   153 00000104 28D6                        sub dh,dl
   154 00000106 80FE01                      cmp dh, 1
   155 00000109 0F84D9060000                je movimiento_soldado_valido
   156 0000010F E9AF060000                  jmp movimiento_soldado_invalido
   157                                  
   158                                  movimiento_soldado_izquierda:
   159 00000114 28D6                        sub dh,dl
   160 00000116 80FEFF                      cmp dh,-1
   161 00000119 0F84C9060000                je movimiento_soldado_valido
   162 0000011F E99F060000                  jmp movimiento_soldado_invalido
   163                                  
   164                                  movimiento_soldado_derecha_izquierda:
   165 00000124 28D6                        sub dh,dl
   166 00000126 80FEFF                      cmp dh,-1
   167 00000129 0F84B9060000                je movimiento_soldado_valido
   168 0000012F 80FE01                      cmp dh, 1
   169 00000132 0F84B0060000                je movimiento_soldado_valido
   170 00000138 E986060000                  jmp movimiento_soldado_invalido
   171                                  
   172                                  ;;fin validar movimientos horizontales
   173                                  validar_movimiento_soldado_arriba:
   174 0000013D B800000000                  mov rax,0
   175 00000142 8A0425[34000000]            mov al, [posx_ini]
   176                                      
   177 00000149 3C06                        cmp al, 6
   178 0000014B 7409                        je validar_movimiento_soldado_arriba_en_fortaleza
   179 0000014D 3C07                        cmp al, 7
   180 0000014F 7405                        je validar_movimiento_soldado_arriba_en_fortaleza
   181 00000151 E96D060000                  jmp movimiento_soldado_invalido
   182                                  
   183                                  validar_movimiento_soldado_arriba_en_fortaleza:
   184 00000156 BA00000000                  mov rdx,0
   185 0000015B 8A1425[35000000]            mov dl, [posy_ini]
   186 00000162 8A3425[37000000]            mov dh, [posy_fin]
   187                                  
   188 00000169 80FA03                      cmp dl, 3
   189 0000016C 740F                        je validar_movimiento_soldado_arriba_en_fortaleza_columna_tres
   190 0000016E 80FA04                      cmp dl, 4
   191 00000171 7421                        je validar_movimiento_soldado_arriba_en_fortaleza_columna_cuatro
   192 00000173 80FA05                      cmp dl, 5
   193 00000176 743C                        je validar_movimiento_soldado_arriba_en_fortaleza_columna_cinco
   194 00000178 E946060000                  jmp movimiento_soldado_invalido
   195                                  
   196                                  validar_movimiento_soldado_arriba_en_fortaleza_columna_tres:
   197 0000017D 80FE03                      cmp dh, 3
   198 00000180 0F8407060000                je movimiento_oficial_ok
   199 00000186 80FE04                      cmp dh, 4
   200 00000189 0F84FE050000                je movimiento_oficial_ok
   201 0000018F E92F060000                  jmp movimiento_soldado_invalido
   202                                  
   203                                  validar_movimiento_soldado_arriba_en_fortaleza_columna_cuatro:
   204 00000194 80FE03                      cmp dh, 3
   205 00000197 0F84F0050000                je movimiento_oficial_ok
   206 0000019D 80FE04                      cmp dh, 4
   207 000001A0 0F84E7050000                je movimiento_oficial_ok
   208 000001A6 80FE05                      cmp dh, 5
   209 000001A9 0F84DE050000                je movimiento_oficial_ok
   210 000001AF E90F060000                  jmp movimiento_soldado_invalido
   211                                  
   212                                  validar_movimiento_soldado_arriba_en_fortaleza_columna_cinco:
   213 000001B4 80FE04                      cmp dh, 4
   214 000001B7 0F84D0050000                je movimiento_oficial_ok
   215 000001BD 80FE05                      cmp dh, 5
   216 000001C0 0F84C7050000                je movimiento_oficial_ok
   217 000001C6 E9F8050000                  jmp movimiento_soldado_invalido
   218                                  
   219                                  validar_movimiento_soldado_abajo:
   220 000001CB BA00000000                  mov rdx,0
   221 000001D0 8A1425[35000000]            mov dl, [posy_ini]
   222 000001D7 8A3425[37000000]            mov dh, [posy_fin]
   223                                      
   224 000001DE 28D6                        sub dh, dl
   225 000001E0 80FEFF                      cmp dh,-1
   226 000001E3 0F84FF050000                je movimiento_soldado_valido
   227 000001E9 80FE00                      cmp dh, 0
   228 000001EC 0F84F6050000                je movimiento_soldado_valido
   229 000001F2 80FE01                      cmp dh, 1
   230 000001F5 0F84ED050000                je movimiento_soldado_valido
   231 000001FB E9C3050000                  jmp movimiento_soldado_invalido
   232                                  
   233                                  ;;fin validar_movimiento_soldado
   234 00000200 EB00                        jmp prox_turno
   235                                      
   236                                  prox_turno:
   237                                      ;call actualizar_turno
   238 00000202 E89E000000                  call actualizar_tablero
   239 00000207 E8E1050000                  call eliminar_oficial_desentendido
   240 0000020C E8DD050000                  call verificar_ganador
   241 00000211 E9FCFDFFFF                  jmp ciclo_juego      ; Repite el bucle
   242                                          
   243                                      fin:
   244                                  ;    add rsp, 8             ; Restaura el espacio de la pila
   245                                      ;call clear_screen
   246                                  
   247 00000216 48BF-                       mov rdi, endGame
   247 00000218 [A201000000000000] 
   248 00000220 4883EC08                    sub rsp, 8
   249 00000224 E8(00000000)                call printf
   250 00000229 4883C408                    add rsp,8
   251                                  
   252 0000022D B44C                        mov ah, 4Ch    ; C√≥digo de funci√≥n para terminar el programa;    mov al, 0      ; C√≥digo de retorno (0 indica √©xito)
   253 0000022F B000                        mov al, 0      ; C√≥digo de retorno (0 indica √©xito)
   254 00000231 CD21                        int 21h        ; Llamada a la interrupci√≥n 21h
   255                                  
   256 00000233 C3                          ret
   257                                  
   258                                  mostrar_tablero:
   259 00000234 B800000000                  mov rax, 0
   260 00000239 48890425[2F000000]          mov [posicion], rax 
   261 00000241 B908000000                  mov rcx, cantidadColumnas
   262 00000246 4883EC08                    sub rsp, 8
   263                                      fila_loop:
   264 0000024A 51                              push rcx ;es necesario para loop, sino el registro rcx se pisa y loopea infinito
   265                                          ; Carga la direcci√≥n de la fila actual en la matriz
   266                                  
   267                                          ; Imprime la fila actual
   268                                  
   269 0000024B 48BF-                           mov rdi, matriz         ; Pasa la direcci√≥n de la fila a printf
   269 0000024D [B401000000000000] 
   270 00000255 48033C25[2F000000]              add rdi, [posicion]
   271 0000025D 4829C0                          sub rax, rax           ; Limpia rax para printf
   272                                          
   273                                          
   274 00000260 E8(00000000)                    call printf
   275                                          ; Imprime salto de l√≠nea despu√©s de cada fila
   276 00000265 48BF-                           mov rdi, saltoLinea
   276 00000267 [2D00000000000000] 
   277 0000026F 4831C0                          xor rax, rax           ; Limpia rax para printf
   278 00000272 E8(00000000)                    call printf
   279 00000277 59                              pop rcx ;es necesario para loop, sino el registro rcx se pisa y loopea infinito
   280                                          
   281                                          ; Sumar 10 a "posicion"
   282 00000278 488B0425[2F000000]              mov rax, [posicion]         ; Carga el valor de "posicion" en rax
   283 00000280 4883C009                        add rax, cantidadFilas                 ; Suma 10 a rax
   284 00000284 48890425[2F000000]              mov [posicion], rax         ; Guarda el nuevo valor en "posicion"
   285                                          
   286 0000028C E2BC                            loop fila_loop
   287                                          
   288 0000028E 48BF-                           mov rdi, saltoLinea
   288 00000290 [2D00000000000000] 
   289 00000298 4831C0                          xor rax, rax           ; Limpia rax para printf
   290 0000029B E8(00000000)                    call printf
   291 000002A0 4883C408                        add rsp, 8
   292 000002A4 C3                              ret
   293                                  
   294                                  actualizar_tablero:
   295                                      ;Posicionamiento en el elemento i,j de una matriz
   296                                      ;(i-1)*longitudFila + (j-1)*longitudElemento
   297                                      ;longitdFila= longitudElemento*cantidadColumnas
   298 000002A5 4829C9                      sub rcx, rcx
   299 000002A8 4829C0                      sub rax, rax
   300 000002AB 4829DB                      sub rbx, rbx
   301 000002AE 4D29D2                      sub r10, r10
   302 000002B1 8A0425[34000000]            mov al,[posx_ini] ;guardo el valor de la fila, en AL(8bits) 
   303                                                      ;ya que posx es db (byte= 8bits) sino guarda cualquier cosa
   304                                  ;    sub rax,1 -> no es necesaria la resta ya que la matriz empieza en 1,1
   305 000002B8 41B809000000                mov r8, cantidadFilas
   306 000002BE 49F7E8                      imul r8   ;me desplazo en la fila
   307 000002C1 4801C1                      add rcx,rax
   308                                      
   309 000002C4 8A0425[35000000]            mov al,[posy_ini] ;guardo el valor de la col,
   310                                  ;    sub rax,1
   311 000002CB 41B801000000                mov r8, longitudElemento ;guardo en r8 para darle longitud y poder multiplicar usando imul
   312 000002D1 49F7E8                      imul r8 ;me desplazo en la columna
   313 000002D4 4801C1                      add rcx,rax ;sumo los desplazamientos
   314                                      
   315                                      
   316 000002D7 48BB-                       mov rbx,matriz ;pongo el pto al inicio de la matriz
   316 000002D9 [B401000000000000] 
   317 000002E1 4801CB                      add rbx,rcx ;me posicione en la matriz
   318                                  
   319 000002E4 4C8B13                      mov r10, [rbx] ;guardo un elemento
   320 000002E7 4C8B4B01                    mov r9, [rbx+1] ;guardo en r9 lo que le sigue de matriz posterior al elemento a actualizar
   321 000002EB 41B820000000                mov r8, " " ; lo muevo a un reg para darle (y estar seguro de su) longitud
   322 000002F1 4C8903                      mov [rbx],r8 ;muevo el valor(de igual longitud). muevo a la posicion de la matriz a actualizar
   323                                      
   324                                      ;despues de agregar el nuevo valor, agregarle el resto de la matriz que estaba antes.
   325 000002F4 4C894B01                    mov [rbx+1],r9
   326                                      
   327                                      
   328                                      ;;repito con casillero_destino
   329                                      ;;y guardo en el destino lo que guarde en r10 (el elemento origen)
   330                                      
   331                                      
   332                                      ;Posicionamiento en el elemento i,j de una matriz
   333                                      ;(i-1)*longitudFila + (j-1)*longitudElemento
   334                                      ;longitdFila= longitudElemento*cantidadColumnas
   335 000002F8 4829C9                      sub rcx, rcx
   336 000002FB 8A0425[36000000]            mov al,[posx_fin] ;guardo el valor de la fila, en AL(8bits) 
   337                                                      ;ya que posx es db (byte= 8bits) sino guarda cualquier cosa
   338                                  ;    sub rax,1 -> no es necesaria la resta ya que la matriz empieza en 1,1
   339 00000302 41B809000000                mov r8, cantidadFilas
   340 00000308 49F7E8                      imul r8   ;me desplazo en la fila
   341 0000030B 4801C1                      add rcx,rax
   342                                      
   343 0000030E 8A0425[37000000]            mov al,[posy_fin] ;guardo el valor de la col,
   344                                  ;    sub rax,1
   345 00000315 41B801000000                mov r8, longitudElemento ;guardo en r8 para darle longitud y poder multiplicar usando imul
   346 0000031B 49F7E8                      imul r8 ;me desplazo en la columna
   347 0000031E 4801C1                      add rcx,rax ;sumo los desplazamientos
   348                                      
   349                                      
   350 00000321 48BB-                       mov rbx,matriz ;pongo el pto al inicio de la matriz
   350 00000323 [B401000000000000] 
   351 0000032B 4801CB                      add rbx,rcx ;me posicione en la matriz
   352                                  
   353 0000032E 4C8B4B01                    mov r9, [rbx+1] ;guardo en r9 lo que le sigue de matriz posterior al elemento a actualizar
   354 00000332 4D89D0                      mov r8, r10 ; lo muevo a un reg para darle (y estar seguro de su) longitud
   355 00000335 4C8903                      mov [rbx],r8 ;muevo el valor(de igual longitud). muevo a la posicion de la matriz a actualizar
   356                                      
   357                                      ;despues de agregar el nuevo valor, agregarle el resto de la matriz que estaba antes.
   358 00000338 4C894B01                    mov [rbx+1],r9
   359                                  
   360 0000033C C3                          ret
   361                                  
   362                                  clear_screen:
   363                                  
   364 0000033D 48BF-                       mov rdi, cmd_clear
   364 0000033F [4100000000000000] 
   365 00000347 4883EC08                    sub rsp, 8
   366 0000034B E8(00000000)                call system
   367 00000350 4883C408                    add rsp, 8
   368 00000354 C3                          ret
   369                                      
   370                                  pedir_casillero_origen:
   371                                      
   372 00000355 4889E0                      mov rax, rsp
   373 00000358 4883E00F                    and rax, 15
   374 0000035C 7404                        je no_restar_rsp_1
   375 0000035E 4883EC08                    sub rsp, 8
   376                                  no_restar_rsp_1:
   377 00000362 48BF-                       mov rdi, msjIngFilaColumnaOrigen
   377 00000364 [0000000000000000] 
   378 0000036C E8(00000000)                call printf
   379                                  
   380 00000371 48BF-                       mov rdi, cadena      ; Direcci√≥n de 'cadena'
   380 00000373 [0A00000000000000] 
   381 0000037B E8(00000000)                call gets
   382 00000380 4883C408                    add rsp, 8
   383                                  
   384                                      ; Extraer el primer car√°cter (primer n√∫mero)
   385 00000384 480FB60425-                 movzx rax, byte [cadena]     ; Cargar el primer car√°cter de 'cadena' en rax
   385 00000389 [0A000000]         
   386 0000038D 4883E830                    sub rax, '0'                 ; Convertir de ASCII a valor num√©rico
   387 00000391 880425[34000000]            mov [posx_ini], al            ; Guardar el valor en 'posx_ini'
   388                                      
   389 00000398 803C25[34000000]00          cmp byte [posx_ini], 0
   390 000003A0 0F8470FEFFFF                je fin               ; Si es 0, salta a "fin de juego"
   391                                      
   392                                      ; Extraer el segundo car√°cter (segundo n√∫mero)
   393 000003A6 480FB60425-                 movzx rax, byte [cadena + 1] ; Cargar el segundo car√°cter de 'cadena' en rax
   393 000003AB [0B000000]         
   394 000003AF 4883E830                    sub rax, '0'                 ; Convertir de ASCII a valor num√©rico
   395 000003B3 880425[35000000]            mov [posy_ini], al            ; Guardar el valor en 'posy_ini'
   396                                      
   397 000003BA E9EA000000                  jmp validar_casillero_origen
   398                                      
   399                                  pedir_casillero_destino:
   400 000003BF 4883EC08                    sub rsp, 8
   401 000003C3 48BF-                       mov rdi, msjIngFilaColumnaDestino
   401 000003C5 [1600000000000000] 
   402 000003CD E8(00000000)                call printf
   403 000003D2 4883C408                    add rsp, 8
   404                                  
   405 000003D6 48BF-                       mov rdi, cadena      ; Direcci√≥n de 'cadena'
   405 000003D8 [0A00000000000000] 
   406 000003E0 4883EC08                    sub rsp, 8
   407 000003E4 E8(00000000)                call gets
   408 000003E9 4883C408                    add rsp, 8
   409                                  
   410                                      ; Extraer el primer car√°cter (primer n√∫mero)
   411 000003ED 480FB60425-                 movzx rax, byte [cadena]     ; Cargar el primer car√°cter de 'cadena' en rax
   411 000003F2 [0A000000]         
   412 000003F6 4883E830                    sub rax, '0'                 ; Convertir de ASCII a valor num√©rico
   413 000003FA 880425[36000000]            mov [posx_fin], al            ; Guardar el valor en 'posx_ini'
   414                                      
   415                                      ; Extraer el segundo car√°cter (segundo n√∫mero)
   416 00000401 480FB60425-                 movzx rax, byte [cadena + 1] ; Cargar el segundo car√°cter de 'cadena' en rax
   416 00000406 [0B000000]         
   417 0000040A 4883E830                    sub rax, '0'                 ; Convertir de ASCII a valor num√©rico
   418 0000040E 880425[37000000]            mov [posy_fin], al            ; Guardar el valor en 'posy_ini'
   419 00000415 E9B2010000                  jmp es_destino_valido
   420 0000041A C3                          ret
   421                                      
   422                                  mostrar_jugador_actual:    
   423 0000041B 4883EC08                    sub rsp, 8
   424 0000041F 48BF-                       mov rdi, esTurnoDe
   424 00000421 [4700000000000000] 
   425 00000429 488B3425[6F000000]          mov rsi, [jugadorActual]
   426                                   
   427 00000431 E8(00000000)                call printf
   428 00000436 4883C408                    add rsp, 8
   429 0000043A C3                          ret
   430                                      
   431                                  actualizar_turno:
   432 0000043B 8A0425[B2010000]            mov al, [turno]
   433 00000442 800425[B2010000]01          add byte [turno], 1
   434 0000044A 8A0425[B2010000]            mov al, [turno]
   435 00000451 30E4                        xor ah, ah        ; Limpiar AH para asegurar que AX est√° correcto
   436                                  
   437                                      ; Dividir AX entre el divisor (2)
   438 00000453 4831DB                      xor rbx, rbx        
   439 00000456 8A1C25[B3010000]            mov bl, [divisor]
   440 0000045D F6F3                        div bl            ; AX / BL -> AL = cociente, AH = resto
   441                                  
   442                                      ; Ahora, AH contiene el resto (turno % 2)
   443 0000045F 80FC00                      cmp ah, 0         ; Compara el resto con 0
   444 00000462 7402                        je es_par         ; Si el resto es 0, turno es par
   445 00000464 EB19                        jmp es_impar      ; Si no, turno es impar
   446                                  
   447                                  es_par:          
   448 00000466 C60425[B2010000]00          mov byte[turno], 0
   449 0000046E 488D0425[5C000000]          lea rax, [oficiales]          ; Cargar la direcci√≥n de 'soldados' en AX
   450 00000476 48890425[6F000000]          mov [jugadorActual], rax
   451 0000047E C3                          ret
   452                                  
   453                                  es_impar:        
   454 0000047F C60425[B2010000]01          mov byte[turno], 1
   455 00000487 488D0425[66000000]          lea rax, [soldados]          ; Cargar la direcci√≥n de 'soldados' en AX
   456 0000048F 48890425[6F000000]          mov [jugadorActual], rax
   457 00000497 C3                          ret
   458                                      
   459                                  asignar_jugador_inicial:
   460 00000498 488D0425[66000000]          lea rax, [soldados]          ; Cargar la direcci√≥n de 'soldados' en AX
   461 000004A0 48890425[6F000000]          mov [jugadorActual], rax
   462 000004A8 C3                          ret
   463                                      
   464                                  validar_casillero_origen:
   465                                      ;;valido que este dentro del tablero
   466 000004A9 4829C0                      sub rax, rax
   467 000004AC 4829DB                      sub rbx, rbx
   468 000004AF 8A0425[34000000]            mov al,[posx_ini]
   469 000004B6 8A1C25[35000000]            mov bl,[posy_ini]
   470                                      
   471                                      validar_dentro_x:
   472 000004BD 3C01                        cmp al, 1
   473 000004BF 740E                        je validar_dentro_y
   474 000004C1 3C02                        cmp al, 2
   475 000004C3 740A                        je validar_dentro_y
   476 000004C5 3C06                        cmp al, 6
   477 000004C7 7406                        je validar_dentro_y
   478 000004C9 3C07                        cmp al, 7
   479 000004CB 7402                        je validar_dentro_y
   480 000004CD EB16                        jmp dentro_tablero_origen_ok
   481                                  validar_dentro_y:
   482 000004CF 80FB01                      cmp bl, 1
   483 000004D2 7476                        je origen_invalido
   484 000004D4 80FB02                      cmp bl, 2
   485 000004D7 7471                        je origen_invalido
   486 000004D9 80FB06                      cmp bl, 6
   487 000004DC 746C                        je origen_invalido
   488 000004DE 80FB07                      cmp bl, 7
   489 000004E1 7467                        je origen_invalido
   490 000004E3 EB00                        jmp dentro_tablero_origen_ok
   491                                      
   492                                  dentro_tablero_origen_ok:
   493 000004E5 8A0425[B2010000]            mov al, [turno]
   494 000004EC 30E4                        xor ah, ah        ; Limpiar AH para asegurar que AX est√° correcto
   495                                  
   496                                      ; Dividir AX entre el divisor (2)
   497 000004EE 4831DB                      xor rbx, rbx        
   498 000004F1 8A1C25[B3010000]            mov bl, [divisor]
   499 000004F8 F6F3                        div bl            ; AX / BL -> AL = cociente, AH = resto
   500                                  
   501                                      ; Ahora, AH contiene el resto (turno % 2)
   502 000004FA 80FC00                      cmp ah, 0         ; Compara el resto con 0
   503 000004FD 7468                        je es_oficial_valido         ; Si el resto es 0, turno es par
   504 000004FF EB01                        jmp es_soldado_valido ; Si no, turno es impar
   505 00000501 C3                          ret
   506                                      
   507                                  es_soldado_valido:
   508                                  ;busco el elemento en la matriz; y lo guardo en r10 para comparar el elemento.
   509 00000502 4829C9                      sub rcx, rcx
   510 00000505 4829C0                      sub rax, rax
   511 00000508 4829DB                      sub rbx, rbx
   512 0000050B 4D29D2                      sub r10, r10
   513 0000050E 8A0425[34000000]            mov al,[posx_ini] 
   514 00000515 41B809000000                mov r8, cantidadFilas
   515 0000051B 49F7E8                      imul r8
   516 0000051E 4801C1                      add rcx,rax
   517                                      
   518 00000521 8A0425[35000000]            mov al,[posy_ini]
   519 00000528 41B801000000                mov r8, longitudElemento 
   520 0000052E 49F7E8                      imul r8
   521 00000531 4801C1                      add rcx,rax
   522                                      
   523 00000534 48BB-                       mov rbx,matriz 
   523 00000536 [B401000000000000] 
   524 0000053E 4801CB                      add rbx,rcx ;me posicione en la matriz
   525                                  
   526 00000541 4C8B13                      mov r10, [rbx] ;guardo un elemento
   527 00000544 4180FA58                    cmp r10b, 'X'
   528 00000548 741C                        je turno_soldado_ok
   529                                      ;sino fue un mal ingreso:
   530                                  origen_invalido:
   531 0000054A 48BF-                       mov rdi, casilleroInvalido
   531 0000054C [7800000000000000] 
   532 00000554 4883EC08                    sub rsp, 8
   533 00000558 E8(00000000)                call printf
   534 0000055D 4883C408                    add rsp, 8
   535 00000561 E9EFFDFFFF                  jmp pedir_casillero_origen
   536                                  turno_soldado_ok:
   537 00000566 C3                          ret
   538                                      
   539                                  es_oficial_valido:
   540                                  ;busco el elemento en la matriz; y lo guardo en r10 para comparar el elemento.
   541 00000567 4829C9                      sub rcx, rcx
   542 0000056A 4829C0                      sub rax, rax
   543 0000056D 4829DB                      sub rbx, rbx
   544 00000570 4D29D2                      sub r10, r10
   545 00000573 8A0425[34000000]            mov al,[posx_ini] 
   546 0000057A 41B809000000                mov r8, cantidadFilas
   547 00000580 49F7E8                      imul r8
   548 00000583 4801C1                      add rcx,rax
   549                                      
   550 00000586 8A0425[35000000]            mov al,[posy_ini]
   551 0000058D 41B801000000                mov r8, longitudElemento 
   552 00000593 49F7E8                      imul r8
   553 00000596 4801C1                      add rcx,rax
   554                                      
   555 00000599 48BB-                       mov rbx,matriz 
   555 0000059B [B401000000000000] 
   556 000005A3 4801CB                      add rbx,rcx ;me posicione en la matriz
   557                                  
   558 000005A6 4C8B13                      mov r10, [rbx] ;guardo un elemento
   559                                  ;;
   560 000005A9 4180FA4F                    cmp r10b, 'O'
   561 000005AD 741C                        je turno_oficial_ok
   562                                      ;sino fue un mal ingreso:
   563 000005AF 48BF-                       mov rdi, casilleroInvalido
   563 000005B1 [7800000000000000] 
   564 000005B9 4883EC08                    sub rsp, 8
   565 000005BD E8(00000000)                call printf
   566 000005C2 4883C408                    add rsp, 8
   567 000005C6 E98AFDFFFF                  jmp pedir_casillero_origen
   568                                      turno_oficial_ok:
   569 000005CB C3                          ret    
   570                                      
   571                                      
   572                                  es_destino_valido:
   573                                      ;;valido que este dentro del tablero
   574 000005CC 4829C0                      sub rax, rax
   575 000005CF 4829DB                      sub rbx, rbx
   576 000005D2 8A0425[36000000]            mov al,[posx_fin]
   577 000005D9 8A1C25[37000000]            mov bl,[posy_fin]
   578                                      
   579                                  validar_dentro_x_fin:
   580 000005E0 3C01                        cmp al, 1
   581 000005E2 740E                        je validar_dentro_y_fin
   582 000005E4 3C02                        cmp al, 2
   583 000005E6 740A                        je validar_dentro_y_fin
   584 000005E8 3C06                        cmp al, 6
   585 000005EA 7406                        je validar_dentro_y_fin
   586 000005EC 3C07                        cmp al, 7
   587 000005EE 7402                        je validar_dentro_y_fin
   588 000005F0 EB16                        jmp dentro_tablero_destino_ok
   589                                  validar_dentro_y_fin:
   590 000005F2 80FB01                      cmp bl, 1
   591 000005F5 7459                        je destino_invalido
   592 000005F7 80FB02                      cmp bl, 2
   593 000005FA 7454                        je destino_invalido
   594 000005FC 80FB06                      cmp bl, 6
   595 000005FF 744F                        je destino_invalido
   596 00000601 80FB07                      cmp bl, 7
   597 00000604 744A                        je destino_invalido
   598 00000606 EB00                        jmp dentro_tablero_destino_ok
   599                                      
   600                                  dentro_tablero_destino_ok:
   601                                  ;busco el elemento en la matriz; y lo guardo en r10 para comparar el elemento.
   602 00000608 4829C9                      sub rcx, rcx
   603 0000060B 4829C0                      sub rax, rax
   604 0000060E 4829DB                      sub rbx, rbx
   605 00000611 4D29D2                      sub r10, r10
   606 00000614 8A0425[36000000]            mov al,[posx_fin] 
   607 0000061B 41B809000000                mov r8, cantidadFilas
   608 00000621 49F7E8                      imul r8
   609 00000624 4801C1                      add rcx,rax
   610                                      
   611 00000627 8A0425[37000000]            mov al,[posy_fin]
   612 0000062E 41B801000000                mov r8, longitudElemento 
   613 00000634 49F7E8                      imul r8
   614 00000637 4801C1                      add rcx,rax
   615                                      
   616 0000063A 48BB-                       mov rbx,matriz 
   616 0000063C [B401000000000000] 
   617 00000644 4801CB                      add rbx,rcx ;me posicione en la matriz
   618                                  
   619 00000647 4C8B13                      mov r10, [rbx] ;guardo un elemento
   620                                  ;;
   621 0000064A 4180FA20                    cmp r10b, ' '
   622 0000064E 741C                        je destino_ok
   623                                      ;sino fue un mal ingreso:
   624                                  destino_invalido:
   625 00000650 48BF-                       mov rdi, casilleroInvalido
   625 00000652 [7800000000000000] 
   626 0000065A 4883EC08                    sub rsp, 8
   627 0000065E E8(00000000)                call printf
   628 00000663 4883C408                    add rsp, 8
   629 00000667 E953FDFFFF                  jmp pedir_casillero_destino
   630                                  destino_ok:
   631 0000066C C3                          ret    
   632                                  validar_movimiento_oficial:
   633                                  ;;falta resolver esto -> solo de a 1 en cualqeuir dir.
   634 0000066D 41BC00000000                mov r12,0
   635 00000673 B800000000                  mov rax,0
   636 00000678 8A0425[34000000]            mov al, [posx_ini]
   637 0000067F 8A2425[36000000]            mov ah, [posx_fin]
   638 00000686 28E0                        sub al,ah
   639                                  
   640 00000688 BA00000000                  mov rdx,0
   641 0000068D 8A1425[35000000]            mov dl, [posy_ini]
   642 00000694 8A3425[37000000]            mov dh, [posy_fin]
   643 0000069B 28F2                        sub dl,dh
   644                                  
   645 0000069D 3C00                        cmp al, 0
   646 0000069F 7410                        je validar_movimientos_oficial_horizontal ;;listo
   647 000006A1 3C01                        cmp al, 1
   648 000006A3 7428                        je validar_movimiento_simple_oficial_arriba_abajo ;;listo
   649 000006A5 3CFF                        cmp al,-1
   650 000006A7 7424                        je validar_movimiento_simple_oficial_arriba_abajo ;;listo
   651                                      
   652 000006A9 3C02                        cmp al, 2
   653 000006AB 7440                        je validar_movimiento_doble_oficial_superiores ;;voy a validar esto
   654 000006AD 3CFE                        cmp al,-2
   655 000006AF 7450                        je validar_movimiento_doble_oficial_inferiores ;;falta validar
   656                                      
   657                                  ;;esto valida OK movimientos simples y dobles horizontales (falta validar dobles horizontales)
   658                                  validar_movimientos_oficial_horizontal:
   659                                      ;;movimiento simple
   660 000006B1 80FA01                      cmp dl, 1
   661 000006B4 0F84D3000000                je movimiento_oficial_ok
   662 000006BA 80FAFF                      cmp dl,-1
   663 000006BD 0F84CA000000                je movimiento_oficial_ok
   664                                      ;;movimiento doble (comio)
   665 000006C3 80FA02                      cmp dl, 2
   666 000006C6 744D                        je validar_movimiento_doble_izquierda ;; aca falta validar que haya X en el medio
   667 000006C8 80FAFE                      cmp dl,-2
   668 000006CB 744C                        je validar_movimiento_doble_derecha ;; aca falta validar que haya X en el medio
   669                                  ;funcion ready (no necesita nada mas)
   670                                  validar_movimiento_simple_oficial_arriba_abajo:
   671                                      ;;si se movio 1 en x, solo puede ser movimiento simple
   672 000006CD 80FA01                      cmp dl, 1
   673 000006D0 0F84B7000000                je movimiento_oficial_ok
   674 000006D6 80FAFF                      cmp dl,-1
   675 000006D9 0F84AE000000                je movimiento_oficial_ok
   676 000006DF 80FA00                      cmp dl, 0
   677 000006E2 0F84A5000000                je movimiento_oficial_ok
   678 000006E8 E9B8000000                  jmp movimiento_oficial_invalido
   679                                  
   680                                  ;;movimientos dobles!
   681                                  validar_movimiento_doble_oficial_superiores:
   682 000006ED 80FA02                      cmp dl, 2
   683 000006F0 742B                        je validar_movimiento_doble_izquierda_superior
   684 000006F2 80FAFE                      cmp dl,-2
   685 000006F5 7430                        je validar_movimiento_doble_derecha_superior
   686 000006F7 80FA00                      cmp dl, 0
   687 000006FA 7427                        je validar_movimiento_doble_superior
   688 000006FC E9A4000000                  jmp movimiento_oficial_invalido
   689                                  
   690                                  validar_movimiento_doble_oficial_inferiores:
   691 00000701 80FA02                      cmp dl, 2
   692 00000704 7427                        je validar_movimiento_doble_izquierda_inferior
   693 00000706 80FAFE                      cmp dl,-2
   694 00000709 742C                        je validar_movimiento_doble_derecha_inferior
   695 0000070B 80FA00                      cmp dl, 0
   696 0000070E 7423                        je validar_movimiento_doble_inferior
   697 00000710 E990000000                  jmp movimiento_oficial_invalido
   698                                      
   699                                  ;;tengo que validar que haya una X en los movimientos dobles
   700                                  ;;voy a setear una posicion posx - posy para buscar elemento en la matriz
   701                                  ;;si hay una X efectivamente habia un soldado -> eliminar soldado -> movimiento ok!
   702                                  ;;else invalido.
   703                                  
   704                                  ;;hasta este momento en ah y dh estan los valores x y destino respectivamente
   705                                  validar_movimiento_doble_izquierda:
   706 00000715 FEC6                        inc dh
   707 00000717 EB24                        jmp validar_habia_soldado_en_movimiento_doble
   708                                  validar_movimiento_doble_derecha:
   709 00000719 FECE                        dec dh
   710 0000071B EB20                        jmp validar_habia_soldado_en_movimiento_doble
   711                                  validar_movimiento_doble_izquierda_superior:
   712 0000071D FEC6                        inc dh
   713 0000071F FEC4                        inc ah
   714 00000721 EB1A                        jmp validar_habia_soldado_en_movimiento_doble
   715                                  validar_movimiento_doble_superior:
   716 00000723 FEC4                        inc ah
   717 00000725 EB16                        jmp validar_habia_soldado_en_movimiento_doble
   718                                  validar_movimiento_doble_derecha_superior:
   719 00000727 FECE                        dec dh
   720 00000729 FEC4                        inc ah
   721 0000072B EB10                        jmp validar_habia_soldado_en_movimiento_doble
   722                                  validar_movimiento_doble_izquierda_inferior:
   723 0000072D FEC6                        inc dh
   724 0000072F FECC                        dec ah
   725 00000731 EB0A                        jmp validar_habia_soldado_en_movimiento_doble
   726                                  validar_movimiento_doble_inferior:
   727 00000733 FECC                        dec ah
   728 00000735 EB06                        jmp validar_habia_soldado_en_movimiento_doble
   729                                  validar_movimiento_doble_derecha_inferior:
   730 00000737 FECE                        dec dh
   731 00000739 FECC                        dec ah
   732 0000073B EB00                        jmp validar_habia_soldado_en_movimiento_doble
   733                                  
   734                                  
   735                                  ;;falta estar seguro de lo que hago aca. (validar X e Y..)
   736                                  validar_habia_soldado_en_movimiento_doble:
   737                                      
   738 0000073D 4829DB                      sub rbx, rbx
   739 00000740 88E3                        mov bl, ah      
   740 00000742 4829C0                      sub rax, rax      
   741 00000745 88D8                        mov al, bl
   742                                  
   743 00000747 4829DB                      sub rbx, rbx
   744 0000074A 88F3                        mov bl, dh
   745                                                  
   746 0000074C 4829C9                      sub rcx, rcx
   747 0000074F 4829D2                      sub rdx, rdx
   748 00000752 4D29C0                      sub r8, r8
   749 00000755 4D29D2                      sub r10, r10
   750                                      
   751                                   
   752 00000758 41B809000000                mov r8, cantidadFilas
   753 0000075E 49F7E8                      imul r8
   754 00000761 4801C1                      add rcx,rax
   755                                      
   756 00000764 88D8                        mov al, bl
   757 00000766 41B801000000                mov r8, longitudElemento 
   758 0000076C 49F7E8                      imul r8
   759 0000076F 4801C1                      add rcx,rax
   760                                      
   761 00000772 4829DB                      sub rbx, rbx   
   762 00000775 48BB-                       mov rbx,matriz 
   762 00000777 [B401000000000000] 
   763 0000077F 4801CB                      add rbx,rcx ;me posicione en la matriz
   764                                  
   765 00000782 4C8B13                      mov r10, [rbx] ;guardo un elemento
   766 00000785 4180FA58                    cmp r10b, 'X'
   767 00000789 7402                        je movimiento_oficial_ok
   768 0000078B EB18                        jmp movimiento_oficial_invalido
   769                                  
   770                                  ;;fin;; validaciones terminan en estas 2 funciones.
   771                                  movimiento_oficial_ok:
   772                                      
   773 0000078D 4C8B4B01                    mov r9, [rbx+1] ;guardo en r9 lo que le sigue de matriz posterior al elemento a actualizar
   774 00000791 41B820000000                mov r8, " " ; lo muevo a un reg para darle (y estar seguro de su) longitud
   775 00000797 4C8903                      mov [rbx],r8 ;muevo el valor(de igual longitud). muevo a la posicion de la matriz a actualizar
   776                                      
   777                                      ;despues de agregar el nuevo valor, agregarle el resto de la matriz que estaba antes.
   778 0000079A 4C894B01                    mov [rbx+1],r9
   779                                  
   780 0000079E 41BC00000000                mov r12,0
   781 000007A4 C3                          ret
   782                                  movimiento_oficial_invalido:
   783 000007A5 48BF-                       mov rdi,msj_movimiento_oficial_invalido
   783 000007A7 [8D00000000000000] 
   784 000007AF 4883EC08                    sub rsp, 8
   785 000007B3 E8(00000000)                call printf
   786 000007B8 4883C408                    add rsp,8
   787                                      
   788 000007BC 41BC01000000                mov r12,1
   789 000007C2 C3                          ret
   790                                  
   791                                  movimiento_soldado_invalido:
   792 000007C3 4889E0                      mov rax, rsp
   793 000007C6 4883E00F                    and rax, 15
   794 000007CA 7404                        je no_restar_rsp
   795 000007CC 4883EC08                    sub rsp, 8
   796                                  no_restar_rsp:
   797 000007D0 48BF-                       mov rdi,msj_movimiento_soldado_invalido
   797 000007D2 [BF00000000000000] 
   798 000007DA E8(00000000)                call printf
   799 000007DF 4883C408                    add rsp,8
   800 000007E3 E939F8FFFF                  jmp pedir_movimiento
   801                                  
   802                                  movimiento_soldado_valido:
   803 000007E8 E915FAFFFF                  jmp prox_turno
   804                                  
   805                                  eliminar_oficial_desentendido:
   806                                      ;dec r14
   807 000007ED C3                          ret
   808                                  
   809                                  verificar_ganador:
   810 000007EE 4983FE00                    cmp r14, 0
   811 000007F2 0F8491000000                je ganaron_soldados_por_falta_oficiales
   812                                  verificar_invasion:
   813 000007F8 4829C9                      sub rcx, rcx
   814 000007FB 4829C0                      sub rax, rax
   815 000007FE 4829DB                      sub rbx, rbx
   816 00000801 4D29D2                      sub r10, r10
   817 00000804 B005                        mov al, 5
   818 00000806 41B809000000                mov r8, cantidadFilas
   819 0000080C 49F7E8                      imul r8
   820 0000080F 4801C1                      add rcx,rax
   821                                      
   822 00000812 B003                        mov al, 3
   823 00000814 41B801000000                mov r8, longitudElemento 
   824 0000081A 49F7E8                      imul r8
   825 0000081D 4801C1                      add rcx,rax
   826                                      
   827 00000820 48BB-                       mov rbx,matriz 
   827 00000822 [B401000000000000] 
   828 0000082A 4801CB                      add rbx,rcx ;me posicione en la matriz
   829                                  
   830                                  ;fila_5_fortaleza
   831 0000082D 4C8B13                      mov r10, [rbx] ;guardo un elemento
   832 00000830 4180FA58                    cmp r10b, 'X'
   833 00000834 7552                        jne no_invadieron_la_fortaleza
   834 00000836 4C8B5301                    mov r10, [rbx+1] ;guardo un elemento
   835 0000083A 4180FA58                    cmp r10b, 'X'
   836 0000083E 7548                        jne no_invadieron_la_fortaleza
   837 00000840 4C8B5302                    mov r10, [rbx+2] ;guardo un elemento
   838 00000844 4180FA58                    cmp r10b, 'X'
   839 00000848 753E                        jne no_invadieron_la_fortaleza
   840                                  ;fila_6_fortaleza
   841 0000084A 4C8B5309                    mov r10, [rbx+9] ;guardo un elemento
   842 0000084E 4180FA58                    cmp r10b, 'X'
   843 00000852 7534                        jne no_invadieron_la_fortaleza
   844 00000854 4C8B530A                    mov r10, [rbx+10] ;guardo un elemento
   845 00000858 4180FA58                    cmp r10b, 'X'
   846 0000085C 752A                        jne no_invadieron_la_fortaleza
   847 0000085E 4C8B530B                    mov r10, [rbx+11] ;guardo un elemento
   848 00000862 4180FA58                    cmp r10b, 'X'
   849 00000866 7520                        jne no_invadieron_la_fortaleza
   850                                  ;fila_7_fortaleza
   851 00000868 4C8B5312                    mov r10, [rbx+18] ;guardo un elemento
   852 0000086C 4180FA58                    cmp r10b, 'X'
   853 00000870 7516                        jne no_invadieron_la_fortaleza
   854 00000872 4C8B5313                    mov r10, [rbx+19] ;guardo un elemento
   855 00000876 4180FA58                    cmp r10b, 'X'
   856 0000087A 750C                        jne no_invadieron_la_fortaleza
   857 0000087C 4C8B5314                    mov r10, [rbx+20] ;guardo un elemento
   858 00000880 4180FA58                    cmp r10b, 'X'
   859 00000884 7502                        jne no_invadieron_la_fortaleza
   860                                  
   861 00000886 EB1D                        jmp ganaron_soldados_por_invasion
   862                                      
   863                                  no_invadieron_la_fortaleza:
   864 00000888 C3                          ret
   865                                  
   866                                  ganaron_soldados_por_falta_oficiales:
   867 00000889 48BF-                       mov rdi,msj_ganaron_soldados_por_falta_oficiales
   867 0000088B [F100000000000000] 
   868 00000893 4883EC08                    sub rsp, 8
   869 00000897 E8(00000000)                call printf
   870 0000089C 4883C408                    add rsp,8
   871 000008A0 E971F9FFFF                  jmp fin
   872                                  
   873                                  ganaron_soldados_por_invasion:
   874 000008A5 48BF-                       mov rdi,msj_ganaron_soldados_por_invasion
   874 000008A7 [3F01000000000000] 
   875 000008AF 4883EC08                    sub rsp, 8
   876 000008B3 E8(00000000)                call printf
   877 000008B8 4883C408                    add rsp,8
   878 000008BC E955F9FFFF                  jmp fin
