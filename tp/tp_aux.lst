     1                                  global	main
     2                                  extern 	printf
     3                                  extern  gets
     4                                  
     5                                  extern  system
     6                                  
     7                                  section .data
     8 00000000 496E6772657365204F-         msjIngFilaColumnaOrigen	db	'Ingrese Origen [XY]: ',0
     8 00000009 726967656E205B5859-
     8 00000012 5D3A2000           
     9 00000016 496E67726573652044-         msjIngFilaColumnaDestino	db	'Ingrese Destino [XY]: ',0
     9 0000001F 657374696E6F205B58-
     9 00000028 595D3A2000         
    10                                  
    11 0000002D 0A00                        saltoLinea  db 10, 0     ; Salto de l√≠nea al final de cada fila     
    12 0000002F 00                          posicion    db       0
    13 00000030 256C6900                    format	db	'%li', 0
    14                                  
    15                                      longitudElemento equ	1
    16                                      cantidadColumnas equ 8
    17                                      cantidadFilas    equ	9
    18                                      
    19 00000034 01                          posx_ini db 1
    20 00000035 01                          posy_ini db 1
    21                                      
    22 00000036 01                          posx_fin db 1
    23 00000037 01                          posy_fin db 1
    24                                      
    25 00000038 01                          elemento_inicial db 1
    26                                  
    27 00000039 256C6920256C6900            format2	db	'%li %li', 0
    28 00000041 636C65617200                cmd_clear db "clear",0
    29                                      
    30 00000047 4573207475726E6F20-         esTurnoDe	db	'Es turno de los %s!',10,0
    30 00000050 6465206C6F73202573-
    30 00000059 210A00             
    31 0000005C 6F66696369616C6573-         oficiales   db 'oficiales',0
    31 00000065 00                 
    32 00000066 736F6C6461646F7300          soldados    db 'soldados',0
    33 0000006F 736F6C6461646F7300          jugadorActual db 'soldados',0
    34 00000078 636173696C6C65726F-         casilleroInvalido db 'casillero invalido!',10,0
    34 00000081 20696E76616C69646F-
    34 0000008A 210A00             
    35 0000008D 6D6F76696D69656E74-         msj_movimiento_oficial_invalido db 'movimiento_oficial_invalido! Vuelva a intentarlo',10,0
    35 00000096 6F5F6F66696369616C-
    35 0000009F 5F696E76616C69646F-
    35 000000A8 21205675656C766120-
    35 000000B1 6120696E74656E7461-
    35 000000BA 726C6F0A00         
    36 000000BF 6D6F76696D69656E74-         msj_movimiento_soldado_invalido db 'movimiento_soldado_invalido! Vuelva a intentarlo',10,0
    36 000000C8 6F5F736F6C6461646F-
    36 000000D1 5F696E76616C69646F-
    36 000000DA 21205675656C766120-
    36 000000E3 6120696E74656E7461-
    36 000000EC 726C6F0A00         
    37                                  
    38 000000F1 46696E2064656C206A-         endGame    db 'Fin del juego!',10,0
    38 000000FA 7565676F210A00     
    39 00000101 01                          turno db 1
    40 00000102 02                          divisor db 2 
    41                                      
    42 00000103 203132333435363700          matriz  db ' 1234567',0
    43 0000010C 31207C5858587C2000                  db '1 |XXX| ',0
    44 00000115 325F7C5858587C5F00                  db '2_|XXX|_',0
    45 0000011E 335858585858585800                  db '3XXXXXXX',0
    46 00000127 345858582058585800                  db '4XXX XXX',0
    47 00000130 355858205820585800                  db '5XX X XX',0
    48 00000139 367E7C20204F7C7E00                  db '6~|  O|~',0
    49 00000142 37207C4F20207C2000                  db '7 |O  | ',0
    50                                  
    51                                  section .bss    
    52 00000000 <res Ah>                    buffer		resb	10
    53 0000000A ????                        cadena resb 2
    54 0000000C ??                          numero  resb 1
    55                                  
    56                                  section .text
    57                                  main:
    58 00000000 4889E5                      mov rbp, rsp; for correct debugging  
    59                                  
    60 00000003 4883EC08                    sub rsp, 8
    61 00000007 E886040000                  call asignar_jugador_inicial
    62                                  ciclo_juego:
    63 0000000C E826030000                  call clear_screen
    64 00000011 E818020000                  call mostrar_tablero
    65 00000016 E8FA030000                  call mostrar_jugador_actual
    66                                  pedir_movimiento:
    67 0000001B E82F030000                  call pedir_casillero_origen
    68                                  pedir_movimiento_destino:
    69 00000020 E894030000                  call pedir_casillero_destino
    70                                  
    71 00000025 8A0425[01010000]            mov al, [turno]
    72 0000002C 3C01                        cmp al, 1
    73 0000002E 7410                        je validar_movimiento_soldado
    74 00000030 E832060000                  call validar_movimiento_oficial ;hacer esto solo si es el turno del oficial.
    75 00000035 4983FC00                    cmp r12, 0                  ; Si la validacion esta mal -> r12 != 0 -> volver a pedir origen-destin0
    76 00000039 75E0                        jne pedir_movimiento         ; Si no es 0 -> back to pedir_movimiento
    77 0000003B E9BC010000                  jmp prox_turno
    78                                  
    79                                  validar_movimiento_soldado:
    80 00000040 B800000000                  mov rax,0
    81                                      
    82 00000045 8A0425[36000000]            mov al, [posx_fin]
    83 0000004C 8A2425[34000000]            mov ah, [posx_ini]
    84 00000053 28E0                        sub al, ah
    85                                  
    86 00000055 3C00                        cmp al, 0
    87 00000057 7415                        je validar_movimiento_soldado_horizontal
    88 00000059 3CFF                        cmp al,-1 
    89 0000005B 0F84D6000000                je validar_movimiento_soldado_arriba
    90 00000061 3C01                        cmp al, 1
    91 00000063 0F845C010000                je validar_movimiento_soldado_abajo
    92 00000069 E94F070000                  jmp movimiento_soldado_invalido
    93                                      
    94                                  ;fn terminada
    95                                  validar_movimiento_soldado_horizontal:
    96 0000006E B800000000                  mov rax,0
    97 00000073 8A0425[34000000]            mov al, [posx_ini]
    98                                  
    99 0000007A 3C07                        cmp al, 7
   100 0000007C 740D                        je validar_movimiento_soldado_horizontal_fila_siete_seis
   101 0000007E 3C06                        cmp al, 6
   102 00000080 7409                        je validar_movimiento_soldado_horizontal_fila_siete_seis
   103 00000082 3C05                        cmp al, 5
   104 00000084 7451                        je validar_movimiento_soldado_horizontal_fila_cinco
   105                                  
   106 00000086 E932070000                  jmp movimiento_soldado_invalido
   107                                  
   108                                  ;fn terminada
   109                                  validar_movimiento_soldado_horizontal_fila_siete_seis:
   110 0000008B BA00000000                  mov rdx,0
   111 00000090 8A1425[35000000]            mov dl, [posy_ini]
   112 00000097 8A3425[37000000]            mov dh, [posy_fin]
   113                                  
   114 0000009E 80FA03                      cmp dl, 3
   115 000000A1 740F                        je validar_movimiento_soldado_horizontal_columna_tres_cinco
   116 000000A3 80FA04                      cmp dl, 4
   117 000000A6 7418                        je validar_movimiento_soldado_horizontal_columna_cuatro
   118 000000A8 80FA05                      cmp dl, 5
   119 000000AB 7405                        je validar_movimiento_soldado_horizontal_columna_tres_cinco
   120 000000AD E90B070000                  jmp movimiento_soldado_invalido
   121                                  
   122                                  validar_movimiento_soldado_horizontal_columna_tres_cinco:
   123 000000B2 80FE04                      cmp dh, 4
   124 000000B5 0F8427070000                je movimiento_soldado_valido
   125 000000BB E9FD060000                  jmp movimiento_soldado_invalido
   126                                  
   127                                  validar_movimiento_soldado_horizontal_columna_cuatro:
   128 000000C0 80FE03                      cmp dh, 3
   129 000000C3 0F8419070000                je movimiento_soldado_valido
   130 000000C9 80FE05                      cmp dh, 5
   131 000000CC 0F8410070000                je movimiento_soldado_valido
   132 000000D2 E9E6060000                  jmp movimiento_soldado_invalido
   133                                  
   134                                  validar_movimiento_soldado_horizontal_fila_cinco:
   135 000000D7 BA00000000                  mov rdx,0
   136 000000DC 8A1425[35000000]            mov dl, [posy_ini]
   137 000000E3 8A3425[37000000]            mov dh, [posy_fin]
   138                                      
   139 000000EA 80FA03                      cmp dl, 3
   140 000000ED 7E0F                        jle movimiento_soldado_derecha
   141 000000EF 80FA04                      cmp dl, 4
   142 000000F2 742A                        je movimiento_soldado_derecha_izquierda
   143 000000F4 80FA07                      cmp dl, 7
   144 000000F7 7E05                        jle movimiento_soldado_derecha
   145 000000F9 E9BF060000                  jmp movimiento_soldado_invalido
   146                                  
   147                                  movimiento_soldado_derecha:
   148 000000FE 28D6                        sub dh,dl
   149 00000100 80FE01                      cmp dh, 1
   150 00000103 0F84D9060000                je movimiento_soldado_valido
   151 00000109 E9AF060000                  jmp movimiento_soldado_invalido
   152                                  
   153                                  movimiento_soldado_izquierda:
   154 0000010E 28D6                        sub dh,dl
   155 00000110 80FEFF                      cmp dh,-1
   156 00000113 0F84C9060000                je movimiento_soldado_valido
   157 00000119 E99F060000                  jmp movimiento_soldado_invalido
   158                                  
   159                                  movimiento_soldado_derecha_izquierda:
   160 0000011E 28D6                        sub dh,dl
   161 00000120 80FEFF                      cmp dh,-1
   162 00000123 0F84B9060000                je movimiento_soldado_valido
   163 00000129 80FE01                      cmp dh, 1
   164 0000012C 0F84B0060000                je movimiento_soldado_valido
   165 00000132 E986060000                  jmp movimiento_soldado_invalido
   166                                  
   167                                  ;;fin validar movimientos horizontales
   168                                  validar_movimiento_soldado_arriba:
   169 00000137 B800000000                  mov rax,0
   170 0000013C 8A0425[34000000]            mov al, [posx_ini]
   171                                      
   172 00000143 3C06                        cmp al, 6
   173 00000145 7409                        je validar_movimiento_soldado_arriba_en_fortaleza
   174 00000147 3C07                        cmp al, 7
   175 00000149 7405                        je validar_movimiento_soldado_arriba_en_fortaleza
   176 0000014B E96D060000                  jmp movimiento_soldado_invalido
   177                                  
   178                                  validar_movimiento_soldado_arriba_en_fortaleza:
   179 00000150 BA00000000                  mov rdx,0
   180 00000155 8A1425[35000000]            mov dl, [posy_ini]
   181 0000015C 8A3425[37000000]            mov dh, [posy_fin]
   182                                  
   183 00000163 80FA03                      cmp dl, 3
   184 00000166 740F                        je validar_movimiento_soldado_arriba_en_fortaleza_columna_tres
   185 00000168 80FA04                      cmp dl, 4
   186 0000016B 7421                        je validar_movimiento_soldado_arriba_en_fortaleza_columna_cuatro
   187 0000016D 80FA05                      cmp dl, 5
   188 00000170 743C                        je validar_movimiento_soldado_arriba_en_fortaleza_columna_cinco
   189 00000172 E946060000                  jmp movimiento_soldado_invalido
   190                                  
   191                                  validar_movimiento_soldado_arriba_en_fortaleza_columna_tres:
   192 00000177 80FE03                      cmp dh, 3
   193 0000017A 0F8407060000                je movimiento_oficial_ok
   194 00000180 80FE04                      cmp dh, 4
   195 00000183 0F84FE050000                je movimiento_oficial_ok
   196 00000189 E92F060000                  jmp movimiento_soldado_invalido
   197                                  
   198                                  validar_movimiento_soldado_arriba_en_fortaleza_columna_cuatro:
   199 0000018E 80FE03                      cmp dh, 3
   200 00000191 0F84F0050000                je movimiento_oficial_ok
   201 00000197 80FE04                      cmp dh, 4
   202 0000019A 0F84E7050000                je movimiento_oficial_ok
   203 000001A0 80FE05                      cmp dh, 5
   204 000001A3 0F84DE050000                je movimiento_oficial_ok
   205 000001A9 E90F060000                  jmp movimiento_soldado_invalido
   206                                  
   207                                  validar_movimiento_soldado_arriba_en_fortaleza_columna_cinco:
   208 000001AE 80FE04                      cmp dh, 4
   209 000001B1 0F84D0050000                je movimiento_oficial_ok
   210 000001B7 80FE05                      cmp dh, 5
   211 000001BA 0F84C7050000                je movimiento_oficial_ok
   212 000001C0 E9F8050000                  jmp movimiento_soldado_invalido
   213                                  
   214                                  validar_movimiento_soldado_abajo:
   215 000001C5 BA00000000                  mov rdx,0
   216 000001CA 8A1425[35000000]            mov dl, [posy_ini]
   217 000001D1 8A3425[37000000]            mov dh, [posy_fin]
   218                                      
   219 000001D8 28D6                        sub dh, dl
   220 000001DA 80FEFF                      cmp dh,-1
   221 000001DD 0F84FF050000                je movimiento_soldado_valido
   222 000001E3 80FE00                      cmp dh, 0
   223 000001E6 0F84F6050000                je movimiento_soldado_valido
   224 000001EC 80FE01                      cmp dh, 1
   225 000001EF 0F84ED050000                je movimiento_soldado_valido
   226 000001F5 E9C3050000                  jmp movimiento_soldado_invalido
   227                                  
   228                                  ;;fin validar_movimiento_soldado
   229 000001FA EB00                        jmp prox_turno
   230                                      
   231                                  prox_turno:
   232 000001FC E834020000                  call actualizar_turno
   233 00000201 E899000000                  call actualizar_tablero
   234 00000206 E901FEFFFF                  jmp ciclo_juego      ; Repite el bucle
   235                                          
   236                                      fin:
   237                                  ;    add rsp, 8             ; Restaura el espacio de la pila
   238 0000020B E827010000                  call clear_screen
   239                                  
   240 00000210 48BF-                       mov rdi, endGame
   240 00000212 [F100000000000000] 
   241 0000021A 4883EC08                    sub rsp, 8
   242 0000021E E8(00000000)                call printf
   243 00000223 4883C408                    add rsp,8
   244                                  
   245 00000227 B44C                        mov ah, 4Ch    ; C√≥digo de funci√≥n para terminar el programa;    mov al, 0      ; C√≥digo de retorno (0 indica √©xito)
   246 00000229 B000                        mov al, 0      ; C√≥digo de retorno (0 indica √©xito)
   247 0000022B CD21                        int 21h        ; Llamada a la interrupci√≥n 21h
   248                                  
   249 0000022D C3                          ret
   250                                  
   251                                  mostrar_tablero:
   252 0000022E B800000000                  mov rax, 0
   253 00000233 48890425[2F000000]          mov [posicion], rax 
   254 0000023B B908000000                  mov rcx, cantidadColumnas
   255 00000240 4883EC08                    sub rsp, 8
   256                                      fila_loop:
   257 00000244 51                              push rcx ;es necesario para loop, sino el registro rcx se pisa y loopea infinito
   258                                          ; Carga la direcci√≥n de la fila actual en la matriz
   259                                  
   260                                          ; Imprime la fila actual
   261                                  
   262 00000245 48BF-                           mov rdi, matriz         ; Pasa la direcci√≥n de la fila a printf
   262 00000247 [0301000000000000] 
   263 0000024F 48033C25[2F000000]              add rdi, [posicion]
   264 00000257 4829C0                          sub rax, rax           ; Limpia rax para printf
   265                                          
   266                                          
   267 0000025A E8(00000000)                    call printf
   268                                          ; Imprime salto de l√≠nea despu√©s de cada fila
   269 0000025F 48BF-                           mov rdi, saltoLinea
   269 00000261 [2D00000000000000] 
   270 00000269 4831C0                          xor rax, rax           ; Limpia rax para printf
   271 0000026C E8(00000000)                    call printf
   272 00000271 59                              pop rcx ;es necesario para loop, sino el registro rcx se pisa y loopea infinito
   273                                          
   274                                          ; Sumar 10 a "posicion"
   275 00000272 488B0425[2F000000]              mov rax, [posicion]         ; Carga el valor de "posicion" en rax
   276 0000027A 4883C009                        add rax, cantidadFilas                 ; Suma 10 a rax
   277 0000027E 48890425[2F000000]              mov [posicion], rax         ; Guarda el nuevo valor en "posicion"
   278                                          
   279 00000286 E2BC                            loop fila_loop
   280                                          
   281 00000288 48BF-                           mov rdi, saltoLinea
   281 0000028A [2D00000000000000] 
   282 00000292 4831C0                          xor rax, rax           ; Limpia rax para printf
   283 00000295 E8(00000000)                    call printf
   284 0000029A 4883C408                        add rsp, 8
   285 0000029E C3                              ret
   286                                  
   287                                  actualizar_tablero:
   288                                      ;Posicionamiento en el elemento i,j de una matriz
   289                                      ;(i-1)*longitudFila + (j-1)*longitudElemento
   290                                      ;longitdFila= longitudElemento*cantidadColumnas
   291 0000029F 4829C9                      sub rcx, rcx
   292 000002A2 4829C0                      sub rax, rax
   293 000002A5 4829DB                      sub rbx, rbx
   294 000002A8 4D29D2                      sub r10, r10
   295 000002AB 8A0425[34000000]            mov al,[posx_ini] ;guardo el valor de la fila, en AL(8bits) 
   296                                                      ;ya que posx es db (byte= 8bits) sino guarda cualquier cosa
   297                                  ;    sub rax,1 -> no es necesaria la resta ya que la matriz empieza en 1,1
   298 000002B2 41B809000000                mov r8, cantidadFilas
   299 000002B8 49F7E8                      imul r8   ;me desplazo en la fila
   300 000002BB 4801C1                      add rcx,rax
   301                                      
   302 000002BE 8A0425[35000000]            mov al,[posy_ini] ;guardo el valor de la col,
   303                                  ;    sub rax,1
   304 000002C5 41B801000000                mov r8, longitudElemento ;guardo en r8 para darle longitud y poder multiplicar usando imul
   305 000002CB 49F7E8                      imul r8 ;me desplazo en la columna
   306 000002CE 4801C1                      add rcx,rax ;sumo los desplazamientos
   307                                      
   308                                      
   309 000002D1 48BB-                       mov rbx,matriz ;pongo el pto al inicio de la matriz
   309 000002D3 [0301000000000000] 
   310 000002DB 4801CB                      add rbx,rcx ;me posicione en la matriz
   311                                  
   312 000002DE 4C8B13                      mov r10, [rbx] ;guardo un elemento
   313 000002E1 4C8B4B01                    mov r9, [rbx+1] ;guardo en r9 lo que le sigue de matriz posterior al elemento a actualizar
   314 000002E5 41B820000000                mov r8, " " ; lo muevo a un reg para darle (y estar seguro de su) longitud
   315 000002EB 4C8903                      mov [rbx],r8 ;muevo el valor(de igual longitud). muevo a la posicion de la matriz a actualizar
   316                                      
   317                                      ;despues de agregar el nuevo valor, agregarle el resto de la matriz que estaba antes.
   318 000002EE 4C894B01                    mov [rbx+1],r9
   319                                      
   320                                      
   321                                      ;;repito con casillero_destino
   322                                      ;;y guardo en el destino lo que guarde en r10 (el elemento origen)
   323                                      
   324                                      
   325                                      ;Posicionamiento en el elemento i,j de una matriz
   326                                      ;(i-1)*longitudFila + (j-1)*longitudElemento
   327                                      ;longitdFila= longitudElemento*cantidadColumnas
   328 000002F2 4829C9                      sub rcx, rcx
   329 000002F5 8A0425[36000000]            mov al,[posx_fin] ;guardo el valor de la fila, en AL(8bits) 
   330                                                      ;ya que posx es db (byte= 8bits) sino guarda cualquier cosa
   331                                  ;    sub rax,1 -> no es necesaria la resta ya que la matriz empieza en 1,1
   332 000002FC 41B809000000                mov r8, cantidadFilas
   333 00000302 49F7E8                      imul r8   ;me desplazo en la fila
   334 00000305 4801C1                      add rcx,rax
   335                                      
   336 00000308 8A0425[37000000]            mov al,[posy_fin] ;guardo el valor de la col,
   337                                  ;    sub rax,1
   338 0000030F 41B801000000                mov r8, longitudElemento ;guardo en r8 para darle longitud y poder multiplicar usando imul
   339 00000315 49F7E8                      imul r8 ;me desplazo en la columna
   340 00000318 4801C1                      add rcx,rax ;sumo los desplazamientos
   341                                      
   342                                      
   343 0000031B 48BB-                       mov rbx,matriz ;pongo el pto al inicio de la matriz
   343 0000031D [0301000000000000] 
   344 00000325 4801CB                      add rbx,rcx ;me posicione en la matriz
   345                                  
   346 00000328 4C8B4B01                    mov r9, [rbx+1] ;guardo en r9 lo que le sigue de matriz posterior al elemento a actualizar
   347 0000032C 4D89D0                      mov r8, r10 ; lo muevo a un reg para darle (y estar seguro de su) longitud
   348 0000032F 4C8903                      mov [rbx],r8 ;muevo el valor(de igual longitud). muevo a la posicion de la matriz a actualizar
   349                                      
   350                                      ;despues de agregar el nuevo valor, agregarle el resto de la matriz que estaba antes.
   351 00000332 4C894B01                    mov [rbx+1],r9
   352                                  
   353 00000336 C3                          ret
   354                                  
   355                                  clear_screen:
   356                                  
   357 00000337 48BF-                       mov rdi, cmd_clear
   357 00000339 [4100000000000000] 
   358 00000341 4883EC08                    sub rsp, 8
   359 00000345 E8(00000000)                call system
   360 0000034A 4883C408                    add rsp, 8
   361 0000034E C3                          ret
   362                                      
   363                                  pedir_casillero_origen:
   364                                      
   365 0000034F 4889E0                      mov rax, rsp
   366 00000352 4883E00F                    and rax, 15
   367 00000356 7404                        je no_restar_rsp_1
   368 00000358 4883EC08                    sub rsp, 8
   369                                  no_restar_rsp_1:
   370 0000035C 48BF-                       mov rdi, msjIngFilaColumnaOrigen
   370 0000035E [0000000000000000] 
   371 00000366 E8(00000000)                call printf
   372                                  
   373 0000036B 48BF-                       mov rdi, cadena      ; Direcci√≥n de 'cadena'
   373 0000036D [0A00000000000000] 
   374 00000375 E8(00000000)                call gets
   375 0000037A 4883C408                    add rsp, 8
   376                                  
   377                                      ; Extraer el primer car√°cter (primer n√∫mero)
   378 0000037E 480FB60425-                 movzx rax, byte [cadena]     ; Cargar el primer car√°cter de 'cadena' en rax
   378 00000383 [0A000000]         
   379 00000387 4883E830                    sub rax, '0'                 ; Convertir de ASCII a valor num√©rico
   380 0000038B 880425[34000000]            mov [posx_ini], al            ; Guardar el valor en 'posx_ini'
   381                                      
   382 00000392 803C25[34000000]00          cmp byte [posx_ini], 0
   383 0000039A 0F846BFEFFFF                je fin               ; Si es 0, salta a "fin de juego"
   384                                      
   385                                      ; Extraer el segundo car√°cter (segundo n√∫mero)
   386 000003A0 480FB60425-                 movzx rax, byte [cadena + 1] ; Cargar el segundo car√°cter de 'cadena' en rax
   386 000003A5 [0B000000]         
   387 000003A9 4883E830                    sub rax, '0'                 ; Convertir de ASCII a valor num√©rico
   388 000003AD 880425[35000000]            mov [posy_ini], al            ; Guardar el valor en 'posy_ini'
   389                                      
   390 000003B4 E9EA000000                  jmp validar_casillero_origen
   391                                      
   392                                  pedir_casillero_destino:
   393 000003B9 4883EC08                    sub rsp, 8
   394 000003BD 48BF-                       mov rdi, msjIngFilaColumnaDestino
   394 000003BF [1600000000000000] 
   395 000003C7 E8(00000000)                call printf
   396 000003CC 4883C408                    add rsp, 8
   397                                  
   398 000003D0 48BF-                       mov rdi, cadena      ; Direcci√≥n de 'cadena'
   398 000003D2 [0A00000000000000] 
   399 000003DA 4883EC08                    sub rsp, 8
   400 000003DE E8(00000000)                call gets
   401 000003E3 4883C408                    add rsp, 8
   402                                  
   403                                      ; Extraer el primer car√°cter (primer n√∫mero)
   404 000003E7 480FB60425-                 movzx rax, byte [cadena]     ; Cargar el primer car√°cter de 'cadena' en rax
   404 000003EC [0A000000]         
   405 000003F0 4883E830                    sub rax, '0'                 ; Convertir de ASCII a valor num√©rico
   406 000003F4 880425[36000000]            mov [posx_fin], al            ; Guardar el valor en 'posx_ini'
   407                                      
   408                                      ; Extraer el segundo car√°cter (segundo n√∫mero)
   409 000003FB 480FB60425-                 movzx rax, byte [cadena + 1] ; Cargar el segundo car√°cter de 'cadena' en rax
   409 00000400 [0B000000]         
   410 00000404 4883E830                    sub rax, '0'                 ; Convertir de ASCII a valor num√©rico
   411 00000408 880425[37000000]            mov [posy_fin], al            ; Guardar el valor en 'posy_ini'
   412 0000040F E9B2010000                  jmp es_destino_valido
   413 00000414 C3                          ret
   414                                      
   415                                  mostrar_jugador_actual:    
   416 00000415 4883EC08                    sub rsp, 8
   417 00000419 48BF-                       mov rdi, esTurnoDe
   417 0000041B [4700000000000000] 
   418 00000423 488B3425[6F000000]          mov rsi, [jugadorActual]
   419                                   
   420 0000042B E8(00000000)                call printf
   421 00000430 4883C408                    add rsp, 8
   422 00000434 C3                          ret
   423                                      
   424                                  actualizar_turno:
   425 00000435 8A0425[01010000]            mov al, [turno]
   426 0000043C 800425[01010000]01          add byte [turno], 1
   427 00000444 8A0425[01010000]            mov al, [turno]
   428 0000044B 30E4                        xor ah, ah        ; Limpiar AH para asegurar que AX est√° correcto
   429                                  
   430                                      ; Dividir AX entre el divisor (2)
   431 0000044D 4831DB                      xor rbx, rbx        
   432 00000450 8A1C25[02010000]            mov bl, [divisor]
   433 00000457 F6F3                        div bl            ; AX / BL -> AL = cociente, AH = resto
   434                                  
   435                                      ; Ahora, AH contiene el resto (turno % 2)
   436 00000459 80FC00                      cmp ah, 0         ; Compara el resto con 0
   437 0000045C 7402                        je es_par         ; Si el resto es 0, turno es par
   438 0000045E EB19                        jmp es_impar      ; Si no, turno es impar
   439                                  
   440                                  es_par:          
   441 00000460 C60425[01010000]00          mov byte[turno], 0
   442 00000468 488D0425[5C000000]          lea rax, [oficiales]          ; Cargar la direcci√≥n de 'soldados' en AX
   443 00000470 48890425[6F000000]          mov [jugadorActual], rax
   444 00000478 C3                          ret
   445                                  
   446                                  es_impar:        
   447 00000479 C60425[01010000]01          mov byte[turno], 1
   448 00000481 488D0425[66000000]          lea rax, [soldados]          ; Cargar la direcci√≥n de 'soldados' en AX
   449 00000489 48890425[6F000000]          mov [jugadorActual], rax
   450 00000491 C3                          ret
   451                                      
   452                                  asignar_jugador_inicial:
   453 00000492 488D0425[66000000]          lea rax, [soldados]          ; Cargar la direcci√≥n de 'soldados' en AX
   454 0000049A 48890425[6F000000]          mov [jugadorActual], rax
   455 000004A2 C3                          ret
   456                                      
   457                                  validar_casillero_origen:
   458                                      ;;valido que este dentro del tablero
   459 000004A3 4829C0                      sub rax, rax
   460 000004A6 4829DB                      sub rbx, rbx
   461 000004A9 8A0425[34000000]            mov al,[posx_ini]
   462 000004B0 8A1C25[35000000]            mov bl,[posy_ini]
   463                                      
   464                                      validar_dentro_x:
   465 000004B7 3C01                        cmp al, 1
   466 000004B9 740E                        je validar_dentro_y
   467 000004BB 3C02                        cmp al, 2
   468 000004BD 740A                        je validar_dentro_y
   469 000004BF 3C06                        cmp al, 6
   470 000004C1 7406                        je validar_dentro_y
   471 000004C3 3C07                        cmp al, 7
   472 000004C5 7402                        je validar_dentro_y
   473 000004C7 EB16                        jmp dentro_tablero_origen_ok
   474                                  validar_dentro_y:
   475 000004C9 80FB01                      cmp bl, 1
   476 000004CC 7476                        je origen_invalido
   477 000004CE 80FB02                      cmp bl, 2
   478 000004D1 7471                        je origen_invalido
   479 000004D3 80FB06                      cmp bl, 6
   480 000004D6 746C                        je origen_invalido
   481 000004D8 80FB07                      cmp bl, 7
   482 000004DB 7467                        je origen_invalido
   483 000004DD EB00                        jmp dentro_tablero_origen_ok
   484                                      
   485                                  dentro_tablero_origen_ok:
   486 000004DF 8A0425[01010000]            mov al, [turno]
   487 000004E6 30E4                        xor ah, ah        ; Limpiar AH para asegurar que AX est√° correcto
   488                                  
   489                                      ; Dividir AX entre el divisor (2)
   490 000004E8 4831DB                      xor rbx, rbx        
   491 000004EB 8A1C25[02010000]            mov bl, [divisor]
   492 000004F2 F6F3                        div bl            ; AX / BL -> AL = cociente, AH = resto
   493                                  
   494                                      ; Ahora, AH contiene el resto (turno % 2)
   495 000004F4 80FC00                      cmp ah, 0         ; Compara el resto con 0
   496 000004F7 7468                        je es_oficial_valido         ; Si el resto es 0, turno es par
   497 000004F9 EB01                        jmp es_soldado_valido ; Si no, turno es impar
   498 000004FB C3                          ret
   499                                      
   500                                  es_soldado_valido:
   501                                  ;busco el elemento en la matriz; y lo guardo en r10 para comparar el elemento.
   502 000004FC 4829C9                      sub rcx, rcx
   503 000004FF 4829C0                      sub rax, rax
   504 00000502 4829DB                      sub rbx, rbx
   505 00000505 4D29D2                      sub r10, r10
   506 00000508 8A0425[34000000]            mov al,[posx_ini] 
   507 0000050F 41B809000000                mov r8, cantidadFilas
   508 00000515 49F7E8                      imul r8
   509 00000518 4801C1                      add rcx,rax
   510                                      
   511 0000051B 8A0425[35000000]            mov al,[posy_ini]
   512 00000522 41B801000000                mov r8, longitudElemento 
   513 00000528 49F7E8                      imul r8
   514 0000052B 4801C1                      add rcx,rax
   515                                      
   516 0000052E 48BB-                       mov rbx,matriz 
   516 00000530 [0301000000000000] 
   517 00000538 4801CB                      add rbx,rcx ;me posicione en la matriz
   518                                  
   519 0000053B 4C8B13                      mov r10, [rbx] ;guardo un elemento
   520 0000053E 4180FA58                    cmp r10b, 'X'
   521 00000542 741C                        je turno_soldado_ok
   522                                      ;sino fue un mal ingreso:
   523                                  origen_invalido:
   524 00000544 48BF-                       mov rdi, casilleroInvalido
   524 00000546 [7800000000000000] 
   525 0000054E 4883EC08                    sub rsp, 8
   526 00000552 E8(00000000)                call printf
   527 00000557 4883C408                    add rsp, 8
   528 0000055B E9EFFDFFFF                  jmp pedir_casillero_origen
   529                                  turno_soldado_ok:
   530 00000560 C3                          ret
   531                                      
   532                                  es_oficial_valido:
   533                                  ;busco el elemento en la matriz; y lo guardo en r10 para comparar el elemento.
   534 00000561 4829C9                      sub rcx, rcx
   535 00000564 4829C0                      sub rax, rax
   536 00000567 4829DB                      sub rbx, rbx
   537 0000056A 4D29D2                      sub r10, r10
   538 0000056D 8A0425[34000000]            mov al,[posx_ini] 
   539 00000574 41B809000000                mov r8, cantidadFilas
   540 0000057A 49F7E8                      imul r8
   541 0000057D 4801C1                      add rcx,rax
   542                                      
   543 00000580 8A0425[35000000]            mov al,[posy_ini]
   544 00000587 41B801000000                mov r8, longitudElemento 
   545 0000058D 49F7E8                      imul r8
   546 00000590 4801C1                      add rcx,rax
   547                                      
   548 00000593 48BB-                       mov rbx,matriz 
   548 00000595 [0301000000000000] 
   549 0000059D 4801CB                      add rbx,rcx ;me posicione en la matriz
   550                                  
   551 000005A0 4C8B13                      mov r10, [rbx] ;guardo un elemento
   552                                  ;;
   553 000005A3 4180FA4F                    cmp r10b, 'O'
   554 000005A7 741C                        je turno_oficial_ok
   555                                      ;sino fue un mal ingreso:
   556 000005A9 48BF-                       mov rdi, casilleroInvalido
   556 000005AB [7800000000000000] 
   557 000005B3 4883EC08                    sub rsp, 8
   558 000005B7 E8(00000000)                call printf
   559 000005BC 4883C408                    add rsp, 8
   560 000005C0 E98AFDFFFF                  jmp pedir_casillero_origen
   561                                      turno_oficial_ok:
   562 000005C5 C3                          ret    
   563                                      
   564                                      
   565                                  es_destino_valido:
   566                                      ;;valido que este dentro del tablero
   567 000005C6 4829C0                      sub rax, rax
   568 000005C9 4829DB                      sub rbx, rbx
   569 000005CC 8A0425[36000000]            mov al,[posx_fin]
   570 000005D3 8A1C25[37000000]            mov bl,[posy_fin]
   571                                      
   572                                  validar_dentro_x_fin:
   573 000005DA 3C01                        cmp al, 1
   574 000005DC 740E                        je validar_dentro_y_fin
   575 000005DE 3C02                        cmp al, 2
   576 000005E0 740A                        je validar_dentro_y_fin
   577 000005E2 3C06                        cmp al, 6
   578 000005E4 7406                        je validar_dentro_y_fin
   579 000005E6 3C07                        cmp al, 7
   580 000005E8 7402                        je validar_dentro_y_fin
   581 000005EA EB16                        jmp dentro_tablero_destino_ok
   582                                  validar_dentro_y_fin:
   583 000005EC 80FB01                      cmp bl, 1
   584 000005EF 7459                        je destino_invalido
   585 000005F1 80FB02                      cmp bl, 2
   586 000005F4 7454                        je destino_invalido
   587 000005F6 80FB06                      cmp bl, 6
   588 000005F9 744F                        je destino_invalido
   589 000005FB 80FB07                      cmp bl, 7
   590 000005FE 744A                        je destino_invalido
   591 00000600 EB00                        jmp dentro_tablero_destino_ok
   592                                      
   593                                  dentro_tablero_destino_ok:
   594                                  ;busco el elemento en la matriz; y lo guardo en r10 para comparar el elemento.
   595 00000602 4829C9                      sub rcx, rcx
   596 00000605 4829C0                      sub rax, rax
   597 00000608 4829DB                      sub rbx, rbx
   598 0000060B 4D29D2                      sub r10, r10
   599 0000060E 8A0425[36000000]            mov al,[posx_fin] 
   600 00000615 41B809000000                mov r8, cantidadFilas
   601 0000061B 49F7E8                      imul r8
   602 0000061E 4801C1                      add rcx,rax
   603                                      
   604 00000621 8A0425[37000000]            mov al,[posy_fin]
   605 00000628 41B801000000                mov r8, longitudElemento 
   606 0000062E 49F7E8                      imul r8
   607 00000631 4801C1                      add rcx,rax
   608                                      
   609 00000634 48BB-                       mov rbx,matriz 
   609 00000636 [0301000000000000] 
   610 0000063E 4801CB                      add rbx,rcx ;me posicione en la matriz
   611                                  
   612 00000641 4C8B13                      mov r10, [rbx] ;guardo un elemento
   613                                  ;;
   614 00000644 4180FA20                    cmp r10b, ' '
   615 00000648 741C                        je destino_ok
   616                                      ;sino fue un mal ingreso:
   617                                  destino_invalido:
   618 0000064A 48BF-                       mov rdi, casilleroInvalido
   618 0000064C [7800000000000000] 
   619 00000654 4883EC08                    sub rsp, 8
   620 00000658 E8(00000000)                call printf
   621 0000065D 4883C408                    add rsp, 8
   622 00000661 E953FDFFFF                  jmp pedir_casillero_destino
   623                                  destino_ok:
   624 00000666 C3                          ret    
   625                                  validar_movimiento_oficial:
   626                                  ;;falta resolver esto -> solo de a 1 en cualqeuir dir.
   627 00000667 41BC00000000                mov r12,0
   628 0000066D B800000000                  mov rax,0
   629 00000672 8A0425[34000000]            mov al, [posx_ini]
   630 00000679 8A2425[36000000]            mov ah, [posx_fin]
   631 00000680 28E0                        sub al,ah
   632                                  
   633 00000682 BA00000000                  mov rdx,0
   634 00000687 8A1425[35000000]            mov dl, [posy_ini]
   635 0000068E 8A3425[37000000]            mov dh, [posy_fin]
   636 00000695 28F2                        sub dl,dh
   637                                  
   638 00000697 3C00                        cmp al, 0
   639 00000699 7410                        je validar_movimientos_oficial_horizontal ;;listo
   640 0000069B 3C01                        cmp al, 1
   641 0000069D 7428                        je validar_movimiento_simple_oficial_arriba_abajo ;;listo
   642 0000069F 3CFF                        cmp al,-1
   643 000006A1 7424                        je validar_movimiento_simple_oficial_arriba_abajo ;;listo
   644                                      
   645 000006A3 3C02                        cmp al, 2
   646 000006A5 7440                        je validar_movimiento_doble_oficial_superiores ;;voy a validar esto
   647 000006A7 3CFE                        cmp al,-2
   648 000006A9 7450                        je validar_movimiento_doble_oficial_inferiores ;;falta validar
   649                                      
   650                                  ;;esto valida OK movimientos simples y dobles horizontales (falta validar dobles horizontales)
   651                                  validar_movimientos_oficial_horizontal:
   652                                      ;;movimiento simple
   653 000006AB 80FA01                      cmp dl, 1
   654 000006AE 0F84D3000000                je movimiento_oficial_ok
   655 000006B4 80FAFF                      cmp dl,-1
   656 000006B7 0F84CA000000                je movimiento_oficial_ok
   657                                      ;;movimiento doble (comio)
   658 000006BD 80FA02                      cmp dl, 2
   659 000006C0 744D                        je validar_movimiento_doble_izquierda ;; aca falta validar que haya X en el medio
   660 000006C2 80FAFE                      cmp dl,-2
   661 000006C5 744C                        je validar_movimiento_doble_derecha ;; aca falta validar que haya X en el medio
   662                                  ;funcion ready (no necesita nada mas)
   663                                  validar_movimiento_simple_oficial_arriba_abajo:
   664                                      ;;si se movio 1 en x, solo puede ser movimiento simple
   665 000006C7 80FA01                      cmp dl, 1
   666 000006CA 0F84B7000000                je movimiento_oficial_ok
   667 000006D0 80FAFF                      cmp dl,-1
   668 000006D3 0F84AE000000                je movimiento_oficial_ok
   669 000006D9 80FA00                      cmp dl, 0
   670 000006DC 0F84A5000000                je movimiento_oficial_ok
   671 000006E2 E9B8000000                  jmp movimiento_oficial_invalido
   672                                  
   673                                  ;;movimientos dobles!
   674                                  validar_movimiento_doble_oficial_superiores:
   675 000006E7 80FA02                      cmp dl, 2
   676 000006EA 742B                        je validar_movimiento_doble_izquierda_superior
   677 000006EC 80FAFE                      cmp dl,-2
   678 000006EF 7430                        je validar_movimiento_doble_derecha_superior
   679 000006F1 80FA00                      cmp dl, 0
   680 000006F4 7427                        je validar_movimiento_doble_superior
   681 000006F6 E9A4000000                  jmp movimiento_oficial_invalido
   682                                  
   683                                  validar_movimiento_doble_oficial_inferiores:
   684 000006FB 80FA02                      cmp dl, 2
   685 000006FE 7427                        je validar_movimiento_doble_izquierda_inferior
   686 00000700 80FAFE                      cmp dl,-2
   687 00000703 742C                        je validar_movimiento_doble_derecha_inferior
   688 00000705 80FA00                      cmp dl, 0
   689 00000708 7423                        je validar_movimiento_doble_inferior
   690 0000070A E990000000                  jmp movimiento_oficial_invalido
   691                                      
   692                                  ;;tengo que validar que haya una X en los movimientos dobles
   693                                  ;;voy a setear una posicion posx - posy para buscar elemento en la matriz
   694                                  ;;si hay una X efectivamente habia un soldado -> eliminar soldado -> movimiento ok!
   695                                  ;;else invalido.
   696                                  
   697                                  ;;hasta este momento en ah y dh estan los valores x y destino respectivamente
   698                                  validar_movimiento_doble_izquierda:
   699 0000070F FEC6                        inc dh
   700 00000711 EB24                        jmp validar_habia_soldado_en_movimiento_doble
   701                                  validar_movimiento_doble_derecha:
   702 00000713 FECE                        dec dh
   703 00000715 EB20                        jmp validar_habia_soldado_en_movimiento_doble
   704                                  validar_movimiento_doble_izquierda_superior:
   705 00000717 FEC6                        inc dh
   706 00000719 FEC4                        inc ah
   707 0000071B EB1A                        jmp validar_habia_soldado_en_movimiento_doble
   708                                  validar_movimiento_doble_superior:
   709 0000071D FEC4                        inc ah
   710 0000071F EB16                        jmp validar_habia_soldado_en_movimiento_doble
   711                                  validar_movimiento_doble_derecha_superior:
   712 00000721 FECE                        dec dh
   713 00000723 FEC4                        inc ah
   714 00000725 EB10                        jmp validar_habia_soldado_en_movimiento_doble
   715                                  validar_movimiento_doble_izquierda_inferior:
   716 00000727 FEC6                        inc dh
   717 00000729 FECC                        dec ah
   718 0000072B EB0A                        jmp validar_habia_soldado_en_movimiento_doble
   719                                  validar_movimiento_doble_inferior:
   720 0000072D FECC                        dec ah
   721 0000072F EB06                        jmp validar_habia_soldado_en_movimiento_doble
   722                                  validar_movimiento_doble_derecha_inferior:
   723 00000731 FECE                        dec dh
   724 00000733 FECC                        dec ah
   725 00000735 EB00                        jmp validar_habia_soldado_en_movimiento_doble
   726                                  
   727                                  
   728                                  ;;falta estar seguro de lo que hago aca. (validar X e Y..)
   729                                  validar_habia_soldado_en_movimiento_doble:
   730                                      
   731 00000737 4829DB                      sub rbx, rbx
   732 0000073A 88E3                        mov bl, ah      
   733 0000073C 4829C0                      sub rax, rax      
   734 0000073F 88D8                        mov al, bl
   735                                  
   736 00000741 4829DB                      sub rbx, rbx
   737 00000744 88F3                        mov bl, dh
   738                                                  
   739 00000746 4829C9                      sub rcx, rcx
   740 00000749 4829D2                      sub rdx, rdx
   741 0000074C 4D29C0                      sub r8, r8
   742 0000074F 4D29D2                      sub r10, r10
   743                                      
   744                                   
   745 00000752 41B809000000                mov r8, cantidadFilas
   746 00000758 49F7E8                      imul r8
   747 0000075B 4801C1                      add rcx,rax
   748                                      
   749 0000075E 88D8                        mov al, bl
   750 00000760 41B801000000                mov r8, longitudElemento 
   751 00000766 49F7E8                      imul r8
   752 00000769 4801C1                      add rcx,rax
   753                                      
   754 0000076C 4829DB                      sub rbx, rbx   
   755 0000076F 48BB-                       mov rbx,matriz 
   755 00000771 [0301000000000000] 
   756 00000779 4801CB                      add rbx,rcx ;me posicione en la matriz
   757                                  
   758 0000077C 4C8B13                      mov r10, [rbx] ;guardo un elemento
   759 0000077F 4180FA58                    cmp r10b, 'X'
   760 00000783 7402                        je movimiento_oficial_ok
   761 00000785 EB18                        jmp movimiento_oficial_invalido
   762                                  
   763                                  ;;fin;; validaciones terminan en estas 2 funciones.
   764                                  movimiento_oficial_ok:
   765                                      
   766 00000787 4C8B4B01                    mov r9, [rbx+1] ;guardo en r9 lo que le sigue de matriz posterior al elemento a actualizar
   767 0000078B 41B820000000                mov r8, " " ; lo muevo a un reg para darle (y estar seguro de su) longitud
   768 00000791 4C8903                      mov [rbx],r8 ;muevo el valor(de igual longitud). muevo a la posicion de la matriz a actualizar
   769                                      
   770                                      ;despues de agregar el nuevo valor, agregarle el resto de la matriz que estaba antes.
   771 00000794 4C894B01                    mov [rbx+1],r9
   772                                  
   773 00000798 41BC00000000                mov r12,0
   774 0000079E C3                          ret
   775                                  movimiento_oficial_invalido:
   776 0000079F 48BF-                       mov rdi,msj_movimiento_oficial_invalido
   776 000007A1 [8D00000000000000] 
   777 000007A9 4883EC08                    sub rsp, 8
   778 000007AD E8(00000000)                call printf
   779 000007B2 4883C408                    add rsp,8
   780                                      
   781 000007B6 41BC01000000                mov r12,1
   782 000007BC C3                          ret
   783                                  
   784                                  movimiento_soldado_invalido:
   785 000007BD 4889E0                      mov rax, rsp
   786 000007C0 4883E00F                    and rax, 15
   787 000007C4 7404                        je no_restar_rsp
   788 000007C6 4883EC08                    sub rsp, 8
   789                                  no_restar_rsp:
   790 000007CA 48BF-                       mov rdi,msj_movimiento_soldado_invalido
   790 000007CC [BF00000000000000] 
   791 000007D4 E8(00000000)                call printf
   792 000007D9 4883C408                    add rsp,8
   793 000007DD E939F8FFFF                  jmp pedir_movimiento
   794                                  
   795                                  movimiento_soldado_valido:
   796 000007E2 E915FAFFFF                  jmp prox_turno
   797                                  
   798                                      
   799                                      
