     1                                  global	main
     2                                  extern 	printf
     3                                  extern  gets
     4                                  
     5                                  extern  system
     6                                  
     7                                  section .data
     8 00000000 496E6772657365204F-         msjIngFilaColumnaOrigen	db	'Ingrese Origen [XY]: ',0
     8 00000009 726967656E205B5859-
     8 00000012 5D3A2000           
     9 00000016 496E67726573652044-         msjIngFilaColumnaDestino	db	'Ingrese Destino [XY]: ',0
     9 0000001F 657374696E6F205B58-
     9 00000028 595D3A2000         
    10                                  
    11 0000002D 0A00                        saltoLinea  db 10, 0     ; Salto de línea al final de cada fila     
    12 0000002F 00                          posicion    db       0
    13 00000030 256C6900                    format	db	'%li', 0
    14                                  
    15                                      longitudElemento equ	1
    16                                      cantidadColumnas equ 8
    17                                      cantidadFilas    equ	9
    18                                      
    19 00000034 01                          posx_ini db 1
    20 00000035 01                          posy_ini db 1
    21                                      
    22 00000036 01                          posx_fin db 1
    23 00000037 01                          posy_fin db 1
    24                                      
    25 00000038 01                          elemento_inicial db 1
    26                                  
    27 00000039 256C6920256C6900            format2	db	'%li %li', 0
    28 00000041 636C65617200                cmd_clear db "clear",0
    29                                      
    30 00000047 4573207475726E6F20-         esTurnoDe	db	'Es turno de los %s!',10,0
    30 00000050 6465206C6F73202573-
    30 00000059 210A00             
    31 0000005C 6F66696369616C6573-         oficiales   db 'oficiales',0
    31 00000065 00                 
    32 00000066 736F6C6461646F7300          soldados    db 'soldados',0
    33 0000006F 736F6C6461646F7300          jugadorActual db 'soldados',0
    34 00000078 636173696C6C65726F-         casilleroInvalido db 'casillero invalido!',10,0
    34 00000081 20696E76616C69646F-
    34 0000008A 210A00             
    35 0000008D 6D6F76696D69656E74-         msj_movimiento_oficial_invalido db 'movimiento de oficial invalido! Vuelva a intentarlo',10,0
    35 00000096 6F206465206F666963-
    35 0000009F 69616C20696E76616C-
    35 000000A8 69646F21205675656C-
    35 000000B1 7661206120696E7465-
    35 000000BA 6E7461726C6F0A00   
    36 000000C2 6D6F76696D69656E74-         msj_movimiento_soldado_invalido db 'movimiento de soldado invalido! Vuelva a intentarlo',10,0
    36 000000CB 6F20646520736F6C64-
    36 000000D4 61646F20696E76616C-
    36 000000DD 69646F21205675656C-
    36 000000E6 7661206120696E7465-
    36 000000EF 6E7461726C6F0A00   
    37                                  
    38 000000F7 47616E61726F6E206C-         msj_ganaron_soldados_por_falta_oficiales db 'Ganaron los soldados, no hay mas oficiales que puedan defender la fortaleza!',10,0
    38 00000100 6F7320736F6C646164-
    38 00000109 6F732C206E6F206861-
    38 00000112 79206D6173206F6669-
    38 0000011B 6369616C6573207175-
    38 00000124 652070756564616E20-
    38 0000012D 646566656E64657220-
    38 00000136 6C6120666F7274616C-
    38 0000013F 657A61210A00       
    39 00000145 47616E61726F6E206C-         msj_ganaron_soldados_por_invasion db 'Ganaron los soldados, invadieron la fortaleza!',10,0
    39 0000014E 6F7320736F6C646164-
    39 00000157 6F732C20696E766164-
    39 00000160 6965726F6E206C6120-
    39 00000169 666F7274616C657A61-
    39 00000172 210A00             
    40 00000175 47616E61726F6E206C-         msj_ganaron_oficiales_por_falta_soldados db 'Ganaron los oficiales, ya no quedan mas soldados!',10,0
    40 0000017E 6F73206F6669636961-
    40 00000187 6C65732C207961206E-
    40 00000190 6F2071756564616E20-
    40 00000199 6D617320736F6C6461-
    40 000001A2 646F73210A00       
    41                                  
    42 000001A8 46696E2064656C206A-         endGame    db 'Fin del juego!',10,0
    42 000001B1 7565676F210A00     
    43 000001B8 01                          turno db 1
    44 000001B9 02                          divisor db 2 
    45                                      
    46 000001BA 7E3132333435363700          matriz  db '~1234567',0
    47 000001C3 317E7C5858587C7E00                  db '1~|XXX|~',0
    48 000001CC 327E7C5858587C7E00                  db '2~|XXX|~',0
    49 000001D5 335858585858585800                  db '3XXXXXXX',0
    50 000001DE 345858585858585800                  db '4XXXXXXX',0
    51 000001E7 355858202020585800                  db '5XX   XX',0
    52 000001F0 367E7C20204F7C7E00                  db '6~|  O|~',0
    53 000001F9 377E7C4F20207C7E00                  db '7~|O  |~',0
    54 00000202 2D2D2D2D2D2D2D2D00                  db '--------',0
    55                                  
    56                                  section .bss    
    57 00000000 <res Ah>                    buffer		resb	10
    58 0000000A ????                        cadena resb 2
    59 0000000C ??                          numero  resb 1
    60                                  
    61                                  section .text
    62                                  main:
    63 00000000 4889E5                      mov rbp, rsp; for correct debugging
    64 00000003 41BE02000000                mov r14, 2 ;seteo cantidad de oficiales.
    65 00000009 E914030000                  jmp asignar_jugador_inicial
    66                                  ciclo_juego:
    67 0000000E E85D000000                  call mostrar_tablero
    68 00000013 E981020000                  jmp mostrar_jugador_actual
    69                                  pedir_movimiento:
    70 00000018 E9B7010000                  jmp pedir_casillero_origen
    71                                  pedir_movimiento_destino:
    72 0000001D E91C020000                  jmp pedir_casillero_destino
    73                                  validar_movimiento:
    74 00000022 8A0425[B8010000]            mov al, [turno]
    75 00000029 3C01                        cmp al, 1
    76 0000002B 0F8499080000                je validar_movimiento_soldado
    77 00000031 E9D0040000                  jmp validar_movimiento_oficial ;hacer esto solo si es el turno del oficial.
    78                                  fin_validacion_movimiento_oficial:
    79 00000036 4983FC00                    cmp r12, 0                  ; Si la validacion esta mal -> r12 != 0 -> volver a pedir origen-destin0
    80 0000003A 75DC                        jne pedir_movimiento         ; Si no es 0 -> back to pedir_movimiento
    81 0000003C E97C010000                  jmp validar_desatendido
    82                                  prox_turno:
    83 00000041 E9CC000000                  jmp actualizar_tablero
    84                                  fin_actualizar_tablero:
    85 00000046 E972020000                  jmp actualizar_turno
    86                                  fin_actualizar_turno:
    87 0000004B E999070000                  jmp verificar_ganador
    88                                  fin_verificar_ganador:
    89 00000050 EBBC                        jmp ciclo_juego      ; Repite el bucle
    90                                          
    91                                  fin:
    92 00000052 48BF-                       mov rdi, endGame
    92 00000054 [A801000000000000] 
    93 0000005C 4883EC08                    sub rsp, 8
    94 00000060 E8(00000000)                call printf
    95 00000065 4883C408                    add rsp,8
    96                                  
    97 00000069 B44C                        mov ah, 4Ch    ; Código de función para terminar el programa;    mov al, 0      ; Código de retorno (0 indica éxito)
    98 0000006B B000                        mov al, 0      ; Código de retorno (0 indica éxito)
    99 0000006D CD21                        int 21h        ; Llamada a la interrupción 21h
   100                                  
   101 0000006F C3                          ret
   102                                  
   103                                  mostrar_tablero:
   104                                  
   105                                  ;clear_screen:
   106 00000070 4889E0                      mov rax, rsp
   107 00000073 4883E00F                    and rax, 15
   108 00000077 7419                        je no_restar_rsp_3
   109 00000079 4883EC08                    sub rsp, 8
   110 0000007D 48BF-                       mov rdi, cmd_clear
   110 0000007F [4100000000000000] 
   111 00000087 E8(00000000)                call system
   112 0000008C 4883C408                    add rsp, 8
   113 00000090 EB0F                        jmp saltar_a_mostrar_tablero
   114                                  no_restar_rsp_3:
   115 00000092 48BF-                       mov rdi, cmd_clear
   115 00000094 [4100000000000000] 
   116 0000009C E8(00000000)                call system
   117                                  saltar_a_mostrar_tablero:
   118 000000A1 B800000000                  mov rax, 0
   119 000000A6 48890425[2F000000]          mov [posicion], rax 
   120 000000AE B908000000                  mov rcx, cantidadColumnas
   121 000000B3 4883EC08                    sub rsp, 8
   122                                      fila_loop:
   123 000000B7 51                              push rcx ;es necesario para loop, sino el registro rcx se pisa y loopea infinito
   124                                          ; Carga la dirección de la fila actual en la matriz
   125                                  
   126                                          ; Imprime la fila actual
   127                                  
   128 000000B8 48BF-                           mov rdi, matriz         ; Pasa la dirección de la fila a printf
   128 000000BA [BA01000000000000] 
   129 000000C2 48033C25[2F000000]              add rdi, [posicion]
   130 000000CA 4829C0                          sub rax, rax           ; Limpia rax para printf
   131                                          
   132                                          
   133 000000CD E8(00000000)                    call printf
   134                                          ; Imprime salto de línea después de cada fila
   135 000000D2 48BF-                           mov rdi, saltoLinea
   135 000000D4 [2D00000000000000] 
   136 000000DC 4831C0                          xor rax, rax           ; Limpia rax para printf
   137 000000DF E8(00000000)                    call printf
   138 000000E4 59                              pop rcx ;es necesario para loop, sino el registro rcx se pisa y loopea infinito
   139                                          
   140                                          ; Sumar 10 a "posicion"
   141 000000E5 488B0425[2F000000]              mov rax, [posicion]         ; Carga el valor de "posicion" en rax
   142 000000ED 4883C009                        add rax, cantidadFilas                 ; Suma 10 a rax
   143 000000F1 48890425[2F000000]              mov [posicion], rax         ; Guarda el nuevo valor en "posicion"
   144                                          
   145 000000F9 E2BC                            loop fila_loop
   146                                          
   147 000000FB 48BF-                           mov rdi, saltoLinea
   147 000000FD [2D00000000000000] 
   148 00000105 4831C0                          xor rax, rax           ; Limpia rax para printf
   149 00000108 E8(00000000)                    call printf
   150 0000010D 4883C408                        add rsp, 8
   151 00000111 C3                              ret
   152                                  
   153                                  actualizar_tablero:
   154                                      ;Posicionamiento en el elemento i,j de una matriz
   155                                      ;(i-1)*longitudFila + (j-1)*longitudElemento
   156                                      ;longitdFila= longitudElemento*cantidadColumnas
   157 00000112 4829C9                      sub rcx, rcx
   158 00000115 4829C0                      sub rax, rax
   159 00000118 4829DB                      sub rbx, rbx
   160 0000011B 4D29D2                      sub r10, r10
   161 0000011E 8A0425[34000000]            mov al,[posx_ini] ;guardo el valor de la fila, en AL(8bits) 
   162                                                      ;ya que posx es db (byte= 8bits) sino guarda cualquier cosa
   163                                  ;    sub rax,1 -> no es necesaria la resta ya que la matriz empieza en 1,1
   164 00000125 41B809000000                mov r8, cantidadFilas
   165 0000012B 49F7E8                      imul r8   ;me desplazo en la fila
   166 0000012E 4801C1                      add rcx,rax
   167                                      
   168 00000131 8A0425[35000000]            mov al,[posy_ini] ;guardo el valor de la col,
   169                                  ;    sub rax,1
   170 00000138 41B801000000                mov r8, longitudElemento ;guardo en r8 para darle longitud y poder multiplicar usando imul
   171 0000013E 49F7E8                      imul r8 ;me desplazo en la columna
   172 00000141 4801C1                      add rcx,rax ;sumo los desplazamientos
   173                                      
   174                                      
   175 00000144 48BB-                       mov rbx,matriz ;pongo el pto al inicio de la matriz
   175 00000146 [BA01000000000000] 
   176 0000014E 4801CB                      add rbx,rcx ;me posicione en la matriz
   177                                  
   178 00000151 4C8B13                      mov r10, [rbx] ;guardo un elemento
   179 00000154 4C8B4B01                    mov r9, [rbx+1] ;guardo en r9 lo que le sigue de matriz posterior al elemento a actualizar
   180 00000158 41B820000000                mov r8, " " ; lo muevo a un reg para darle (y estar seguro de su) longitud
   181 0000015E 4C8903                      mov [rbx],r8 ;muevo el valor(de igual longitud). muevo a la posicion de la matriz a actualizar
   182                                      
   183                                      ;despues de agregar el nuevo valor, agregarle el resto de la matriz que estaba antes.
   184 00000161 4C894B01                    mov [rbx+1],r9
   185                                      
   186                                      
   187                                      ;;repito con casillero_destino
   188                                      ;;y guardo en el destino lo que guarde en r10 (el elemento origen)
   189                                      
   190                                      
   191                                      ;Posicionamiento en el elemento i,j de una matriz
   192                                      ;(i-1)*longitudFila + (j-1)*longitudElemento
   193                                      ;longitdFila= longitudElemento*cantidadColumnas
   194 00000165 4829C9                      sub rcx, rcx
   195 00000168 8A0425[36000000]            mov al,[posx_fin] ;guardo el valor de la fila, en AL(8bits) 
   196                                                      ;ya que posx es db (byte= 8bits) sino guarda cualquier cosa
   197                                  ;    sub rax,1 -> no es necesaria la resta ya que la matriz empieza en 1,1
   198 0000016F 41B809000000                mov r8, cantidadFilas
   199 00000175 49F7E8                      imul r8   ;me desplazo en la fila
   200 00000178 4801C1                      add rcx,rax
   201                                      
   202 0000017B 8A0425[37000000]            mov al,[posy_fin] ;guardo el valor de la col,
   203                                  ;    sub rax,1
   204 00000182 41B801000000                mov r8, longitudElemento ;guardo en r8 para darle longitud y poder multiplicar usando imul
   205 00000188 49F7E8                      imul r8 ;me desplazo en la columna
   206 0000018B 4801C1                      add rcx,rax ;sumo los desplazamientos
   207                                      
   208                                      
   209 0000018E 48BB-                       mov rbx,matriz ;pongo el pto al inicio de la matriz
   209 00000190 [BA01000000000000] 
   210 00000198 4801CB                      add rbx,rcx ;me posicione en la matriz
   211                                  
   212 0000019B 4C8B4B01                    mov r9, [rbx+1] ;guardo en r9 lo que le sigue de matriz posterior al elemento a actualizar
   213 0000019F 4D89D0                      mov r8, r10 ; lo muevo a un reg para darle (y estar seguro de su) longitud
   214 000001A2 4C8903                      mov [rbx],r8 ;muevo el valor(de igual longitud). muevo a la posicion de la matriz a actualizar
   215                                      
   216                                      ;despues de agregar el nuevo valor, agregarle el resto de la matriz que estaba antes.
   217 000001A5 4C894B01                    mov [rbx+1],r9
   218                                  
   219                                      ;aca deberia ir lo de borrar_oficial  solo si fue turno de oficiales!
   220 000001A9 8A0425[B8010000]            mov al, [turno]
   221 000001B0 3C01                        cmp al, 1 ; =1 -> estamos en turno de soldados
   222                                      ;je fin_actualizar_tablero
   223 000001B2 0F843F050000                je validar_si_oficial_debe_comer_prox_turno ;esto deja en r13 si pueden comer.
   224                                      ;si es turno oficiales chequear si deberia borrar oficial.
   225 000001B8 E989FEFFFF                  jmp fin_actualizar_tablero
   226                                  
   227                                  validar_desatendido:
   228 000001BD 4D01EF                      add r15, r13
   229 000001C0 4983FF01                    cmp r15, 1
   230 000001C4 0F8480040000                je borrar_oficial
   231 000001CA E943FFFFFF                  jmp actualizar_tablero
   232                                  fin_validar_desatendido:
   233 000001CF E972FEFFFF                  jmp fin_actualizar_tablero
   234                                      
   235                                  pedir_casillero_origen:
   236 000001D4 4889E0                      mov rax, rsp
   237 000001D7 4883E00F                    and rax, 15
   238 000001DB 7404                        je no_restar_rsp_1
   239 000001DD 4883EC08                    sub rsp, 8
   240                                  no_restar_rsp_1:
   241 000001E1 48BF-                       mov rdi, msjIngFilaColumnaOrigen
   241 000001E3 [0000000000000000] 
   242 000001EB E8(00000000)                call printf
   243                                  
   244 000001F0 48BF-                       mov rdi, cadena      ; Dirección de 'cadena'
   244 000001F2 [0A00000000000000] 
   245 000001FA E8(00000000)                call gets
   246 000001FF 4883C408                    add rsp, 8
   247                                  
   248                                      ; Extraer el primer carácter (primer número)
   249 00000203 480FB60425-                 movzx rax, byte [cadena]     ; Cargar el primer carácter de 'cadena' en rax
   249 00000208 [0A000000]         
   250 0000020C 4883E830                    sub rax, '0'                 ; Convertir de ASCII a valor numérico
   251 00000210 880425[34000000]            mov [posx_ini], al            ; Guardar el valor en 'posx_ini'
   252                                      
   253 00000217 803C25[34000000]00          cmp byte [posx_ini], 0
   254 0000021F 0F842DFEFFFF                je fin               ; Si es 0, salta a "fin de juego"
   255                                      
   256                                      ; Extraer el segundo carácter (segundo número)
   257 00000225 480FB60425-                 movzx rax, byte [cadena + 1] ; Cargar el segundo carácter de 'cadena' en rax
   257 0000022A [0B000000]         
   258 0000022E 4883E830                    sub rax, '0'                 ; Convertir de ASCII a valor numérico
   259 00000232 880425[35000000]            mov [posy_ini], al            ; Guardar el valor en 'posy_ini'
   260                                      
   261 00000239 E9F9000000                  jmp validar_casillero_origen
   262                                      
   263                                  pedir_casillero_destino:
   264 0000023E 4883EC08                    sub rsp, 8
   265 00000242 48BF-                       mov rdi, msjIngFilaColumnaDestino
   265 00000244 [1600000000000000] 
   266 0000024C E8(00000000)                call printf
   267 00000251 4883C408                    add rsp, 8
   268                                  
   269 00000255 48BF-                       mov rdi, cadena      ; Dirección de 'cadena'
   269 00000257 [0A00000000000000] 
   270 0000025F 4883EC08                    sub rsp, 8
   271 00000263 E8(00000000)                call gets
   272 00000268 4883C408                    add rsp, 8
   273                                  
   274                                      ; Extraer el primer carácter (primer número)
   275 0000026C 480FB60425-                 movzx rax, byte [cadena]     ; Cargar el primer carácter de 'cadena' en rax
   275 00000271 [0A000000]         
   276 00000275 4883E830                    sub rax, '0'                 ; Convertir de ASCII a valor numérico
   277 00000279 880425[36000000]            mov [posx_fin], al            ; Guardar el valor en 'posx_ini'
   278                                      
   279                                      ; Extraer el segundo carácter (segundo número)
   280 00000280 480FB60425-                 movzx rax, byte [cadena + 1] ; Cargar el segundo carácter de 'cadena' en rax
   280 00000285 [0B000000]         
   281 00000289 4883E830                    sub rax, '0'                 ; Convertir de ASCII a valor numérico
   282 0000028D 880425[37000000]            mov [posy_fin], al            ; Guardar el valor en 'posy_ini'
   283 00000294 E9C8010000                  jmp es_destino_valido
   284                                      
   285                                  mostrar_jugador_actual:    
   286 00000299 4883EC08                    sub rsp, 8
   287 0000029D 48BF-                       mov rdi, esTurnoDe
   287 0000029F [4700000000000000] 
   288 000002A7 488B3425[6F000000]          mov rsi, [jugadorActual]
   289                                   
   290 000002AF E8(00000000)                call printf
   291 000002B4 4883C408                    add rsp, 8
   292 000002B8 E95BFDFFFF                  jmp pedir_movimiento
   293                                      
   294                                  actualizar_turno:
   295 000002BD 8A0425[B8010000]            mov al, [turno]
   296 000002C4 800425[B8010000]01          add byte [turno], 1
   297 000002CC 8A0425[B8010000]            mov al, [turno]
   298 000002D3 30E4                        xor ah, ah        ; Limpiar AH para asegurar que AX está correcto
   299                                  
   300                                      ; Dividir AX entre el divisor (2)
   301 000002D5 4831DB                      xor rbx, rbx        
   302 000002D8 8A1C25[B9010000]            mov bl, [divisor]
   303 000002DF F6F3                        div bl            ; AX / BL -> AL = cociente, AH = resto
   304                                  
   305                                      ; Ahora, AH contiene el resto (turno % 2)
   306 000002E1 80FC00                      cmp ah, 0         ; Compara el resto con 0
   307 000002E4 7402                        je es_par         ; Si el resto es 0, turno es par
   308 000002E6 EB1D                        jmp es_impar      ; Si no, turno es impar
   309                                  
   310                                  es_par:          
   311 000002E8 C60425[B8010000]00          mov byte[turno], 0
   312 000002F0 488D0425[5C000000]          lea rax, [oficiales]          ; Cargar la dirección de 'soldados' en AX
   313 000002F8 48890425[6F000000]          mov [jugadorActual], rax
   314 00000300 E946FDFFFF                  jmp fin_actualizar_turno
   315                                  
   316                                  es_impar:        
   317 00000305 C60425[B8010000]01          mov byte[turno], 1
   318 0000030D 488D0425[66000000]          lea rax, [soldados]          ; Cargar la dirección de 'soldados' en AX
   319 00000315 48890425[6F000000]          mov [jugadorActual], rax
   320 0000031D E929FDFFFF                  jmp fin_actualizar_turno
   321                                      
   322                                  asignar_jugador_inicial:
   323 00000322 488D0425[66000000]          lea rax, [soldados]          ; Cargar la dirección de 'soldados' en AX
   324 0000032A 48890425[6F000000]          mov [jugadorActual], rax
   325 00000332 E9D7FCFFFF                  jmp ciclo_juego
   326                                      
   327                                  validar_casillero_origen:
   328                                      ;;valido que este dentro del tablero
   329 00000337 4829C0                      sub rax, rax
   330 0000033A 4829DB                      sub rbx, rbx
   331 0000033D 8A0425[34000000]            mov al,[posx_ini]
   332 00000344 8A1C25[35000000]            mov bl,[posy_ini]
   333                                      
   334                                      validar_dentro_x:
   335 0000034B 3C01                        cmp al, 1
   336 0000034D 740E                        je validar_dentro_y
   337 0000034F 3C02                        cmp al, 2
   338 00000351 740A                        je validar_dentro_y
   339 00000353 3C06                        cmp al, 6
   340 00000355 7406                        je validar_dentro_y
   341 00000357 3C07                        cmp al, 7
   342 00000359 7402                        je validar_dentro_y
   343 0000035B EB16                        jmp dentro_tablero_origen_ok
   344                                  validar_dentro_y:
   345 0000035D 80FB01                      cmp bl, 1
   346 00000360 7475                        je origen_invalido
   347 00000362 80FB02                      cmp bl, 2
   348 00000365 7470                        je origen_invalido
   349 00000367 80FB06                      cmp bl, 6
   350 0000036A 746B                        je origen_invalido
   351 0000036C 80FB07                      cmp bl, 7
   352 0000036F 7466                        je origen_invalido
   353 00000371 EB00                        jmp dentro_tablero_origen_ok
   354                                      
   355                                  dentro_tablero_origen_ok:
   356 00000373 8A0425[B8010000]            mov al, [turno]
   357 0000037A 30E4                        xor ah, ah        ; Limpiar AH para asegurar que AX está correcto
   358                                  
   359                                      ; Dividir AX entre el divisor (2)
   360 0000037C 4831DB                      xor rbx, rbx        
   361 0000037F 8A1C25[B9010000]            mov bl, [divisor]
   362 00000386 F6F3                        div bl            ; AX / BL -> AL = cociente, AH = resto
   363                                  
   364                                      ; Ahora, AH contiene el resto (turno % 2)
   365 00000388 80FC00                      cmp ah, 0         ; Compara el resto con 0
   366 0000038B 746B                        je es_oficial_valido         ; Si el resto es 0, turno es par
   367 0000038D EB00                        jmp es_soldado_valido ; Si no, turno es impar
   368                                      
   369                                  es_soldado_valido:
   370                                  ;busco el elemento en la matriz; y lo guardo en r10 para comparar el elemento.
   371 0000038F 4829C9                      sub rcx, rcx
   372 00000392 4829C0                      sub rax, rax
   373 00000395 4829DB                      sub rbx, rbx
   374 00000398 4D29D2                      sub r10, r10
   375 0000039B 8A0425[34000000]            mov al,[posx_ini] 
   376 000003A2 41B809000000                mov r8, cantidadFilas
   377 000003A8 49F7E8                      imul r8
   378 000003AB 4801C1                      add rcx,rax
   379                                      
   380 000003AE 8A0425[35000000]            mov al,[posy_ini]
   381 000003B5 41B801000000                mov r8, longitudElemento 
   382 000003BB 49F7E8                      imul r8
   383 000003BE 4801C1                      add rcx,rax
   384                                      
   385 000003C1 48BB-                       mov rbx,matriz 
   385 000003C3 [BA01000000000000] 
   386 000003CB 4801CB                      add rbx,rcx ;me posicione en la matriz
   387                                  
   388 000003CE 4C8B13                      mov r10, [rbx] ;guardo un elemento
   389 000003D1 4180FA58                    cmp r10b, 'X'
   390 000003D5 741C                        je turno_soldado_ok
   391                                      ;sino fue un mal ingreso:
   392                                  origen_invalido:
   393 000003D7 48BF-                       mov rdi, casilleroInvalido
   393 000003D9 [7800000000000000] 
   394 000003E1 4883EC08                    sub rsp, 8
   395 000003E5 E8(00000000)                call printf
   396 000003EA 4883C408                    add rsp, 8
   397 000003EE E9E1FDFFFF                  jmp pedir_casillero_origen
   398                                  turno_soldado_ok:
   399 000003F3 E925FCFFFF                  jmp pedir_movimiento_destino
   400                                      
   401                                  es_oficial_valido:
   402                                  ;busco el elemento en la matriz; y lo guardo en r10 para comparar el elemento.
   403 000003F8 4829C9                      sub rcx, rcx
   404 000003FB 4829C0                      sub rax, rax
   405 000003FE 4829DB                      sub rbx, rbx
   406 00000401 4D29D2                      sub r10, r10
   407 00000404 8A0425[34000000]            mov al,[posx_ini] 
   408 0000040B 41B809000000                mov r8, cantidadFilas
   409 00000411 49F7E8                      imul r8
   410 00000414 4801C1                      add rcx,rax
   411                                      
   412 00000417 8A0425[35000000]            mov al,[posy_ini]
   413 0000041E 41B801000000                mov r8, longitudElemento 
   414 00000424 49F7E8                      imul r8
   415 00000427 4801C1                      add rcx,rax
   416                                      
   417 0000042A 48BB-                       mov rbx,matriz 
   417 0000042C [BA01000000000000] 
   418 00000434 4801CB                      add rbx,rcx ;me posicione en la matriz
   419                                  
   420 00000437 4C8B13                      mov r10, [rbx] ;guardo un elemento
   421                                  ;;
   422 0000043A 4180FA4F                    cmp r10b, 'O'
   423 0000043E 741C                        je turno_oficial_ok
   424                                      ;sino fue un mal ingreso:
   425 00000440 48BF-                       mov rdi, casilleroInvalido
   425 00000442 [7800000000000000] 
   426 0000044A 4883EC08                    sub rsp, 8
   427 0000044E E8(00000000)                call printf
   428 00000453 4883C408                    add rsp, 8
   429 00000457 E978FDFFFF                  jmp pedir_casillero_origen
   430                                  turno_oficial_ok:
   431 0000045C E9BCFBFFFF                  jmp pedir_movimiento_destino    
   432                                      
   433                                      
   434                                  es_destino_valido:
   435                                      ;;valido que este dentro del tablero
   436 00000461 4829C0                      sub rax, rax
   437 00000464 4829DB                      sub rbx, rbx
   438 00000467 8A0425[36000000]            mov al,[posx_fin]
   439 0000046E 8A1C25[37000000]            mov bl,[posy_fin]
   440                                      
   441                                  validar_dentro_x_fin:
   442 00000475 3C01                        cmp al, 1
   443 00000477 740E                        je validar_dentro_y_fin
   444 00000479 3C02                        cmp al, 2
   445 0000047B 740A                        je validar_dentro_y_fin
   446 0000047D 3C06                        cmp al, 6
   447 0000047F 7406                        je validar_dentro_y_fin
   448 00000481 3C07                        cmp al, 7
   449 00000483 7402                        je validar_dentro_y_fin
   450 00000485 EB16                        jmp dentro_tablero_destino_ok
   451                                  validar_dentro_y_fin:
   452 00000487 80FB01                      cmp bl, 1
   453 0000048A 7459                        je destino_invalido
   454 0000048C 80FB02                      cmp bl, 2
   455 0000048F 7454                        je destino_invalido
   456 00000491 80FB06                      cmp bl, 6
   457 00000494 744F                        je destino_invalido
   458 00000496 80FB07                      cmp bl, 7
   459 00000499 744A                        je destino_invalido
   460 0000049B EB00                        jmp dentro_tablero_destino_ok
   461                                      
   462                                  dentro_tablero_destino_ok:
   463                                  ;busco el elemento en la matriz; y lo guardo en r10 para comparar el elemento.
   464 0000049D 4829C9                      sub rcx, rcx
   465 000004A0 4829C0                      sub rax, rax
   466 000004A3 4829DB                      sub rbx, rbx
   467 000004A6 4D29D2                      sub r10, r10
   468 000004A9 8A0425[36000000]            mov al,[posx_fin] 
   469 000004B0 41B809000000                mov r8, cantidadFilas
   470 000004B6 49F7E8                      imul r8
   471 000004B9 4801C1                      add rcx,rax
   472                                      
   473 000004BC 8A0425[37000000]            mov al,[posy_fin]
   474 000004C3 41B801000000                mov r8, longitudElemento 
   475 000004C9 49F7E8                      imul r8
   476 000004CC 4801C1                      add rcx,rax
   477                                      
   478 000004CF 48BB-                       mov rbx,matriz 
   478 000004D1 [BA01000000000000] 
   479 000004D9 4801CB                      add rbx,rcx ;me posicione en la matriz
   480                                  
   481 000004DC 4C8B13                      mov r10, [rbx] ;guardo un elemento
   482                                  ;;
   483 000004DF 4180FA20                    cmp r10b, ' '
   484 000004E3 741C                        je destino_ok
   485                                      ;sino fue un mal ingreso:
   486                                  destino_invalido:
   487 000004E5 48BF-                       mov rdi, casilleroInvalido
   487 000004E7 [7800000000000000] 
   488 000004EF 4883EC08                    sub rsp, 8
   489 000004F3 E8(00000000)                call printf
   490 000004F8 4883C408                    add rsp, 8
   491 000004FC E93DFDFFFF                  jmp pedir_casillero_destino
   492                                  destino_ok:
   493 00000501 E91CFBFFFF                  jmp validar_movimiento    
   494                                  validar_movimiento_oficial:
   495 00000506 41BC00000000                mov r12,0
   496 0000050C B800000000                  mov rax,0
   497 00000511 8A0425[34000000]            mov al, [posx_ini]
   498 00000518 8A2425[36000000]            mov ah, [posx_fin]
   499 0000051F 28E0                        sub al,ah
   500                                  
   501 00000521 BA00000000                  mov rdx,0
   502 00000526 8A1425[35000000]            mov dl, [posy_ini]
   503 0000052D 8A3425[37000000]            mov dh, [posy_fin]
   504 00000534 28F2                        sub dl,dh
   505                                  
   506 00000536 3C00                        cmp al, 0
   507 00000538 7410                        je validar_movimientos_oficial_horizontal ;;listo
   508 0000053A 3C01                        cmp al, 1
   509 0000053C 7428                        je validar_movimiento_simple_oficial_arriba_abajo ;;listo
   510 0000053E 3CFF                        cmp al,-1
   511 00000540 7424                        je validar_movimiento_simple_oficial_arriba_abajo ;;listo
   512                                      
   513 00000542 3C02                        cmp al, 2
   514 00000544 7440                        je validar_movimiento_doble_oficial_superiores ;;voy a validar esto
   515 00000546 3CFE                        cmp al,-2
   516 00000548 7450                        je validar_movimiento_doble_oficial_inferiores ;;falta validar
   517                                      
   518                                  ;;esto valida OK movimientos simples y dobles horizontales (falta validar dobles horizontales)
   519                                  validar_movimientos_oficial_horizontal:
   520                                      ;;movimiento simple
   521 0000054A 80FA01                      cmp dl, 1
   522 0000054D 0F84DB000000                je movimiento_oficial_ok
   523 00000553 80FAFF                      cmp dl,-1
   524 00000556 0F84D2000000                je movimiento_oficial_ok
   525                                      ;;movimiento doble (comio)
   526 0000055C 80FA02                      cmp dl, 2
   527 0000055F 744D                        je validar_movimiento_doble_izquierda ;; aca falta validar que haya X en el medio
   528 00000561 80FAFE                      cmp dl,-2
   529 00000564 744C                        je validar_movimiento_doble_derecha ;; aca falta validar que haya X en el medio
   530                                  ;funcion ready (no necesita nada mas)
   531                                  validar_movimiento_simple_oficial_arriba_abajo:
   532                                      ;;si se movio 1 en x, solo puede ser movimiento simple
   533 00000566 80FA01                      cmp dl, 1
   534 00000569 0F84BF000000                je movimiento_oficial_ok
   535 0000056F 80FAFF                      cmp dl,-1
   536 00000572 0F84B6000000                je movimiento_oficial_ok
   537 00000578 80FA00                      cmp dl, 0
   538 0000057B 0F84AD000000                je movimiento_oficial_ok
   539 00000581 E91F010000                  jmp movimiento_oficial_invalido
   540                                  
   541                                  ;;movimientos dobles!
   542                                  validar_movimiento_doble_oficial_superiores:
   543 00000586 80FA02                      cmp dl, 2
   544 00000589 742B                        je validar_movimiento_doble_izquierda_superior
   545 0000058B 80FAFE                      cmp dl,-2
   546 0000058E 7430                        je validar_movimiento_doble_derecha_superior
   547 00000590 80FA00                      cmp dl, 0
   548 00000593 7427                        je validar_movimiento_doble_superior
   549 00000595 E90B010000                  jmp movimiento_oficial_invalido
   550                                  
   551                                  validar_movimiento_doble_oficial_inferiores:
   552 0000059A 80FA02                      cmp dl, 2
   553 0000059D 7427                        je validar_movimiento_doble_izquierda_inferior
   554 0000059F 80FAFE                      cmp dl,-2
   555 000005A2 742C                        je validar_movimiento_doble_derecha_inferior
   556 000005A4 80FA00                      cmp dl, 0
   557 000005A7 7423                        je validar_movimiento_doble_inferior
   558 000005A9 E9F7000000                  jmp movimiento_oficial_invalido
   559                                      
   560                                  ;;tengo que validar que haya una X en los movimientos dobles
   561                                  ;;voy a setear una posicion posx - posy para buscar elemento en la matriz
   562                                  ;;si hay una X efectivamente habia un soldado -> eliminar soldado -> movimiento ok!
   563                                  ;;else invalido.
   564                                  
   565                                  ;;hasta este momento en ah y dh estan los valores x y destino respectivamente
   566                                  validar_movimiento_doble_izquierda:
   567 000005AE FEC6                        inc dh
   568 000005B0 EB24                        jmp validar_habia_soldado_en_movimiento_doble
   569                                  validar_movimiento_doble_derecha:
   570 000005B2 FECE                        dec dh
   571 000005B4 EB20                        jmp validar_habia_soldado_en_movimiento_doble
   572                                  validar_movimiento_doble_izquierda_superior:
   573 000005B6 FEC6                        inc dh
   574 000005B8 FEC4                        inc ah
   575 000005BA EB1A                        jmp validar_habia_soldado_en_movimiento_doble
   576                                  validar_movimiento_doble_superior:
   577 000005BC FEC4                        inc ah
   578 000005BE EB16                        jmp validar_habia_soldado_en_movimiento_doble
   579                                  validar_movimiento_doble_derecha_superior:
   580 000005C0 FECE                        dec dh
   581 000005C2 FEC4                        inc ah
   582 000005C4 EB10                        jmp validar_habia_soldado_en_movimiento_doble
   583                                  validar_movimiento_doble_izquierda_inferior:
   584 000005C6 FEC6                        inc dh
   585 000005C8 FECC                        dec ah
   586 000005CA EB0A                        jmp validar_habia_soldado_en_movimiento_doble
   587                                  validar_movimiento_doble_inferior:
   588 000005CC FECC                        dec ah
   589 000005CE EB06                        jmp validar_habia_soldado_en_movimiento_doble
   590                                  validar_movimiento_doble_derecha_inferior:
   591 000005D0 FECE                        dec dh
   592 000005D2 FECC                        dec ah
   593 000005D4 EB00                        jmp validar_habia_soldado_en_movimiento_doble
   594                                  
   595                                  
   596                                  ;;falta estar seguro de lo que hago aca. (validar X e Y..)
   597                                  validar_habia_soldado_en_movimiento_doble:
   598                                      
   599 000005D6 4829DB                      sub rbx, rbx
   600 000005D9 88E3                        mov bl, ah      
   601 000005DB 4829C0                      sub rax, rax      
   602 000005DE 88D8                        mov al, bl
   603                                  
   604 000005E0 4829DB                      sub rbx, rbx
   605 000005E3 88F3                        mov bl, dh
   606                                                  
   607 000005E5 4829C9                      sub rcx, rcx
   608 000005E8 4829D2                      sub rdx, rdx
   609 000005EB 4D29C0                      sub r8, r8
   610 000005EE 4D29D2                      sub r10, r10
   611                                      
   612                                   
   613 000005F1 41B809000000                mov r8, cantidadFilas
   614 000005F7 49F7E8                      imul r8
   615 000005FA 4801C1                      add rcx,rax
   616                                      
   617 000005FD 88D8                        mov al, bl
   618 000005FF 41B801000000                mov r8, longitudElemento 
   619 00000605 49F7E8                      imul r8
   620 00000608 4801C1                      add rcx,rax
   621                                      
   622 0000060B 4829DB                      sub rbx, rbx   
   623 0000060E 48BB-                       mov rbx,matriz 
   623 00000610 [BA01000000000000] 
   624 00000618 4801CB                      add rbx,rcx ;me posicione en la matriz
   625                                  
   626 0000061B 4C8B13                      mov r10, [rbx] ;guardo un elemento
   627 0000061E 4180FA58                    cmp r10b, 'X'
   628 00000622 7402                        je oficial_realizo_captura
   629 00000624 EB7F                        jmp movimiento_oficial_invalido
   630                                  
   631                                  oficial_realizo_captura:
   632 00000626 41BF01000000                mov r15, 1
   633 0000062C EB00                        jmp movimiento_oficial_ok
   634                                  
   635                                  ;;fin;; validaciones terminan en estas 2 funciones.
   636                                  movimiento_oficial_ok:
   637                                      
   638 0000062E 4C8B4B01                    mov r9, [rbx+1] ;guardo en r9 lo que le sigue de matriz posterior al elemento a actualizar
   639 00000632 41B820000000                mov r8, " " ; lo muevo a un reg para darle (y estar seguro de su) longitud
   640 00000638 4C8903                      mov [rbx],r8 ;muevo el valor(de igual longitud). muevo a la posicion de la matriz a actualizar
   641                                      
   642                                      ;despues de agregar el nuevo valor, agregarle el resto de la matriz que estaba antes.
   643 0000063B 4C894B01                    mov [rbx+1],r9
   644 0000063F 41BC00000000                mov r12,0 ;si r12=0, movimiento OK
   645                                  ;si se desentendio borrar el oficial que se movio.
   646                                      ;else termina turno oficiales
   647                                  termina_turno_oficiales:
   648 00000645 E9ECF9FFFF                  jmp fin_validacion_movimiento_oficial
   649                                  borrar_oficial:
   650                                  ;voy a la posicion destino y borro el "O"
   651 0000064A 4829C9                      sub rcx, rcx
   652 0000064D 4829C0                      sub rax, rax
   653 00000650 4829DB                      sub rbx, rbx
   654 00000653 4D29D2                      sub r10, r10
   655 00000656 8A0425[34000000]            mov al,[posx_ini] ;guardo el valor de la fila, en AL(8bits) 
   656                                                      ;ya que posx es db (byte= 8bits) sino guarda cualquier cosa
   657                                  ;    sub rax,1 -> no es necesaria la resta ya que la matriz empieza en 1,1
   658 0000065D 41B809000000                mov r8, cantidadFilas
   659 00000663 49F7E8                      imul r8   ;me desplazo en la fila
   660 00000666 4801C1                      add rcx,rax
   661                                      
   662 00000669 8A0425[35000000]            mov al,[posy_ini] ;guardo el valor de la col,
   663                                  ;    sub rax,1
   664 00000670 41B801000000                mov r8, longitudElemento ;guardo en r8 para darle longitud y poder multiplicar usando imul
   665 00000676 49F7E8                      imul r8 ;me desplazo en la columna
   666 00000679 4801C1                      add rcx,rax ;sumo los desplazamientos
   667                                      
   668                                      
   669 0000067C 48BB-                       mov rbx,matriz ;pongo el pto al inicio de la matriz
   669 0000067E [BA01000000000000] 
   670 00000686 4801CB                      add rbx,rcx ;me posicione en la matriz
   671                                  
   672 00000689 4C8B13                      mov r10, [rbx] ;guardo un elemento
   673 0000068C 4C8B4B01                    mov r9, [rbx+1] ;guardo en r9 lo que le sigue de matriz posterior al elemento a actualizar
   674 00000690 41B820000000                mov r8, " " ; lo muevo a un reg para darle (y estar seguro de su) longitud
   675 00000696 4C8903                      mov [rbx],r8 ;muevo el valor(de igual longitud). muevo a la posicion de la matriz a actualizar
   676                                      
   677                                      ;despues de agregar el nuevo valor, agregarle el resto de la matriz que estaba antes.
   678 00000699 4C894B01                    mov [rbx+1],r9
   679                                      
   680 0000069D 49FFCE                      dec r14 ;descuento un oficial
   681 000006A0 E92AFBFFFF                  jmp fin_validar_desatendido
   682                                  
   683                                  movimiento_oficial_invalido:
   684 000006A5 48BF-                       mov rdi,msj_movimiento_oficial_invalido
   684 000006A7 [8D00000000000000] 
   685 000006AF 4883EC08                    sub rsp, 8
   686 000006B3 E8(00000000)                call printf
   687 000006B8 4883C408                    add rsp,8
   688                                      
   689 000006BC 41BC01000000                mov r12,1
   690 000006C2 E96FF9FFFF                  jmp fin_validacion_movimiento_oficial
   691                                  
   692                                  movimiento_soldado_invalido:
   693 000006C7 4889E0                      mov rax, rsp
   694 000006CA 4883E00F                    and rax, 15
   695 000006CE 7404                        je no_restar_rsp
   696 000006D0 4883EC08                    sub rsp, 8
   697                                  no_restar_rsp:
   698 000006D4 48BF-                       mov rdi,msj_movimiento_soldado_invalido
   698 000006D6 [C200000000000000] 
   699 000006DE E8(00000000)                call printf
   700 000006E3 4883C408                    add rsp,8
   701 000006E7 E92CF9FFFF                  jmp pedir_movimiento
   702                                  
   703                                  movimiento_soldado_valido:
   704 000006EC 41BF00000000                mov r15, 0 ;reseteo r15 antes que jueguen los oficiales
   705 000006F2 E94AF9FFFF                  jmp prox_turno
   706                                  
   707                                  validar_si_oficial_debe_comer_prox_turno:
   708                                      ;encontrar oficial_1 (solo con el desplazamiento)
   709 000006F7 4829C9                      sub rcx, rcx
   710 000006FA 4829C0                      sub rax, rax
   711 000006FD 4829DB                      sub rbx, rbx
   712 00000700 4D29D2                      sub r10, r10
   713                                      
   714 00000703 48BB-                       mov rbx,matriz ;pongo el pto al inicio de la matriz
   714 00000705 [BA01000000000000] 
   715                                  actualizo_indice:
   716 0000070D 4C8B13                      mov r10, [rbx] ;guardo el oficial_1
   717 00000710 4180FA4F                    cmp r10b, 'O'
   718 00000714 7405                        je revisar_si_oficial_puede_comer
   719 00000716 48FFC3                      inc rbx
   720 00000719 EBF2                        jmp actualizo_indice
   721                                  
   722                                  
   723                                  ;;;;;;;;aca viene lo bueno
   724                                  revisar_si_oficial_puede_comer:
   725                                      ;tengo en rbx la matriz en el indice del soldado.
   726                                  revisar_celda_derecha:
   727 0000071B 4C8B5301                    mov r10, [rbx+1]; +1 = a la derecha de la posicion actual
   728 0000071F 4180FA58                    cmp r10b, 'X'
   729 00000723 7402                        je revisar_captura_derecha
   730 00000725 EB0E                        jmp revisar_celda_abajo_derecha
   731                                  revisar_captura_derecha:
   732 00000727 4C8B5302                    mov r10, [rbx+2] ;+2 = a la derecha 2posiciones de la posicion actual
   733 0000072B 4180FA20                    cmp r10b, ' '
   734 0000072F 0F84A9000000                je oficiales_pueden_comer
   735                                  
   736                                  revisar_celda_abajo_derecha:
   737 00000735 4C8B530A                    mov r10, [rbx+10]; +10 = a la derecha abajo de la posicion actual
   738 00000739 4180FA58                    cmp r10b, 'X'
   739 0000073D 7402                        je revisar_captura_abajo_derecha
   740 0000073F EB0E                        jmp revisar_celda_abajo
   741                                  revisar_captura_abajo_derecha:
   742 00000741 4C8B5314                    mov r10, [rbx+20] ;+2 = a la derecha abajo 2posiciones de la posicion actual
   743 00000745 4180FA20                    cmp r10b, ' '
   744 00000749 0F848F000000                je oficiales_pueden_comer
   745                                  
   746                                  revisar_celda_abajo:
   747 0000074F 4C8B5309                    mov r10, [rbx+9]; +1 = abajo de la posicion actual
   748 00000753 4180FA58                    cmp r10b, 'X'
   749 00000757 7402                        je revisar_captura_abajo
   750 00000759 EB0A                        jmp revisar_celda_abajo_izquierda
   751                                  revisar_captura_abajo:
   752 0000075B 4C8B5312                    mov r10, [rbx+18] ;+2 = abajo 2posiciones de la posicion actual
   753 0000075F 4180FA20                    cmp r10b, ' '
   754 00000763 7479                        je oficiales_pueden_comer
   755                                  
   756                                  revisar_celda_abajo_izquierda:
   757 00000765 4C8B5308                    mov r10, [rbx+8]
   758 00000769 4180FA58                    cmp r10b, 'X'
   759 0000076D 7402                        je revisar_captura_abajo_izquierda
   760 0000076F EB0A                        jmp revisar_celda_izquierda
   761                                  revisar_captura_abajo_izquierda:
   762 00000771 4C8B5310                    mov r10, [rbx+16]
   763 00000775 4180FA20                    cmp r10b, ' '
   764 00000779 7463                        je oficiales_pueden_comer
   765                                  
   766                                  revisar_celda_izquierda:
   767 0000077B 4C8B53FF                    mov r10, [rbx-1]
   768 0000077F 4180FA58                    cmp r10b, 'X'
   769 00000783 7402                        je revisar_captura_izquierda
   770 00000785 EB0A                        jmp revisar_celda_arriba_izquierda
   771                                  revisar_captura_izquierda:
   772 00000787 4C8B53FE                    mov r10, [rbx-2]
   773 0000078B 4180FA20                    cmp r10b, ' '
   774 0000078F 744D                        je oficiales_pueden_comer
   775                                  
   776                                  revisar_celda_arriba_izquierda:
   777 00000791 4C8B53F6                    mov r10, [rbx-10]
   778 00000795 4180FA58                    cmp r10b, 'X'
   779 00000799 7402                        je revisar_captura_arriba_izquierda
   780 0000079B EB0A                        jmp revisar_celda_arriba
   781                                  revisar_captura_arriba_izquierda:
   782 0000079D 4C8B53EC                    mov r10, [rbx-20]
   783 000007A1 4180FA20                    cmp r10b, ' '
   784 000007A5 7437                        je oficiales_pueden_comer
   785                                  
   786                                  revisar_celda_arriba:
   787 000007A7 4C8B53F7                    mov r10, [rbx-9]
   788 000007AB 4180FA58                    cmp r10b, 'X'
   789 000007AF 7402                        je revisar_captura_arriba
   790 000007B1 EB0A                        jmp revisar_celda_arriba_derecha
   791                                  revisar_captura_arriba:
   792 000007B3 4C8B53EE                    mov r10, [rbx-18]
   793 000007B7 4180FA20                    cmp r10b, ' '
   794 000007BB 7421                        je oficiales_pueden_comer
   795                                  
   796                                  revisar_celda_arriba_derecha:
   797 000007BD 4C8B53F8                    mov r10, [rbx-8]
   798 000007C1 4180FA58                    cmp r10b, 'X'
   799 000007C5 7402                        je revisar_captura_arriba_derecha
   800 000007C7 EB0A                        jmp oficiales_no_pueden_comer ;fin de validaciones
   801                                  revisar_captura_arriba_derecha:
   802 000007C9 4C8B53F0                    mov r10, [rbx-16]
   803 000007CD 4180FA20                    cmp r10b, ' '
   804 000007D1 740B                        je oficiales_pueden_comer
   805                                  
   806                                  oficiales_no_pueden_comer:
   807 000007D3 41BD00000000                mov r13, 0 ;se resetea siempre antes que jueguen oficiales
   808 000007D9 E968F8FFFF                  jmp fin_actualizar_tablero
   809                                      
   810                                  oficiales_pueden_comer:
   811 000007DE 41BD01000000                mov r13, 1 ;se resetea siempre antes que jueguen oficiales
   812 000007E4 E95DF8FFFF                  jmp fin_actualizar_tablero
   813                                  
   814                                  verificar_ganador:
   815 000007E9 4983FE00                    cmp r14, 0
   816 000007ED 0F8495000000                je ganaron_soldados_por_falta_oficiales
   817                                  verificar_invasion:
   818 000007F3 4829C9                      sub rcx, rcx
   819 000007F6 4829C0                      sub rax, rax
   820 000007F9 4829DB                      sub rbx, rbx
   821 000007FC 4D29D2                      sub r10, r10
   822 000007FF B005                        mov al, 5
   823 00000801 41B809000000                mov r8, cantidadFilas
   824 00000807 49F7E8                      imul r8
   825 0000080A 4801C1                      add rcx,rax
   826                                      
   827 0000080D B003                        mov al, 3
   828 0000080F 41B801000000                mov r8, longitudElemento 
   829 00000815 49F7E8                      imul r8
   830 00000818 4801C1                      add rcx,rax
   831                                      
   832 0000081B 48BB-                       mov rbx,matriz 
   832 0000081D [BA01000000000000] 
   833 00000825 4801CB                      add rbx,rcx ;me posicione en la matriz
   834                                  
   835                                  ;fila_5_fortaleza
   836 00000828 4C8B13                      mov r10, [rbx] ;guardo un elemento
   837 0000082B 4180FA58                    cmp r10b, 'X'
   838 0000082F 7552                        jne no_invadieron_la_fortaleza
   839 00000831 4C8B5301                    mov r10, [rbx+1] ;guardo un elemento
   840 00000835 4180FA58                    cmp r10b, 'X'
   841 00000839 7548                        jne no_invadieron_la_fortaleza
   842 0000083B 4C8B5302                    mov r10, [rbx+2] ;guardo un elemento
   843 0000083F 4180FA58                    cmp r10b, 'X'
   844 00000843 753E                        jne no_invadieron_la_fortaleza
   845                                  ;fila_6_fortaleza
   846 00000845 4C8B5309                    mov r10, [rbx+9] ;guardo un elemento
   847 00000849 4180FA58                    cmp r10b, 'X'
   848 0000084D 7534                        jne no_invadieron_la_fortaleza
   849 0000084F 4C8B530A                    mov r10, [rbx+10] ;guardo un elemento
   850 00000853 4180FA58                    cmp r10b, 'X'
   851 00000857 752A                        jne no_invadieron_la_fortaleza
   852 00000859 4C8B530B                    mov r10, [rbx+11] ;guardo un elemento
   853 0000085D 4180FA58                    cmp r10b, 'X'
   854 00000861 7520                        jne no_invadieron_la_fortaleza
   855                                  ;fila_7_fortaleza
   856 00000863 4C8B5312                    mov r10, [rbx+18] ;guardo un elemento
   857 00000867 4180FA58                    cmp r10b, 'X'
   858 0000086B 7516                        jne no_invadieron_la_fortaleza
   859 0000086D 4C8B5313                    mov r10, [rbx+19] ;guardo un elemento
   860 00000871 4180FA58                    cmp r10b, 'X'
   861 00000875 750C                        jne no_invadieron_la_fortaleza
   862 00000877 4C8B5314                    mov r10, [rbx+20] ;guardo un elemento
   863 0000087B 4180FA58                    cmp r10b, 'X'
   864 0000087F 7502                        jne no_invadieron_la_fortaleza
   865                                  
   866 00000881 EB26                        jmp ganaron_soldados_por_invasion
   867                                      
   868                                  no_invadieron_la_fortaleza:
   869 00000883 E9C8F7FFFF                  jmp fin_verificar_ganador
   870                                  
   871                                  ganaron_soldados_por_falta_oficiales:
   872 00000888 E8E3F7FFFF                  call mostrar_tablero
   873 0000088D 48BF-                       mov rdi,msj_ganaron_soldados_por_falta_oficiales
   873 0000088F [F700000000000000] 
   874 00000897 4883EC08                    sub rsp, 8
   875 0000089B E8(00000000)                call printf
   876 000008A0 4883C408                    add rsp,8
   877 000008A4 E9A9F7FFFF                  jmp fin
   878                                  
   879                                  ganaron_soldados_por_invasion:
   880 000008A9 E8C2F7FFFF                  call mostrar_tablero
   881 000008AE 48BF-                       mov rdi,msj_ganaron_soldados_por_invasion
   881 000008B0 [4501000000000000] 
   882 000008B8 4883EC08                    sub rsp, 8
   883 000008BC E8(00000000)                call printf
   884 000008C1 4883C408                    add rsp,8
   885 000008C5 E988F7FFFF                  jmp fin
   886                                  
   887                                  
   888                                  
   889                                  validar_movimiento_soldado:
   890 000008CA B800000000                  mov rax,0
   891                                      
   892 000008CF 8A0425[36000000]            mov al, [posx_fin]
   893 000008D6 8A2425[34000000]            mov ah, [posx_ini]
   894 000008DD 28E0                        sub al, ah
   895                                  
   896 000008DF 3C00                        cmp al, 0
   897 000008E1 7415                        je validar_movimiento_soldado_horizontal
   898 000008E3 3CFF                        cmp al,-1 
   899 000008E5 0F84D6000000                je validar_movimiento_soldado_arriba
   900 000008EB 3C01                        cmp al, 1
   901 000008ED 0F845C010000                je validar_movimiento_soldado_abajo
   902 000008F3 E9CFFDFFFF                  jmp movimiento_soldado_invalido
   903                                      
   904                                  ;fn terminada
   905                                  validar_movimiento_soldado_horizontal:
   906 000008F8 B800000000                  mov rax,0
   907 000008FD 8A0425[34000000]            mov al, [posx_ini]
   908                                  
   909 00000904 3C07                        cmp al, 7
   910 00000906 740D                        je validar_movimiento_soldado_horizontal_fila_siete_seis
   911 00000908 3C06                        cmp al, 6
   912 0000090A 7409                        je validar_movimiento_soldado_horizontal_fila_siete_seis
   913 0000090C 3C05                        cmp al, 5
   914 0000090E 7451                        je validar_movimiento_soldado_horizontal_fila_cinco
   915                                  
   916 00000910 E9B2FDFFFF                  jmp movimiento_soldado_invalido
   917                                  
   918                                  ;fn terminada
   919                                  validar_movimiento_soldado_horizontal_fila_siete_seis:
   920 00000915 BA00000000                  mov rdx,0
   921 0000091A 8A1425[35000000]            mov dl, [posy_ini]
   922 00000921 8A3425[37000000]            mov dh, [posy_fin]
   923                                  
   924 00000928 80FA03                      cmp dl, 3
   925 0000092B 740F                        je validar_movimiento_soldado_horizontal_columna_tres_cinco
   926 0000092D 80FA04                      cmp dl, 4
   927 00000930 7418                        je validar_movimiento_soldado_horizontal_columna_cuatro
   928 00000932 80FA05                      cmp dl, 5
   929 00000935 7405                        je validar_movimiento_soldado_horizontal_columna_tres_cinco
   930 00000937 E98BFDFFFF                  jmp movimiento_soldado_invalido
   931                                  
   932                                  validar_movimiento_soldado_horizontal_columna_tres_cinco:
   933 0000093C 80FE04                      cmp dh, 4
   934 0000093F 0F84A7FDFFFF                je movimiento_soldado_valido
   935 00000945 E97DFDFFFF                  jmp movimiento_soldado_invalido
   936                                  
   937                                  validar_movimiento_soldado_horizontal_columna_cuatro:
   938 0000094A 80FE03                      cmp dh, 3
   939 0000094D 0F8499FDFFFF                je movimiento_soldado_valido
   940 00000953 80FE05                      cmp dh, 5
   941 00000956 0F8490FDFFFF                je movimiento_soldado_valido
   942 0000095C E966FDFFFF                  jmp movimiento_soldado_invalido
   943                                  
   944                                  validar_movimiento_soldado_horizontal_fila_cinco:
   945 00000961 BA00000000                  mov rdx,0
   946 00000966 8A1425[35000000]            mov dl, [posy_ini]
   947 0000096D 8A3425[37000000]            mov dh, [posy_fin]
   948                                      
   949 00000974 80FA03                      cmp dl, 3
   950 00000977 7E0F                        jle movimiento_soldado_derecha
   951 00000979 80FA04                      cmp dl, 4
   952 0000097C 742A                        je movimiento_soldado_derecha_izquierda
   953 0000097E 80FA07                      cmp dl, 7
   954 00000981 7E15                        jle movimiento_soldado_izquierda
   955 00000983 E93FFDFFFF                  jmp movimiento_soldado_invalido
   956                                  
   957                                  movimiento_soldado_derecha:
   958 00000988 28D6                        sub dh,dl
   959 0000098A 80FE01                      cmp dh, 1
   960 0000098D 0F8459FDFFFF                je movimiento_soldado_valido
   961 00000993 E92FFDFFFF                  jmp movimiento_soldado_invalido
   962                                  
   963                                  movimiento_soldado_izquierda:
   964 00000998 28D6                        sub dh,dl
   965 0000099A 80FEFF                      cmp dh,-1
   966 0000099D 0F8449FDFFFF                je movimiento_soldado_valido
   967 000009A3 E91FFDFFFF                  jmp movimiento_soldado_invalido
   968                                  
   969                                  movimiento_soldado_derecha_izquierda:
   970 000009A8 28D6                        sub dh,dl
   971 000009AA 80FEFF                      cmp dh,-1
   972 000009AD 0F8439FDFFFF                je movimiento_soldado_valido
   973 000009B3 80FE01                      cmp dh, 1
   974 000009B6 0F8430FDFFFF                je movimiento_soldado_valido
   975 000009BC E906FDFFFF                  jmp movimiento_soldado_invalido
   976                                  
   977                                  ;;fin validar movimientos horizontales
   978                                  validar_movimiento_soldado_arriba:
   979 000009C1 B800000000                  mov rax,0
   980 000009C6 8A0425[34000000]            mov al, [posx_ini]
   981                                      
   982 000009CD 3C06                        cmp al, 6
   983 000009CF 7409                        je validar_movimiento_soldado_arriba_en_fortaleza
   984 000009D1 3C07                        cmp al, 7
   985 000009D3 7405                        je validar_movimiento_soldado_arriba_en_fortaleza
   986 000009D5 E9EDFCFFFF                  jmp movimiento_soldado_invalido
   987                                  
   988                                  validar_movimiento_soldado_arriba_en_fortaleza:
   989 000009DA BA00000000                  mov rdx,0
   990 000009DF 8A1425[35000000]            mov dl, [posy_ini]
   991 000009E6 8A3425[37000000]            mov dh, [posy_fin]
   992                                  
   993 000009ED 80FA03                      cmp dl, 3
   994 000009F0 740F                        je validar_movimiento_soldado_arriba_en_fortaleza_columna_tres
   995 000009F2 80FA04                      cmp dl, 4
   996 000009F5 7421                        je validar_movimiento_soldado_arriba_en_fortaleza_columna_cuatro
   997 000009F7 80FA05                      cmp dl, 5
   998 000009FA 743C                        je validar_movimiento_soldado_arriba_en_fortaleza_columna_cinco
   999 000009FC E9C6FCFFFF                  jmp movimiento_soldado_invalido
  1000                                  
  1001                                  validar_movimiento_soldado_arriba_en_fortaleza_columna_tres:
  1002 00000A01 80FE03                      cmp dh, 3
  1003 00000A04 0F84E2FCFFFF                je movimiento_soldado_valido
  1004 00000A0A 80FE04                      cmp dh, 4
  1005 00000A0D 0F84D9FCFFFF                je movimiento_soldado_valido
  1006 00000A13 E9AFFCFFFF                  jmp movimiento_soldado_invalido
  1007                                  
  1008                                  validar_movimiento_soldado_arriba_en_fortaleza_columna_cuatro:
  1009 00000A18 80FE03                      cmp dh, 3
  1010 00000A1B 0F84CBFCFFFF                je movimiento_soldado_valido
  1011 00000A21 80FE04                      cmp dh, 4
  1012 00000A24 0F84C2FCFFFF                je movimiento_soldado_valido
  1013 00000A2A 80FE05                      cmp dh, 5
  1014 00000A2D 0F84B9FCFFFF                je movimiento_soldado_valido
  1015 00000A33 E98FFCFFFF                  jmp movimiento_soldado_invalido
  1016                                  
  1017                                  validar_movimiento_soldado_arriba_en_fortaleza_columna_cinco:
  1018 00000A38 80FE04                      cmp dh, 4
  1019 00000A3B 0F84ABFCFFFF                je movimiento_soldado_valido
  1020 00000A41 80FE05                      cmp dh, 5
  1021 00000A44 0F84A2FCFFFF                je movimiento_soldado_valido
  1022 00000A4A E978FCFFFF                  jmp movimiento_soldado_invalido
  1023                                  
  1024                                  validar_movimiento_soldado_abajo:
  1025 00000A4F BA00000000                  mov rdx,0
  1026 00000A54 8A1425[35000000]            mov dl, [posy_ini]
  1027 00000A5B 8A3425[37000000]            mov dh, [posy_fin]
  1028                                      
  1029 00000A62 28D6                        sub dh, dl
  1030 00000A64 80FEFF                      cmp dh,-1
  1031 00000A67 0F847FFCFFFF                je movimiento_soldado_valido
  1032 00000A6D 80FE00                      cmp dh, 0
  1033 00000A70 0F8476FCFFFF                je movimiento_soldado_valido
  1034 00000A76 80FE01                      cmp dh, 1
  1035 00000A79 0F846DFCFFFF                je movimiento_soldado_valido
  1036 00000A7F E943FCFFFF                  jmp movimiento_soldado_invalido
  1037                                  
  1038                                  ;;fin validar_movimiento_soldado
  1039 00000A84 E9B8F5FFFF                  jmp prox_turno
