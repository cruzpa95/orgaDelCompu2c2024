     1                                  global	main
     2                                  extern 	printf
     3                                  extern  gets
     4                                  
     5                                  extern  system
     6                                  
     7                                  section .data
     8 00000000 496E6772657365204F-         msjIngFilaColumnaOrigen	db	'Ingrese Origen (0 para finalizar) [XY]: ',0
     8 00000009 726967656E20283020-
     8 00000012 706172612066696E61-
     8 0000001B 6C697A617229205B58-
     8 00000024 595D3A2000         
     9 00000029 496E67726573652044-         msjIngFilaColumnaDestino	db	'Ingrese Destino [XY]: ',0
     9 00000032 657374696E6F205B58-
     9 0000003B 595D3A2000         
    10                                  
    11 00000040 4573207475726E6F20-         esTurnoDe	db	'Es turno de los %s!',10,0
    11 00000049 6465206C6F73202573-
    11 00000052 210A00             
    12 00000055 6F66696369616C6573-         oficiales   db 'oficiales',0
    12 0000005E 00                 
    13 0000005F 736F6C6461646F7300          soldados    db 'soldados',0
    14 00000068 736F6C6461646F7300          jugadorActual db 'soldados',0
    15 00000071 636173696C6C65726F-         casilleroInvalido db 'casillero invalido!',10,0
    15 0000007A 20696E76616C69646F-
    15 00000083 210A00             
    16 00000086 6D6F76696D69656E74-         msj_movimiento_oficial_invalido db 'movimiento de oficial invalido! Vuelva a intentarlo',10,0
    16 0000008F 6F206465206F666963-
    16 00000098 69616C20696E76616C-
    16 000000A1 69646F21205675656C-
    16 000000AA 7661206120696E7465-
    16 000000B3 6E7461726C6F0A00   
    17 000000BB 6D6F76696D69656E74-         msj_movimiento_soldado_invalido db 'movimiento de soldado invalido! Vuelva a intentarlo',10,0
    17 000000C4 6F20646520736F6C64-
    17 000000CD 61646F20696E76616C-
    17 000000D6 69646F21205675656C-
    17 000000DF 7661206120696E7465-
    17 000000E8 6E7461726C6F0A00   
    18                                  
    19 000000F0 6C6F73206F66696369-         msj_movimiento_oficial_desatendido db 'los oficiales no cumplieron con su deber! Se retira el oficial que no capturo.',10,0
    19 000000F9 616C6573206E6F2063-
    19 00000102 756D706C6965726F6E-
    19 0000010B 20636F6E2073752064-
    19 00000114 656265722120536520-
    19 0000011D 72657469726120656C-
    19 00000126 206F66696369616C20-
    19 0000012F 717565206E6F206361-
    19 00000138 707475726F2E0A00   
    20                                  
    21 00000140 47616E61726F6E206C-         msj_ganaron_soldados_por_falta_oficiales db 'Ganaron los soldados, no hay mas oficiales que puedan defender la fortaleza!',10,0
    21 00000149 6F7320736F6C646164-
    21 00000152 6F732C206E6F206861-
    21 0000015B 79206D6173206F6669-
    21 00000164 6369616C6573207175-
    21 0000016D 652070756564616E20-
    21 00000176 646566656E64657220-
    21 0000017F 6C6120666F7274616C-
    21 00000188 657A61210A00       
    22 0000018E 47616E61726F6E206C-         msj_ganaron_soldados_por_invasion db 'Ganaron los soldados, invadieron la fortaleza!',10,0
    22 00000197 6F7320736F6C646164-
    22 000001A0 6F732C20696E766164-
    22 000001A9 6965726F6E206C6120-
    22 000001B2 666F7274616C657A61-
    22 000001BB 210A00             
    23 000001BE 47616E61726F6E206C-         msj_ganaron_oficiales_por_falta_soldados db 'Ganaron los oficiales, ya no quedan mas soldados!',10,0
    23 000001C7 6F73206F6669636961-
    23 000001D0 6C65732C207961206E-
    23 000001D9 6F2071756564616E20-
    23 000001E2 6D617320736F6C6461-
    23 000001EB 646F73210A00       
    24                                  
    25 000001F1 46696E2064656C206A-         endGame    db 'Fin del juego!',10,0
    25 000001FA 7565676F210A00     
    26 00000201 636C65617200                cmd_clear db "clear",0
    27 00000207 7E3132333435363700          matriz  db '~1234567',0
    28 00000210 317E7C5858587C7E00                  db '1~|XXX|~',0
    29 00000219 327E7C5858587C7E00                  db '2~|XXX|~',0
    30 00000222 335858585858585800                  db '3XXXXXXX',0
    31 0000022B 345858585858585800                  db '4XXXXXXX',0
    32 00000234 355858202020585800                  db '5XX   XX',0
    33 0000023D 367E7C20204F7C7E00                  db '6~|  O|~',0
    34 00000246 377E7C4F20207C7E00                  db '7~|O  |~',0
    35 0000024F 2D2D2D2D2D2D2D2D00                  db '--------',0
    36                                              
    37 00000258 01                          turno db 1
    38 00000259 02                          divisor db 2 
    39                                      
    40 0000025A 0A00                        saltoLinea  db 10, 0     ; Salto de lÃ­nea al final de cada fila     
    41 0000025C 00                          posicion    db 0
    42                                  
    43                                      longitudElemento equ	1
    44                                      cantidadColumnas equ 8
    45                                      cantidadFilas    equ	9
    46                                      
    47 0000025D 01                          posx_ini db 1
    48 0000025E 01                          posy_ini db 1
    49                                      
    50 0000025F 01                          posx_fin db 1
    51 00000260 01                          posy_fin db 1
    52                                  
    53                                  section .bss    
    54 00000000 ????                        cadena resb 2
    55                                  
    56                                  section .text
    57                                  main:
    58 00000000 4889E5                      mov rbp, rsp; for correct debugging
    59 00000003 41BB00000000                mov r11, 0 ;seteo flag de que no eliminaron oficiales
    60 00000009 4153                        push r11   ;lo guardo porque el r11 se pisa en algunas funciones.
    61 0000000B 41BE02000000                mov r14, 2 ;seteo cantidad de oficiales.
    62 00000011 E937030000                  jmp asignar_jugador_inicial
    63                                  ciclo_juego:
    64 00000016 E857000000                  call mostrar_tablero
    65 0000001B E983020000                  jmp mostrar_jugador_actual
    66                                  pedir_movimiento:
    67 00000020 E9B9010000                  jmp pedir_casillero_origen
    68                                  pedir_movimiento_destino:
    69 00000025 E91E020000                  jmp pedir_casillero_destino
    70                                  validar_movimiento:
    71 0000002A 8A0425[58020000]            mov al, [turno]
    72 00000031 3C01                        cmp al, 1
    73 00000033 0F8473090000                je validar_movimiento_soldado
    74 00000039 E9F3040000                  jmp validar_movimiento_oficial ;hace esto solo si es el turno del oficial.
    75                                  fin_validacion_movimiento_oficial:
    76 0000003E 4983FC00                    cmp r12, 0                  ; Si la validacion esta mal -> r12 != 0 -> volver a pedir origen-destin0
    77 00000042 75DC                        jne pedir_movimiento         ; Si no es 0 -> back to pedir_movimiento
    78 00000044 E976010000                  jmp validar_desatendido     ;si el movimiento esta oka, valida que no haya desatendidos
    79                                  ;preparo proximo turno.
    80                                  prox_turno:
    81 00000049 E9C6000000                  jmp actualizar_tablero
    82                                  fin_actualizar_tablero:
    83 0000004E E995020000                  jmp actualizar_turno
    84                                  fin_actualizar_turno:
    85 00000053 E9F8070000                  jmp verificar_ganador
    86                                  fin_verificar_ganador:
    87 00000058 EBBC                        jmp ciclo_juego      ;Repite el bucle principal del juego.
    88                                          
    89                                  fin:
    90 0000005A 48BF-                       mov rdi, endGame
    90 0000005C [F101000000000000] 
    91 00000064 4883EC08                    sub rsp, 8
    92 00000068 E8(00000000)                call printf
    93 0000006D 4883C408                    add rsp,8
    94 00000071 C3                          ret
    95                                  
    96                                  mostrar_tablero:
    97                                  ;clear_screen:
    98 00000072 4889E0                      mov rax, rsp
    99 00000075 4883E00F                    and rax, 15
   100 00000079 7419                        je no_restar_rsp_3
   101                                      ;aca al hacer un call a funciones, el rsp no quedaba bien y el ret volvio a cualquier lado o rompia
   102                                      ;por lo tanto tenia que verificar que el rsp sea multiplo de 16 antes de restar.
   103                                      ;se decidio eliminar los calls a funciones que se llaman una sola vez y algunos "no_restar_rsp" quedaron en el codigo.
   104 0000007B 4883EC08                    sub rsp, 8
   105 0000007F 48BF-                       mov rdi, cmd_clear
   105 00000081 [0102000000000000] 
   106 00000089 E8(00000000)                call system
   107 0000008E 4883C408                    add rsp, 8
   108 00000092 EB0F                        jmp saltar_a_mostrar_tablero
   109                                  no_restar_rsp_3:
   110 00000094 48BF-                       mov rdi, cmd_clear
   110 00000096 [0102000000000000] 
   111 0000009E E8(00000000)                call system
   112                                  saltar_a_mostrar_tablero:
   113 000000A3 B800000000                  mov rax, 0
   114 000000A8 48890425[5C020000]          mov [posicion], rax 
   115 000000B0 B908000000                  mov rcx, cantidadColumnas
   116 000000B5 4883EC08                    sub rsp, 8
   117                                      fila_loop:
   118 000000B9 51                              push rcx ;es necesario para loop, sino el registro rcx se pisa y loopea infinito
   119                                          ; Carga la direcciÃ³n de la fila actual en la matriz e imprime la fila
   120 000000BA 48BF-                           mov rdi, matriz
   120 000000BC [0702000000000000] 
   121 000000C4 48033C25[5C020000]              add rdi, [posicion]
   122 000000CC 4829C0                          sub rax, rax           ; Limpia rax para printf, evita seg fault
   123 000000CF E8(00000000)                    call printf
   124                                          ; Imprime salto de lÃ­nea despuÃ©s de cada fila
   125 000000D4 48BF-                           mov rdi, saltoLinea
   125 000000D6 [5A02000000000000] 
   126 000000DE 4831C0                          xor rax, rax           ; Limpia rax para printf, evita seg fault
   127 000000E1 E8(00000000)                    call printf
   128 000000E6 59                              pop rcx ;es necesario para loop, sino el registro rcx se pisa y loopea infinito
   129                                          
   130 000000E7 488B0425[5C020000]              mov rax, [posicion]         
   131 000000EF 4883C009                        add rax, cantidadFilas
   132 000000F3 48890425[5C020000]              mov [posicion], rax         ; posicion apunta a la siguiente fila
   133                                          
   134 000000FB E2BC                            loop fila_loop
   135                                          
   136 000000FD 48BF-                           mov rdi, saltoLinea
   136 000000FF [5A02000000000000] 
   137 00000107 4831C0                          xor rax, rax           ; Limpia rax para printf, evita seg fault
   138 0000010A E8(00000000)                    call printf
   139 0000010F 4883C408                        add rsp, 8
   140 00000113 C3                              ret
   141                                  
   142                                  actualizar_tablero:
   143                                      ;Posicionamiento en el elemento i,j de una matriz
   144                                      ;(i-1)*longitudFila + (j-1)*longitudElemento
   145                                      ;longitdFila= longitudElemento*cantidadColumnas
   146 00000114 4829C9                      sub rcx, rcx
   147 00000117 4829C0                      sub rax, rax
   148 0000011A 4829DB                      sub rbx, rbx
   149 0000011D 4D29D2                      sub r10, r10
   150 00000120 8A0425[5D020000]            mov al,[posx_ini] ;guardo el valor de la fila, en AL(8bits) 
   151                                                      ;ya que posx es db (byte= 8bits) sino guarda mal
   152                                  ;    sub rax,1 -> no es necesaria la resta ya que la matriz empieza en 1,1
   153 00000127 41B809000000                mov r8, cantidadFilas
   154 0000012D 49F7E8                      imul r8   ;me desplazo en la fila
   155 00000130 4801C1                      add rcx,rax
   156                                      
   157 00000133 8A0425[5E020000]            mov al,[posy_ini] ;guardo el valor de la col,
   158                                  ;    sub rax,1 -> no es necesaria la resta ya que la matriz empieza en 1,1
   159 0000013A 41B801000000                mov r8, longitudElemento ;guardo en r8 para darle longitud y poder multiplicar usando imul
   160 00000140 49F7E8                      imul r8 ;me desplazo en la columna
   161 00000143 4801C1                      add rcx,rax ;sumo los desplazamientos
   162                                      
   163                                      
   164 00000146 48BB-                       mov rbx,matriz ;pongo el pto al inicio de la matriz
   164 00000148 [0702000000000000] 
   165 00000150 4801CB                      add rbx,rcx ;me posicione en la matriz
   166                                  
   167 00000153 4C8B13                      mov r10, [rbx] ;guardo un elemento
   168 00000156 4C8B4B01                    mov r9, [rbx+1] ;guardo en r9 lo que le sigue de matriz posterior al elemento a actualizar
   169 0000015A 41B820000000                mov r8, " " ; lo muevo a un reg para darle (y estar seguro de su) longitud
   170 00000160 4C8903                      mov [rbx],r8 ;muevo el valor(de igual longitud). muevo a la posicion de la matriz a actualizar (guardo un " " en el origen ya que el elemento se va del origen)
   171                                      
   172                                      ;despues de agregar el nuevo valor, agregarle el resto de la matriz que estaba antes.
   173 00000163 4C894B01                    mov [rbx+1],r9
   174                                      
   175                                      
   176                                      ;;repito con casillero_destino
   177                                      ;;y guardo en el destino lo que guarde en r10 (el elemento origen)
   178                                      
   179                                      
   180                                      ;Posicionamiento en el elemento i,j de una matriz
   181                                      ;(i-1)*longitudFila + (j-1)*longitudElemento
   182                                      ;longitdFila= longitudElemento*cantidadColumnas
   183 00000167 4829C9                      sub rcx, rcx
   184 0000016A 8A0425[5F020000]            mov al,[posx_fin] ;guardo el valor de la fila, en AL(8bits) 
   185                                                      ;ya que posx es db (byte= 8bits) sino guarda cualquier cosa
   186                                  ;    sub rax,1 -> no es necesaria la resta ya que la matriz empieza en 1,1
   187 00000171 41B809000000                mov r8, cantidadFilas
   188 00000177 49F7E8                      imul r8   ;me desplazo en la fila
   189 0000017A 4801C1                      add rcx,rax
   190                                      
   191 0000017D 8A0425[60020000]            mov al,[posy_fin] ;guardo el valor de la col,
   192                                  ;    sub rax,1 -> no es necesaria la resta ya que la matriz empieza en 1,1
   193 00000184 41B801000000                mov r8, longitudElemento ;guardo en r8 para darle longitud y poder multiplicar usando imul
   194 0000018A 49F7E8                      imul r8 ;me desplazo en la columna
   195 0000018D 4801C1                      add rcx,rax ;sumo los desplazamientos
   196                                      
   197                                      
   198 00000190 48BB-                       mov rbx,matriz ;pongo el pto al inicio de la matriz
   198 00000192 [0702000000000000] 
   199 0000019A 4801CB                      add rbx,rcx ;me posicione en la matriz
   200                                  
   201 0000019D 4C8B4B01                    mov r9, [rbx+1] ;guardo en r9 lo que le sigue de matriz posterior al elemento a actualizar
   202 000001A1 4D89D0                      mov r8, r10 ; lo muevo a un reg para darle (y estar seguro de su) longitud
   203 000001A4 4C8903                      mov [rbx],r8 ;muevo el valor(de igual longitud). muevo a la posicion de la matriz a actualizar (el elemento origen se guarda en el casillero destino)
   204                                      
   205                                      ;despues de agregar el nuevo valor, agregarle el resto de la matriz que estaba antes.
   206 000001A7 4C894B01                    mov [rbx+1],r9
   207                                  
   208                                      ;logica de borrar_oficial solo si fue turno de oficiales!
   209 000001AB 8A0425[58020000]            mov al, [turno]
   210 000001B2 3C01                        cmp al, 1 ; =1 -> estamos en turno de soldados
   211 000001B4 0F847B050000                je validar_si_oficial_debe_comer_prox_turno ;esto deja en r13: 1 si pueden comer, 0 si no pueden comer.
   212 000001BA E98FFEFFFF                  jmp fin_actualizar_tablero
   213                                  
   214                                  validar_desatendido:
   215                                      ;r15 
   216                                          ;1 si oficial capturo en el turno en curso, 
   217                                          ;0 si oficial no capturo
   218                                      ;r13
   219                                          ;1 si oficiales podian capturar
   220                                          ;0 si oficiales no podian capturar
   221                                      ;r13+r15
   222                                      ;0+0=0       ok -> no hay desatendidos 
   223                                      ;0+1=1       eliminar oficial -> solo en este caso se borrara el oficial que se movio y no capturo.
   224                                      ;1+0=1       no deberia darse nunca este caso, ya que no podian capturar
   225                                      ;1+1=2       ok -> no hay desatendidos
   226                                  
   227 000001BF 4D01EF                      add r15, r13
   228 000001C2 4983FF01                    cmp r15, 1
   229 000001C6 0F84AC040000                je borrar_oficial
   230 000001CC 41BB00000000                mov r11, 0 ;reseteo r11, indicador de que eliminaron un oficial ya que no lo hicieron este turno.
   231 000001D2 4153                        push r11
   232 000001D4 E93BFFFFFF                  jmp actualizar_tablero  ;como no borra oficiales, tiene que actualizar el tablero (mover el elemento origen a destino, en este caso al oficial)
   233                                  fin_validar_desatendido:
   234 000001D9 E970FEFFFF                  jmp fin_actualizar_tablero ;luego de borrar no necesita actualizar tablero, ya que borrar_oficial cumple esa funcion
   235                                      
   236                                  pedir_casillero_origen:
   237 000001DE 4889E0                      mov rax, rsp
   238 000001E1 4883E00F                    and rax, 15
   239 000001E5 7404                        je no_restar_rsp_1
   240 000001E7 4883EC08                    sub rsp, 8
   241                                  no_restar_rsp_1:
   242 000001EB 48BF-                       mov rdi, msjIngFilaColumnaOrigen
   242 000001ED [0000000000000000] 
   243 000001F5 E8(00000000)                call printf
   244 000001FA 48BF-                       mov rdi, cadena
   244 000001FC [0000000000000000] 
   245 00000204 E8(00000000)                call gets
   246 00000209 4883C408                    add rsp, 8
   247                                  
   248                                      ; Extraer el primer carÃ¡cter (primer nÃºmero)
   249 0000020D 480FB60425-                 movzx rax, byte [cadena]     ; Cargar el primer carÃ¡cter (8bits) de 'cadena' en rax y completa rax con 0 (menos el bit menos significativo).
   249 00000212 [00000000]         
   250 00000216 4883E830                    sub rax, '0'                 ; Convertir de ASCII a valor numÃ©rico
   251 0000021A 880425[5D020000]            mov [posx_ini], al           ; Guardar el valor en 'posx_ini'
   252                                      
   253 00000221 803C25[5D020000]00          cmp byte [posx_ini], 0
   254 00000229 0F842BFEFFFF                je fin               ; Si es 0, salta a "fin de juego"
   255                                      
   256                                      ; Extraer el segundo carÃ¡cter (segundo nÃºmero)
   257 0000022F 480FB60425-                 movzx rax, byte [cadena + 1] ; Cargar el segundo carÃ¡cter de 'cadena' en rax
   257 00000234 [01000000]         
   258 00000238 4883E830                    sub rax, '0'                 ; Convertir de ASCII a valor numÃ©rico
   259 0000023C 880425[5E020000]            mov [posy_ini], al           ; Guardar el valor en 'posy_ini'
   260                                      
   261 00000243 E91A010000                  jmp validar_casillero_origen
   262                                      
   263                                  pedir_casillero_destino:
   264 00000248 4883EC08                    sub rsp, 8
   265 0000024C 48BF-                       mov rdi, msjIngFilaColumnaDestino
   265 0000024E [2900000000000000] 
   266 00000256 E8(00000000)                call printf
   267 0000025B 4883C408                    add rsp, 8
   268                                  
   269 0000025F 48BF-                       mov rdi, cadena
   269 00000261 [0000000000000000] 
   270 00000269 4883EC08                    sub rsp, 8
   271 0000026D E8(00000000)                call gets
   272 00000272 4883C408                    add rsp, 8
   273                                  
   274                                      ; Extraer el primer carÃ¡cter (primer nÃºmero)
   275 00000276 480FB60425-                 movzx rax, byte [cadena]     ; Cargar el primer carÃ¡cter de 'cadena' en rax
   275 0000027B [00000000]         
   276 0000027F 4883E830                    sub rax, '0'                 ; Convertir de ASCII a valor numÃ©rico
   277 00000283 880425[5F020000]            mov [posx_fin], al            ; Guardar el valor en 'posx_ini'
   278                                      
   279                                      ; Extraer el segundo carÃ¡cter (segundo nÃºmero)
   280 0000028A 480FB60425-                 movzx rax, byte [cadena + 1] ; Cargar el segundo carÃ¡cter de 'cadena' en rax
   280 0000028F [01000000]         
   281 00000293 4883E830                    sub rax, '0'                 ; Convertir de ASCII a valor numÃ©rico
   282 00000297 880425[60020000]            mov [posy_fin], al            ; Guardar el valor en 'posy_ini'
   283 0000029E E9E9010000                  jmp es_destino_valido
   284                                      
   285                                  mostrar_jugador_actual:
   286 000002A3 415B                        pop r11     
   287 000002A5 4983FB01                    cmp r11, 1  ;si r11=1 -> en el turno anterior se elimino a un oficial.
   288 000002A9 7424                        je mostrar_eliminacion_de_oficial ;imprime mensaje
   289                                  fin_mostrar_eliminacion_de_oficial:
   290                                      ;mostrar de quien es el turno
   291 000002AB 4883EC08                    sub rsp, 8
   292 000002AF 48BF-                       mov rdi, esTurnoDe
   292 000002B1 [4000000000000000] 
   293 000002B9 488B3425[68000000]          mov rsi, [jugadorActual]
   294 000002C1 E8(00000000)                call printf
   295 000002C6 4883C408                    add rsp, 8
   296 000002CA E951FDFFFF                  jmp pedir_movimiento
   297                                      
   298                                  mostrar_eliminacion_de_oficial:
   299 000002CF 4883EC08                    sub rsp, 8
   300 000002D3 48BF-                       mov rdi, msj_movimiento_oficial_desatendido
   300 000002D5 [F000000000000000] 
   301 000002DD E8(00000000)                call printf
   302 000002E2 4883C408                    add rsp, 8
   303 000002E6 EBC3                        jmp fin_mostrar_eliminacion_de_oficial
   304                                  
   305                                  actualizar_turno:
   306 000002E8 8A0425[58020000]            mov al, [turno]
   307 000002EF 800425[58020000]01          add byte [turno], 1
   308 000002F7 8A0425[58020000]            mov al, [turno]
   309 000002FE 30E4                        xor ah, ah
   310                                  
   311                                      ; Dividir AX entre el divisor (2)
   312 00000300 4831DB                      xor rbx, rbx        
   313 00000303 8A1C25[59020000]            mov bl, [divisor]
   314 0000030A F6F3                        div bl            ; AX / BL -> AL = cociente, AH = resto
   315                                  
   316                                      ; Ahora, AH contiene el resto (turno % 2)
   317 0000030C 80FC00                      cmp ah, 0         ; Compara el resto con 0
   318 0000030F 7402                        je es_par         ; Si el resto es 0, turno es par
   319 00000311 EB1D                        jmp es_impar      ; Si no, turno es impar
   320                                  
   321                                  es_par:          
   322 00000313 C60425[58020000]00          mov byte[turno], 0
   323 0000031B 488D0425[55000000]          lea rax, [oficiales]          ; Cargar la direcciÃ³n de 'oficiales' en AX
   324 00000323 48890425[68000000]          mov [jugadorActual], rax
   325 0000032B E923FDFFFF                  jmp fin_actualizar_turno
   326                                  
   327                                  es_impar:        
   328 00000330 C60425[58020000]01          mov byte[turno], 1
   329 00000338 488D0425[5F000000]          lea rax, [soldados]          ; Cargar la direcciÃ³n de 'soldados' en AX
   330 00000340 48890425[68000000]          mov [jugadorActual], rax
   331 00000348 E906FDFFFF                  jmp fin_actualizar_turno
   332                                      
   333                                  asignar_jugador_inicial:
   334 0000034D 488D0425[5F000000]          lea rax, [soldados]          ; Cargar la direcciÃ³n de 'soldados' en AX, ya que empiezan ellos
   335 00000355 48890425[68000000]          mov [jugadorActual], rax
   336 0000035D E9B4FCFFFF                  jmp ciclo_juego
   337                                      
   338                                  validar_casillero_origen:
   339                                      ;;valido que este dentro del tablero
   340 00000362 4829C0                      sub rax, rax
   341 00000365 4829DB                      sub rbx, rbx
   342 00000368 8A0425[5D020000]            mov al,[posx_ini]
   343 0000036F 8A1C25[5E020000]            mov bl,[posy_ini]
   344                                      
   345                                      ;podria usar jge, jle
   346                                      validar_dentro_x:
   347 00000376 3C01                        cmp al, 1
   348 00000378 740E                        je validar_dentro_y
   349 0000037A 3C02                        cmp al, 2
   350 0000037C 740A                        je validar_dentro_y
   351 0000037E 3C06                        cmp al, 6
   352 00000380 7406                        je validar_dentro_y
   353 00000382 3C07                        cmp al, 7
   354 00000384 7402                        je validar_dentro_y
   355 00000386 EB16                        jmp dentro_tablero_origen_ok
   356                                  validar_dentro_y:
   357 00000388 80FB01                      cmp bl, 1
   358 0000038B 7475                        je origen_invalido
   359 0000038D 80FB02                      cmp bl, 2
   360 00000390 7470                        je origen_invalido
   361 00000392 80FB06                      cmp bl, 6
   362 00000395 746B                        je origen_invalido
   363 00000397 80FB07                      cmp bl, 7
   364 0000039A 7466                        je origen_invalido
   365 0000039C EB00                        jmp dentro_tablero_origen_ok
   366                                      
   367                                  dentro_tablero_origen_ok:
   368 0000039E 8A0425[58020000]            mov al, [turno]
   369 000003A5 30E4                        xor ah, ah        ; Limpiar AH para asegurar que AX estÃ¡ correcto
   370                                  
   371                                      ; Dividir AX entre el divisor (2)
   372 000003A7 4831DB                      xor rbx, rbx        
   373 000003AA 8A1C25[59020000]            mov bl, [divisor]
   374 000003B1 F6F3                        div bl            ; AX / BL -> AL = cociente, AH = resto
   375                                  
   376                                      ; Ahora, AH contiene el resto (turno % 2)
   377 000003B3 80FC00                      cmp ah, 0         ; Compara el resto con 0
   378 000003B6 746B                        je es_oficial_valido         ; Si el resto es 0, turno es par
   379 000003B8 EB00                        jmp es_soldado_valido        ; Si no, turno es impar
   380                                      
   381                                  es_soldado_valido: ;hay una X en el origen?
   382                                  ;busco el elemento en la matriz; y lo guardo en r10 para comparar el elemento.
   383 000003BA 4829C9                      sub rcx, rcx
   384 000003BD 4829C0                      sub rax, rax
   385 000003C0 4829DB                      sub rbx, rbx
   386 000003C3 4D29D2                      sub r10, r10
   387 000003C6 8A0425[5D020000]            mov al,[posx_ini] 
   388 000003CD 41B809000000                mov r8, cantidadFilas
   389 000003D3 49F7E8                      imul r8
   390 000003D6 4801C1                      add rcx,rax
   391                                      
   392 000003D9 8A0425[5E020000]            mov al,[posy_ini]
   393 000003E0 41B801000000                mov r8, longitudElemento 
   394 000003E6 49F7E8                      imul r8
   395 000003E9 4801C1                      add rcx,rax
   396                                      
   397 000003EC 48BB-                       mov rbx,matriz 
   397 000003EE [0702000000000000] 
   398 000003F6 4801CB                      add rbx,rcx 
   399                                  
   400 000003F9 4C8B13                      mov r10, [rbx] ;guardo un elemento
   401 000003FC 4180FA58                    cmp r10b, 'X'  ;hay un soldado en el origen?
   402 00000400 741C                        je turno_soldado_ok
   403                                      ;sino fue un mal ingreso:
   404                                  origen_invalido:
   405 00000402 48BF-                       mov rdi, casilleroInvalido
   405 00000404 [7100000000000000] 
   406 0000040C 4883EC08                    sub rsp, 8
   407 00000410 E8(00000000)                call printf
   408 00000415 4883C408                    add rsp, 8
   409 00000419 E9C0FDFFFF                  jmp pedir_casillero_origen
   410                                  turno_soldado_ok:
   411 0000041E E902FCFFFF                  jmp pedir_movimiento_destino
   412                                      
   413                                  es_oficial_valido: ;hay una O en el origen?
   414                                  ;busco el elemento en la matriz; y lo guardo en r10 para comparar el elemento.
   415 00000423 4829C9                      sub rcx, rcx
   416 00000426 4829C0                      sub rax, rax
   417 00000429 4829DB                      sub rbx, rbx
   418 0000042C 4D29D2                      sub r10, r10
   419 0000042F 8A0425[5D020000]            mov al,[posx_ini] 
   420 00000436 41B809000000                mov r8, cantidadFilas
   421 0000043C 49F7E8                      imul r8
   422 0000043F 4801C1                      add rcx,rax
   423                                      
   424 00000442 8A0425[5E020000]            mov al,[posy_ini]
   425 00000449 41B801000000                mov r8, longitudElemento 
   426 0000044F 49F7E8                      imul r8
   427 00000452 4801C1                      add rcx,rax
   428                                      
   429 00000455 48BB-                       mov rbx,matriz 
   429 00000457 [0702000000000000] 
   430 0000045F 4801CB                      add rbx,rcx ;me posicione en la matriz
   431                                  
   432 00000462 4C8B13                      mov r10, [rbx] ;guardo un elemento
   433                                  ;;
   434 00000465 4180FA4F                    cmp r10b, 'O' ;hay una X en el origen?
   435 00000469 741C                        je turno_oficial_ok
   436                                      ;sino fue un mal ingreso:
   437 0000046B 48BF-                       mov rdi, casilleroInvalido
   437 0000046D [7100000000000000] 
   438 00000475 4883EC08                    sub rsp, 8
   439 00000479 E8(00000000)                call printf
   440 0000047E 4883C408                    add rsp, 8
   441 00000482 E957FDFFFF                  jmp pedir_casillero_origen
   442                                  turno_oficial_ok:
   443 00000487 E999FBFFFF                  jmp pedir_movimiento_destino    
   444                                      
   445                                      
   446                                  es_destino_valido:
   447                                      ;;valido que este dentro del tablero
   448 0000048C 4829C0                      sub rax, rax
   449 0000048F 4829DB                      sub rbx, rbx
   450 00000492 8A0425[5F020000]            mov al,[posx_fin]
   451 00000499 8A1C25[60020000]            mov bl,[posy_fin]
   452                                      
   453                                      ;podria usar jge, jle
   454                                  validar_dentro_x_fin:
   455 000004A0 3C01                        cmp al, 1
   456 000004A2 740E                        je validar_dentro_y_fin
   457 000004A4 3C02                        cmp al, 2
   458 000004A6 740A                        je validar_dentro_y_fin
   459 000004A8 3C06                        cmp al, 6
   460 000004AA 7406                        je validar_dentro_y_fin
   461 000004AC 3C07                        cmp al, 7
   462 000004AE 7402                        je validar_dentro_y_fin
   463 000004B0 EB16                        jmp dentro_tablero_destino_ok
   464                                  validar_dentro_y_fin:
   465 000004B2 80FB01                      cmp bl, 1
   466 000004B5 7459                        je destino_invalido
   467 000004B7 80FB02                      cmp bl, 2
   468 000004BA 7454                        je destino_invalido
   469 000004BC 80FB06                      cmp bl, 6
   470 000004BF 744F                        je destino_invalido
   471 000004C1 80FB07                      cmp bl, 7
   472 000004C4 744A                        je destino_invalido
   473 000004C6 EB00                        jmp dentro_tablero_destino_ok
   474                                      
   475                                  dentro_tablero_destino_ok:
   476                                  ;busco el elemento en la matriz; y lo guardo en r10 para comparar el elemento.
   477 000004C8 4829C9                      sub rcx, rcx
   478 000004CB 4829C0                      sub rax, rax
   479 000004CE 4829DB                      sub rbx, rbx
   480 000004D1 4D29D2                      sub r10, r10
   481 000004D4 8A0425[5F020000]            mov al,[posx_fin] 
   482 000004DB 41B809000000                mov r8, cantidadFilas
   483 000004E1 49F7E8                      imul r8
   484 000004E4 4801C1                      add rcx,rax
   485                                      
   486 000004E7 8A0425[60020000]            mov al,[posy_fin]
   487 000004EE 41B801000000                mov r8, longitudElemento 
   488 000004F4 49F7E8                      imul r8
   489 000004F7 4801C1                      add rcx,rax
   490                                      
   491 000004FA 48BB-                       mov rbx,matriz 
   491 000004FC [0702000000000000] 
   492 00000504 4801CB                      add rbx,rcx ;me posicione en la matriz
   493                                  
   494 00000507 4C8B13                      mov r10, [rbx] ;guardo un elemento
   495                                  ;;
   496 0000050A 4180FA20                    cmp r10b, ' ' ;el casillero destino tiene que ser un espacio en blanco.
   497 0000050E 741C                        je destino_ok
   498                                      ;sino fue un mal ingreso:
   499                                  destino_invalido:
   500 00000510 48BF-                       mov rdi, casilleroInvalido
   500 00000512 [7100000000000000] 
   501 0000051A 4883EC08                    sub rsp, 8
   502 0000051E E8(00000000)                call printf
   503 00000523 4883C408                    add rsp, 8
   504 00000527 E91CFDFFFF                  jmp pedir_casillero_destino
   505                                  destino_ok:
   506 0000052C E9F9FAFFFF                  jmp validar_movimiento    
   507                                  validar_movimiento_oficial:
   508 00000531 41BC00000000                mov r12,0
   509 00000537 B800000000                  mov rax,0
   510 0000053C 8A0425[5D020000]            mov al, [posx_ini]
   511 00000543 8A2425[5F020000]            mov ah, [posx_fin]
   512 0000054A 28E0                        sub al,ah
   513                                  
   514 0000054C BA00000000                  mov rdx,0
   515 00000551 8A1425[5E020000]            mov dl, [posy_ini]
   516 00000558 8A3425[60020000]            mov dh, [posy_fin]
   517 0000055F 28F2                        sub dl,dh
   518                                  
   519 00000561 3C00                        cmp al, 0
   520 00000563 7410                        je validar_movimientos_oficial_horizontal
   521 00000565 3C01                        cmp al, 1
   522 00000567 7428                        je validar_movimiento_simple_oficial_arriba_abajo 
   523 00000569 3CFF                        cmp al,-1
   524 0000056B 7424                        je validar_movimiento_simple_oficial_arriba_abajo 
   525                                      
   526 0000056D 3C02                        cmp al, 2
   527 0000056F 7440                        je validar_movimiento_doble_oficial_superiores 
   528 00000571 3CFE                        cmp al,-2
   529 00000573 7450                        je validar_movimiento_doble_oficial_inferiores 
   530                                      
   531                                  ;;esto valida OK movimientos simples y dobles horizontales
   532                                  validar_movimientos_oficial_horizontal:
   533                                      ;;movimiento simple
   534 00000575 80FA01                      cmp dl, 1
   535 00000578 0F84DE000000                je movimiento_oficial_ok
   536 0000057E 80FAFF                      cmp dl,-1
   537 00000581 0F84D5000000                je movimiento_oficial_ok
   538                                      ;;movimiento doble (captura)
   539 00000587 80FA02                      cmp dl, 2
   540 0000058A 744D                        je validar_movimiento_doble_izquierda 
   541 0000058C 80FAFE                      cmp dl,-2
   542 0000058F 744C                        je validar_movimiento_doble_derecha 
   543                                  
   544                                  validar_movimiento_simple_oficial_arriba_abajo:
   545                                      ;;si se movio 1 en x, solo puede ser movimiento simple
   546 00000591 80FA01                      cmp dl, 1
   547 00000594 0F84C2000000                je movimiento_oficial_ok
   548 0000059A 80FAFF                      cmp dl,-1
   549 0000059D 0F84B9000000                je movimiento_oficial_ok
   550 000005A3 80FA00                      cmp dl, 0
   551 000005A6 0F84B0000000                je movimiento_oficial_ok
   552 000005AC E92A010000                  jmp movimiento_oficial_invalido
   553                                  
   554                                  ;;movimientos dobles!
   555                                  validar_movimiento_doble_oficial_superiores:
   556 000005B1 80FA02                      cmp dl, 2
   557 000005B4 742B                        je validar_movimiento_doble_izquierda_superior
   558 000005B6 80FAFE                      cmp dl,-2
   559 000005B9 7430                        je validar_movimiento_doble_derecha_superior
   560 000005BB 80FA00                      cmp dl, 0
   561 000005BE 7427                        je validar_movimiento_doble_superior
   562 000005C0 E916010000                  jmp movimiento_oficial_invalido
   563                                  
   564                                  validar_movimiento_doble_oficial_inferiores:
   565 000005C5 80FA02                      cmp dl, 2
   566 000005C8 7427                        je validar_movimiento_doble_izquierda_inferior
   567 000005CA 80FAFE                      cmp dl,-2
   568 000005CD 742C                        je validar_movimiento_doble_derecha_inferior
   569 000005CF 80FA00                      cmp dl, 0
   570 000005D2 7423                        je validar_movimiento_doble_inferior
   571 000005D4 E902010000                  jmp movimiento_oficial_invalido
   572                                      
   573                                  ;;tengo que validar que haya una X en los movimientos dobles
   574                                  ;;voy a setear una posicion posx - posy para buscar elemento en la matriz
   575                                  ;;si hay una X efectivamente habia un soldado -> eliminar soldado -> movimiento ok!
   576                                  ;;else invalido.
   577                                  
   578                                  ;;hasta este momento en ah y dh estan los valores x y destino respectivamente
   579                                  validar_movimiento_doble_izquierda:
   580 000005D9 FEC6                        inc dh
   581 000005DB EB24                        jmp validar_habia_soldado_en_movimiento_doble
   582                                  validar_movimiento_doble_derecha:
   583 000005DD FECE                        dec dh
   584 000005DF EB20                        jmp validar_habia_soldado_en_movimiento_doble
   585                                  validar_movimiento_doble_izquierda_superior:
   586 000005E1 FEC6                        inc dh
   587 000005E3 FEC4                        inc ah
   588 000005E5 EB1A                        jmp validar_habia_soldado_en_movimiento_doble
   589                                  validar_movimiento_doble_superior:
   590 000005E7 FEC4                        inc ah
   591 000005E9 EB16                        jmp validar_habia_soldado_en_movimiento_doble
   592                                  validar_movimiento_doble_derecha_superior:
   593 000005EB FECE                        dec dh
   594 000005ED FEC4                        inc ah
   595 000005EF EB10                        jmp validar_habia_soldado_en_movimiento_doble
   596                                  validar_movimiento_doble_izquierda_inferior:
   597 000005F1 FEC6                        inc dh
   598 000005F3 FECC                        dec ah
   599 000005F5 EB0A                        jmp validar_habia_soldado_en_movimiento_doble
   600                                  validar_movimiento_doble_inferior:
   601 000005F7 FECC                        dec ah
   602 000005F9 EB06                        jmp validar_habia_soldado_en_movimiento_doble
   603                                  validar_movimiento_doble_derecha_inferior:
   604 000005FB FECE                        dec dh
   605 000005FD FECC                        dec ah
   606 000005FF EB00                        jmp validar_habia_soldado_en_movimiento_doble
   607                                  
   608                                  validar_habia_soldado_en_movimiento_doble:
   609                                      
   610 00000601 4829DB                      sub rbx, rbx
   611 00000604 88E3                        mov bl, ah      
   612 00000606 4829C0                      sub rax, rax      
   613 00000609 88D8                        mov al, bl
   614                                  
   615 0000060B 4829DB                      sub rbx, rbx
   616 0000060E 88F3                        mov bl, dh
   617                                                  
   618 00000610 4829C9                      sub rcx, rcx
   619 00000613 4829D2                      sub rdx, rdx
   620 00000616 4D29C0                      sub r8, r8
   621 00000619 4D29D2                      sub r10, r10
   622                                      
   623                                   
   624 0000061C 41B809000000                mov r8, cantidadFilas
   625 00000622 49F7E8                      imul r8
   626 00000625 4801C1                      add rcx,rax
   627                                      
   628 00000628 88D8                        mov al, bl
   629 0000062A 41B801000000                mov r8, longitudElemento 
   630 00000630 49F7E8                      imul r8
   631 00000633 4801C1                      add rcx,rax
   632                                      
   633 00000636 4829DB                      sub rbx, rbx   
   634 00000639 48BB-                       mov rbx,matriz 
   634 0000063B [0702000000000000] 
   635 00000643 4801CB                      add rbx,rcx 
   636                                  
   637 00000646 4C8B13                      mov r10, [rbx] ;guardo un elemento
   638 00000649 4180FA58                    cmp r10b, 'X' ;habia una X en el medio?
   639 0000064D 7405                        je oficial_realizo_captura
   640 0000064F E987000000                  jmp movimiento_oficial_invalido ;si no capturo, el movimiento doble es invalido
   641                                  
   642                                  oficial_realizo_captura:
   643 00000654 41BF01000000                mov r15, 1 ;seteo r15=1, es decir que capturo en su turno.
   644 0000065A EB00                        jmp movimiento_oficial_ok
   645                                  ;;fin validacion movimientos dobles del oficial
   646                                  
   647                                  movimiento_oficial_ok:
   648                                      
   649 0000065C 4C8B4B01                    mov r9, [rbx+1] ;guardo en r9 lo que le sigue de matriz posterior al elemento a actualizar
   650 00000660 41B820000000                mov r8, " " ; lo muevo a un reg para darle (y estar seguro de su) longitud
   651 00000666 4C8903                      mov [rbx],r8 ;muevo el valor(de igual longitud). muevo a la posicion de la matriz a actualizar
   652                                      
   653                                      ;despues de agregar el nuevo valor, agregarle el resto de la matriz que estaba antes.
   654 00000669 4C894B01                    mov [rbx+1],r9
   655 0000066D 41BC00000000                mov r12,0 ;si r12=0, movimiento OK
   656                                  
   657                                  termina_turno_oficiales:
   658 00000673 E9C6F9FFFF                  jmp fin_validacion_movimiento_oficial
   659                                  borrar_oficial:
   660                                  ;voy a la posicion destino y borro el "O"
   661 00000678 4829C9                      sub rcx, rcx
   662 0000067B 4829C0                      sub rax, rax
   663 0000067E 4829DB                      sub rbx, rbx
   664 00000681 4D29D2                      sub r10, r10
   665 00000684 8A0425[5D020000]            mov al,[posx_ini] ;guardo el valor de la fila, en AL(8bits) 
   666                                                      ;ya que posx es db (byte= 8bits) sino guarda cualquier cosa
   667                                  ;    sub rax,1 -> no es necesaria la resta ya que la matriz empieza en 1,1
   668 0000068B 41B809000000                mov r8, cantidadFilas
   669 00000691 49F7E8                      imul r8   ;me desplazo en la fila
   670 00000694 4801C1                      add rcx,rax
   671                                      
   672 00000697 8A0425[5E020000]            mov al,[posy_ini] ;guardo el valor de la col,
   673                                  ;    sub rax,1
   674 0000069E 41B801000000                mov r8, longitudElemento ;guardo en r8 para darle longitud y poder multiplicar usando imul
   675 000006A4 49F7E8                      imul r8 ;me desplazo en la columna
   676 000006A7 4801C1                      add rcx,rax ;sumo los desplazamientos
   677                                      
   678                                      
   679 000006AA 48BB-                       mov rbx,matriz ;pongo el pto al inicio de la matriz
   679 000006AC [0702000000000000] 
   680 000006B4 4801CB                      add rbx,rcx ;me posicione en la matriz
   681                                  
   682 000006B7 4C8B13                      mov r10, [rbx] ;guardo un elemento
   683 000006BA 4C8B4B01                    mov r9, [rbx+1] ;guardo en r9 lo que le sigue de matriz posterior al elemento a actualizar
   684 000006BE 41B820000000                mov r8, " " ; lo muevo a un reg para darle (y estar seguro de su) longitud
   685 000006C4 4C8903                      mov [rbx],r8 ;muevo el valor(de igual longitud). muevo a la posicion de la matriz a actualizar
   686                                      
   687                                      ;despues de agregar el nuevo valor, agregarle el resto de la matriz que estaba antes.
   688 000006C7 4C894B01                    mov [rbx+1],r9
   689                                      
   690 000006CB 49FFCE                      dec r14 ;descuento un oficial
   691 000006CE 41BB01000000                mov r11, 1 ;r11=1 -> indicar que tengo que imprimir mensaje que borre un oficial.
   692 000006D4 4153                        push r11
   693 000006D6 E9FEFAFFFF                  jmp fin_validar_desatendido
   694                                  
   695                                  movimiento_oficial_invalido:
   696 000006DB 48BF-                       mov rdi,msj_movimiento_oficial_invalido
   696 000006DD [8600000000000000] 
   697 000006E5 4883EC08                    sub rsp, 8
   698 000006E9 E8(00000000)                call printf
   699 000006EE 4883C408                    add rsp,8
   700                                      
   701 000006F2 41BC01000000                mov r12,1
   702 000006F8 E941F9FFFF                  jmp fin_validacion_movimiento_oficial
   703                                  
   704                                  movimiento_soldado_invalido:
   705 000006FD 4889E0                      mov rax, rsp
   706 00000700 4883E00F                    and rax, 15
   707 00000704 7404                        je no_restar_rsp
   708 00000706 4883EC08                    sub rsp, 8
   709                                  no_restar_rsp:
   710 0000070A 48BF-                       mov rdi,msj_movimiento_soldado_invalido
   710 0000070C [BB00000000000000] 
   711 00000714 E8(00000000)                call printf
   712 00000719 4883C408                    add rsp,8
   713 0000071D E9FEF8FFFF                  jmp pedir_movimiento
   714                                  
   715                                  movimiento_soldado_valido:
   716 00000722 41BF00000000                mov r15, 0 ;reseteo r15 antes que jueguen los oficiales
   717 00000728 41BB00000000                mov r11, 0 ;reseteo r11, indicador de que eliminaron un oficial ya que no lo hicieron este turno.
   718 0000072E 4153                        push r11   ;guardo r11 ya que se pisa entre funciones.
   719 00000730 E914F9FFFF                  jmp prox_turno
   720                                  
   721                                  validar_si_oficial_debe_comer_prox_turno:
   722                                      ;encontrar oficiales (solo con el desplazamiento)
   723 00000735 4829C9                      sub rcx, rcx
   724 00000738 4829D2                      sub rdx, rdx ;voy a guardar la cantidad de oficiales a buscar/encontrados
   725 0000073B 4829C0                      sub rax, rax
   726 0000073E 4829DB                      sub rbx, rbx
   727 00000741 4D29D2                      sub r10, r10
   728                                  
   729 00000744 4983FE01                    cmp r14, 1
   730 00000748 7422                        je buscar_un_solo_oficial ;si hay un solo oficial modifico rdx
   731                                  buscar_oficial_en_matriz:
   732 0000074A 48BB-                       mov rbx,matriz ;pongo el pto al inicio de la matriz
   732 0000074C [0702000000000000] 
   733                                  actualizo_indice:
   734 00000754 4C8B13                      mov r10, [rbx] ;guardo el elemento
   735 00000757 4180FA4F                    cmp r10b, 'O'  ;verifico si es un oficial
   736 0000075B 7414                        je revisar_si_oficial_puede_comer ;valido si puede comer en alguna direccion
   737                                  buscar_proximo_oficial:
   738 0000075D 4883FA02                    cmp rdx, 2 ;si ya encontre a los 2.
   739 00000761 0F84E7F8FFFF                je fin_actualizar_tablero ;funcion dentro de actualizar tablero, al terminar va a fin_actualizar_tablero.
   740                                  
   741 00000767 48FFC3                      inc rbx
   742 0000076A EBE8                        jmp actualizo_indice ;sigo buscando por oficiales 'O'
   743                                  buscar_un_solo_oficial:
   744 0000076C 48FFC2                      inc rdx 
   745 0000076F EBD9                        jmp buscar_oficial_en_matriz
   746                                  
   747                                  ;valido si puede comer en alguna direccion (de todas las disponibles)
   748                                  revisar_si_oficial_puede_comer:
   749 00000771 48FFC2                      inc rdx
   750                                      ;tengo en rbx la matriz en el indice del oficial.
   751                                  revisar_celda_derecha:
   752 00000774 4C8B5301                    mov r10, [rbx+1]; +1 = a la derecha de la posicion actual
   753 00000778 4180FA58                    cmp r10b, 'X' ;tiene que haber una X a distancia 1
   754 0000077C 7402                        je revisar_captura_derecha
   755 0000077E EB0E                        jmp revisar_celda_abajo_derecha
   756                                  revisar_captura_derecha:
   757 00000780 4C8B5302                    mov r10, [rbx+2] ;+2 = a la derecha 2posiciones de la posicion actual
   758 00000784 4180FA20                    cmp r10b, ' ' ;tiene que haber un espacio a distancia 2
   759 00000788 0F84B7000000                je oficiales_pueden_comer
   760                                  
   761                                  revisar_celda_abajo_derecha:
   762 0000078E 4C8B530A                    mov r10, [rbx+10]; +10 = a la derecha abajo de la posicion actual
   763 00000792 4180FA58                    cmp r10b, 'X'
   764 00000796 7402                        je revisar_captura_abajo_derecha
   765 00000798 EB0E                        jmp revisar_celda_abajo
   766                                  revisar_captura_abajo_derecha:
   767 0000079A 4C8B5314                    mov r10, [rbx+20] ;+20 = a la derecha abajo 2posiciones de la posicion actual
   768 0000079E 4180FA20                    cmp r10b, ' '
   769 000007A2 0F849D000000                je oficiales_pueden_comer
   770                                  
   771                                  revisar_celda_abajo:
   772 000007A8 4C8B5309                    mov r10, [rbx+9]; +9 = abajo de la posicion actual
   773 000007AC 4180FA58                    cmp r10b, 'X'
   774 000007B0 7402                        je revisar_captura_abajo
   775 000007B2 EB0E                        jmp revisar_celda_abajo_izquierda
   776                                  revisar_captura_abajo:
   777 000007B4 4C8B5312                    mov r10, [rbx+18] ;+18 = abajo 2posiciones de la posicion actual
   778 000007B8 4180FA20                    cmp r10b, ' '
   779 000007BC 0F8483000000                je oficiales_pueden_comer
   780                                  
   781                                  revisar_celda_abajo_izquierda:
   782 000007C2 4C8B5308                    mov r10, [rbx+8]
   783 000007C6 4180FA58                    cmp r10b, 'X'
   784 000007CA 7402                        je revisar_captura_abajo_izquierda
   785 000007CC EB0A                        jmp revisar_celda_izquierda
   786                                  revisar_captura_abajo_izquierda:
   787 000007CE 4C8B5310                    mov r10, [rbx+16]
   788 000007D2 4180FA20                    cmp r10b, ' '
   789 000007D6 746D                        je oficiales_pueden_comer
   790                                  
   791                                  revisar_celda_izquierda:
   792 000007D8 4C8B53FF                    mov r10, [rbx-1]
   793 000007DC 4180FA58                    cmp r10b, 'X'
   794 000007E0 7402                        je revisar_captura_izquierda
   795 000007E2 EB0A                        jmp revisar_celda_arriba_izquierda
   796                                  revisar_captura_izquierda:
   797 000007E4 4C8B53FE                    mov r10, [rbx-2]
   798 000007E8 4180FA20                    cmp r10b, ' '
   799 000007EC 7457                        je oficiales_pueden_comer
   800                                  
   801                                  revisar_celda_arriba_izquierda:
   802 000007EE 4C8B53F6                    mov r10, [rbx-10]
   803 000007F2 4180FA58                    cmp r10b, 'X'
   804 000007F6 7402                        je revisar_captura_arriba_izquierda
   805 000007F8 EB0A                        jmp revisar_celda_arriba
   806                                  revisar_captura_arriba_izquierda:
   807 000007FA 4C8B53EC                    mov r10, [rbx-20]
   808 000007FE 4180FA20                    cmp r10b, ' '
   809 00000802 7441                        je oficiales_pueden_comer
   810                                  
   811                                  revisar_celda_arriba:
   812 00000804 4C8B53F7                    mov r10, [rbx-9]
   813 00000808 4180FA58                    cmp r10b, 'X'
   814 0000080C 7402                        je revisar_captura_arriba
   815 0000080E EB0A                        jmp revisar_celda_arriba_derecha
   816                                  revisar_captura_arriba:
   817 00000810 4C8B53EE                    mov r10, [rbx-18]
   818 00000814 4180FA20                    cmp r10b, ' '
   819 00000818 742B                        je oficiales_pueden_comer
   820                                  
   821                                  revisar_celda_arriba_derecha:
   822 0000081A 4C8B53F8                    mov r10, [rbx-8]
   823 0000081E 4180FA58                    cmp r10b, 'X'
   824 00000822 7402                        je revisar_captura_arriba_derecha
   825 00000824 EB0A                        jmp oficiales_no_pueden_comer ;fin de validaciones
   826                                  revisar_captura_arriba_derecha:
   827 00000826 4C8B53F0                    mov r10, [rbx-16]
   828 0000082A 4180FA20                    cmp r10b, ' '
   829 0000082E 7415                        je oficiales_pueden_comer
   830                                  
   831                                  oficiales_no_pueden_comer:
   832 00000830 4883FA01                    cmp rdx, 1
   833 00000834 0F8423FFFFFF                je buscar_proximo_oficial ;si rdx=1 tengo que buscar otro oficial
   834 0000083A 41BD00000000                mov r13, 0 ;se resetea siempre antes que jueguen oficiales
   835 00000840 E909F8FFFF                  jmp fin_actualizar_tablero
   836                                      
   837                                  oficiales_pueden_comer:
   838 00000845 41BD01000000                mov r13, 1 ;seteo r13=1 porque pueden comer en el proximo turno. (se resetea siempre antes que jueguen oficiales)
   839 0000084B E9FEF7FFFF                  jmp fin_actualizar_tablero
   840                                  
   841                                  verificar_ganador:
   842 00000850 4983FE00                    cmp r14, 0 ;r14 contiene la cantidad de oficiales en el tablero.
   843 00000854 0F84C5000000                je ganaron_soldados_por_falta_oficiales
   844                                  verificar_invasion: ;chequeo si la fortaleza esta llena de soldados
   845 0000085A 4829C9                      sub rcx, rcx
   846 0000085D 4829C0                      sub rax, rax
   847 00000860 4829DB                      sub rbx, rbx
   848 00000863 4D29D2                      sub r10, r10
   849 00000866 B005                        mov al, 5 ;inicio de fortaleza X
   850 00000868 41B809000000                mov r8, cantidadFilas
   851 0000086E 49F7E8                      imul r8
   852 00000871 4801C1                      add rcx,rax
   853                                      
   854 00000874 B003                        mov al, 3 ;inicio de fortaleza Y
   855 00000876 41B801000000                mov r8, longitudElemento 
   856 0000087C 49F7E8                      imul r8
   857 0000087F 4801C1                      add rcx,rax
   858                                      
   859 00000882 48BB-                       mov rbx,matriz 
   859 00000884 [0702000000000000] 
   860 0000088C 4801CB                      add rbx,rcx 
   861                                  
   862                                  ;fila_5_fortaleza
   863 0000088F 4C8B13                      mov r10, [rbx] ;guardo un elemento
   864 00000892 4180FA58                    cmp r10b, 'X'
   865 00000896 7552                        jne no_invadieron_la_fortaleza
   866 00000898 4C8B5301                    mov r10, [rbx+1] ;guardo un elemento
   867 0000089C 4180FA58                    cmp r10b, 'X'
   868 000008A0 7548                        jne no_invadieron_la_fortaleza
   869 000008A2 4C8B5302                    mov r10, [rbx+2] ;guardo un elemento
   870 000008A6 4180FA58                    cmp r10b, 'X'
   871 000008AA 753E                        jne no_invadieron_la_fortaleza
   872                                  ;fila_6_fortaleza
   873 000008AC 4C8B5309                    mov r10, [rbx+9] ;guardo un elemento
   874 000008B0 4180FA58                    cmp r10b, 'X'
   875 000008B4 7534                        jne no_invadieron_la_fortaleza
   876 000008B6 4C8B530A                    mov r10, [rbx+10] ;guardo un elemento
   877 000008BA 4180FA58                    cmp r10b, 'X'
   878 000008BE 752A                        jne no_invadieron_la_fortaleza
   879 000008C0 4C8B530B                    mov r10, [rbx+11] ;guardo un elemento
   880 000008C4 4180FA58                    cmp r10b, 'X'
   881 000008C8 7520                        jne no_invadieron_la_fortaleza
   882                                  ;fila_7_fortaleza
   883 000008CA 4C8B5312                    mov r10, [rbx+18] ;guardo un elemento
   884 000008CE 4180FA58                    cmp r10b, 'X'
   885 000008D2 7516                        jne no_invadieron_la_fortaleza
   886 000008D4 4C8B5313                    mov r10, [rbx+19] ;guardo un elemento
   887 000008D8 4180FA58                    cmp r10b, 'X'
   888 000008DC 750C                        jne no_invadieron_la_fortaleza
   889 000008DE 4C8B5314                    mov r10, [rbx+20] ;guardo un elemento
   890 000008E2 4180FA58                    cmp r10b, 'X'
   891 000008E6 7502                        jne no_invadieron_la_fortaleza
   892                                  
   893 000008E8 EB6E                        jmp ganaron_soldados_por_invasion
   894                                      
   895                                  no_invadieron_la_fortaleza:
   896                                  
   897                                  ;verificar_falta_soldados:
   898 000008EA 4829C9                      sub rcx, rcx
   899 000008ED 4829D2                      sub rdx, rdx
   900 000008F0 4829C0                      sub rax, rax
   901 000008F3 4829DB                      sub rbx, rbx
   902 000008F6 4D29D2                      sub r10, r10
   903                                  
   904                                  buscar_soldados_en_matriz:
   905 000008F9 48BB-                       mov rbx,matriz 
   905 000008FB [0702000000000000] 
   906                                  actualizo_indice_2:
   907 00000903 4C8B13                      mov r10, [rbx] 
   908 00000906 4180FA58                    cmp r10b, 'X' ;si matchea una X, aun quedan soldados
   909 0000090A 740E                        je aun_quedan_soldados
   910 0000090C 4883FA45                    cmp rdx, 69 ;indice de fin de fortaleza (pasando 73)
   911 00000910 7D70                        jge ganaron_oficiales_por_falta_soldados
   912 00000912 48FFC3                      inc rbx
   913 00000915 48FFC2                      inc rdx
   914 00000918 EBE9                        jmp actualizo_indice_2
   915                                  ;;
   916                                  aun_quedan_soldados:
   917 0000091A E939F7FFFF                  jmp fin_verificar_ganador
   918                                  
   919                                  ganaron_soldados_por_falta_oficiales:
   920 0000091F E84EF7FFFF                  call mostrar_tablero
   921 00000924 4889E0                      mov rax, rsp
   922 00000927 4883E00F                    and rax, 15
   923 0000092B 7404                        je no_restar_rsp_fin_falta
   924 0000092D 4883EC08                    sub rsp, 8
   925                                  no_restar_rsp_fin_falta:
   926 00000931 48BF-                       mov rdi, msj_movimiento_oficial_desatendido
   926 00000933 [F000000000000000] 
   927 0000093B E8(00000000)                call printf
   928                                      
   929 00000940 48BF-                       mov rdi,msj_ganaron_soldados_por_falta_oficiales
   929 00000942 [4001000000000000] 
   930 0000094A E8(00000000)                call printf
   931 0000094F 4883C408                    add rsp,8
   932 00000953 E902F7FFFF                  jmp fin
   933                                  
   934                                  ganaron_soldados_por_invasion:
   935 00000958 E815F7FFFF                  call mostrar_tablero
   936 0000095D 4889E0                      mov rax, rsp
   937 00000960 4883E00F                    and rax, 15
   938 00000964 7404                        je no_restar_rsp_fin_invasion
   939 00000966 4883EC08                    sub rsp, 8
   940                                  no_restar_rsp_fin_invasion:
   941 0000096A 48BF-                       mov rdi,msj_ganaron_soldados_por_invasion
   941 0000096C [8E01000000000000] 
   942 00000974 E8(00000000)                call printf
   943 00000979 4883C408                    add rsp,8
   944 0000097D E9D8F6FFFF                  jmp fin
   945                                  
   946                                  ganaron_oficiales_por_falta_soldados:
   947 00000982 E8EBF6FFFF                  call mostrar_tablero
   948 00000987 4889E0                      mov rax, rsp
   949 0000098A 4883E00F                    and rax, 15
   950 0000098E 7404                        je no_restar_rsp_falta_soldados
   951 00000990 4883EC08                    sub rsp, 8
   952                                  no_restar_rsp_falta_soldados:
   953 00000994 48BF-                       mov rdi, msj_ganaron_oficiales_por_falta_soldados
   953 00000996 [BE01000000000000] 
   954 0000099E E8(00000000)                call printf
   955 000009A3 4883C408                    add rsp,8
   956 000009A7 E9AEF6FFFF                  jmp fin
   957                                  
   958                                  
   959                                  
   960                                  validar_movimiento_soldado:
   961 000009AC B800000000                  mov rax,0
   962                                      
   963 000009B1 8A0425[5F020000]            mov al, [posx_fin]
   964 000009B8 8A2425[5D020000]            mov ah, [posx_ini]
   965 000009BF 28E0                        sub al, ah
   966                                  
   967 000009C1 3C00                        cmp al, 0
   968 000009C3 7415                        je validar_movimiento_soldado_horizontal
   969 000009C5 3CFF                        cmp al,-1 
   970 000009C7 0F84D6000000                je validar_movimiento_soldado_arriba
   971 000009CD 3C01                        cmp al, 1
   972 000009CF 0F845C010000                je validar_movimiento_soldado_abajo
   973 000009D5 E923FDFFFF                  jmp movimiento_soldado_invalido
   974                                      
   975                                  validar_movimiento_soldado_horizontal:
   976 000009DA B800000000                  mov rax,0
   977 000009DF 8A0425[5D020000]            mov al, [posx_ini]
   978                                  
   979 000009E6 3C07                        cmp al, 7
   980 000009E8 740D                        je validar_movimiento_soldado_horizontal_fila_siete_seis
   981 000009EA 3C06                        cmp al, 6
   982 000009EC 7409                        je validar_movimiento_soldado_horizontal_fila_siete_seis
   983 000009EE 3C05                        cmp al, 5
   984 000009F0 7451                        je validar_movimiento_soldado_horizontal_fila_cinco
   985                                  
   986 000009F2 E906FDFFFF                  jmp movimiento_soldado_invalido
   987                                  
   988                                  validar_movimiento_soldado_horizontal_fila_siete_seis:
   989 000009F7 BA00000000                  mov rdx,0
   990 000009FC 8A1425[5E020000]            mov dl, [posy_ini]
   991 00000A03 8A3425[60020000]            mov dh, [posy_fin]
   992                                  
   993 00000A0A 80FA03                      cmp dl, 3
   994 00000A0D 740F                        je validar_movimiento_soldado_horizontal_columna_tres_cinco
   995 00000A0F 80FA04                      cmp dl, 4
   996 00000A12 7418                        je validar_movimiento_soldado_horizontal_columna_cuatro
   997 00000A14 80FA05                      cmp dl, 5
   998 00000A17 7405                        je validar_movimiento_soldado_horizontal_columna_tres_cinco
   999 00000A19 E9DFFCFFFF                  jmp movimiento_soldado_invalido
  1000                                  
  1001                                  validar_movimiento_soldado_horizontal_columna_tres_cinco:
  1002 00000A1E 80FE04                      cmp dh, 4
  1003 00000A21 0F84FBFCFFFF                je movimiento_soldado_valido
  1004 00000A27 E9D1FCFFFF                  jmp movimiento_soldado_invalido
  1005                                  
  1006                                  validar_movimiento_soldado_horizontal_columna_cuatro:
  1007 00000A2C 80FE03                      cmp dh, 3
  1008 00000A2F 0F84EDFCFFFF                je movimiento_soldado_valido
  1009 00000A35 80FE05                      cmp dh, 5
  1010 00000A38 0F84E4FCFFFF                je movimiento_soldado_valido
  1011 00000A3E E9BAFCFFFF                  jmp movimiento_soldado_invalido
  1012                                  
  1013                                  validar_movimiento_soldado_horizontal_fila_cinco:
  1014 00000A43 BA00000000                  mov rdx,0
  1015 00000A48 8A1425[5E020000]            mov dl, [posy_ini]
  1016 00000A4F 8A3425[60020000]            mov dh, [posy_fin]
  1017                                      
  1018 00000A56 80FA03                      cmp dl, 3
  1019 00000A59 7E0F                        jle movimiento_soldado_derecha
  1020 00000A5B 80FA04                      cmp dl, 4
  1021 00000A5E 742A                        je movimiento_soldado_derecha_izquierda
  1022 00000A60 80FA07                      cmp dl, 7
  1023 00000A63 7E15                        jle movimiento_soldado_izquierda
  1024 00000A65 E993FCFFFF                  jmp movimiento_soldado_invalido
  1025                                  
  1026                                  movimiento_soldado_derecha:
  1027 00000A6A 28D6                        sub dh,dl
  1028 00000A6C 80FE01                      cmp dh, 1
  1029 00000A6F 0F84ADFCFFFF                je movimiento_soldado_valido
  1030 00000A75 E983FCFFFF                  jmp movimiento_soldado_invalido
  1031                                  
  1032                                  movimiento_soldado_izquierda:
  1033 00000A7A 28D6                        sub dh,dl
  1034 00000A7C 80FEFF                      cmp dh,-1
  1035 00000A7F 0F849DFCFFFF                je movimiento_soldado_valido
  1036 00000A85 E973FCFFFF                  jmp movimiento_soldado_invalido
  1037                                  
  1038                                  movimiento_soldado_derecha_izquierda:
  1039 00000A8A 28D6                        sub dh,dl
  1040 00000A8C 80FEFF                      cmp dh,-1
  1041 00000A8F 0F848DFCFFFF                je movimiento_soldado_valido
  1042 00000A95 80FE01                      cmp dh, 1
  1043 00000A98 0F8484FCFFFF                je movimiento_soldado_valido
  1044 00000A9E E95AFCFFFF                  jmp movimiento_soldado_invalido
  1045                                  
  1046                                  ;;fin validar movimientos horizontales
  1047                                  validar_movimiento_soldado_arriba:
  1048 00000AA3 B800000000                  mov rax,0
  1049 00000AA8 8A0425[5D020000]            mov al, [posx_ini]
  1050                                      
  1051 00000AAF 3C06                        cmp al, 6
  1052 00000AB1 7409                        je validar_movimiento_soldado_arriba_en_fortaleza
  1053 00000AB3 3C07                        cmp al, 7
  1054 00000AB5 7405                        je validar_movimiento_soldado_arriba_en_fortaleza
  1055 00000AB7 E941FCFFFF                  jmp movimiento_soldado_invalido
  1056                                  
  1057                                  validar_movimiento_soldado_arriba_en_fortaleza:
  1058 00000ABC BA00000000                  mov rdx,0
  1059 00000AC1 8A1425[5E020000]            mov dl, [posy_ini]
  1060 00000AC8 8A3425[60020000]            mov dh, [posy_fin]
  1061                                  
  1062 00000ACF 80FA03                      cmp dl, 3
  1063 00000AD2 740F                        je validar_movimiento_soldado_arriba_en_fortaleza_columna_tres
  1064 00000AD4 80FA04                      cmp dl, 4
  1065 00000AD7 7421                        je validar_movimiento_soldado_arriba_en_fortaleza_columna_cuatro
  1066 00000AD9 80FA05                      cmp dl, 5
  1067 00000ADC 743C                        je validar_movimiento_soldado_arriba_en_fortaleza_columna_cinco
  1068 00000ADE E91AFCFFFF                  jmp movimiento_soldado_invalido
  1069                                  
  1070                                  validar_movimiento_soldado_arriba_en_fortaleza_columna_tres:
  1071 00000AE3 80FE03                      cmp dh, 3
  1072 00000AE6 0F8436FCFFFF                je movimiento_soldado_valido
  1073 00000AEC 80FE04                      cmp dh, 4
  1074 00000AEF 0F842DFCFFFF                je movimiento_soldado_valido
  1075 00000AF5 E903FCFFFF                  jmp movimiento_soldado_invalido
  1076                                  
  1077                                  validar_movimiento_soldado_arriba_en_fortaleza_columna_cuatro:
  1078 00000AFA 80FE03                      cmp dh, 3
  1079 00000AFD 0F841FFCFFFF                je movimiento_soldado_valido
  1080 00000B03 80FE04                      cmp dh, 4
  1081 00000B06 0F8416FCFFFF                je movimiento_soldado_valido
  1082 00000B0C 80FE05                      cmp dh, 5
  1083 00000B0F 0F840DFCFFFF                je movimiento_soldado_valido
  1084 00000B15 E9E3FBFFFF                  jmp movimiento_soldado_invalido
  1085                                  
  1086                                  validar_movimiento_soldado_arriba_en_fortaleza_columna_cinco:
  1087 00000B1A 80FE04                      cmp dh, 4
  1088 00000B1D 0F84FFFBFFFF                je movimiento_soldado_valido
  1089 00000B23 80FE05                      cmp dh, 5
  1090 00000B26 0F84F6FBFFFF                je movimiento_soldado_valido
  1091 00000B2C E9CCFBFFFF                  jmp movimiento_soldado_invalido
  1092                                  
  1093                                  validar_movimiento_soldado_abajo:
  1094 00000B31 BA00000000                  mov rdx,0
  1095 00000B36 8A1425[5E020000]            mov dl, [posy_ini]
  1096 00000B3D 8A3425[60020000]            mov dh, [posy_fin]
  1097                                      
  1098 00000B44 28D6                        sub dh, dl
  1099 00000B46 80FEFF                      cmp dh,-1
  1100 00000B49 0F84D3FBFFFF                je movimiento_soldado_valido
  1101 00000B4F 80FE00                      cmp dh, 0
  1102 00000B52 0F84CAFBFFFF                je movimiento_soldado_valido
  1103 00000B58 80FE01                      cmp dh, 1
  1104 00000B5B 0F84C1FBFFFF                je movimiento_soldado_valido
  1105 00000B61 E997FBFFFF                  jmp movimiento_soldado_invalido
  1106                                  
  1107                                  ;;fin validar_movimiento_soldado
  1108 00000B66 E9DEF4FFFF                  jmp prox_turno
