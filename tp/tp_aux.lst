     1                                  global	main
     2                                  extern 	printf
     3                                  extern  gets
     4                                  
     5                                  extern  system
     6                                  
     7                                  section .data
     8 00000000 496E6772657365204F-         msjIngFilaColumnaOrigen	db	'Ingrese Origen [XY]: ',0
     8 00000009 726967656E205B5859-
     8 00000012 5D3A2000           
     9 00000016 496E67726573652044-         msjIngFilaColumnaDestino	db	'Ingrese Destino [XY]: ',0
     9 0000001F 657374696E6F205B58-
     9 00000028 595D3A2000         
    10                                  
    11 0000002D 0A00                        saltoLinea  db 10, 0     ; Salto de l√≠nea al final de cada fila     
    12 0000002F 00                          posicion    db       0
    13 00000030 256C6900                    format	db	'%li', 0
    14                                  
    15                                      longitudElemento equ	1
    16                                      cantidadColumnas equ 8
    17                                      cantidadFilas    equ	9
    18                                      
    19 00000034 01                          posx_ini db 1
    20 00000035 01                          posy_ini db 1
    21                                      
    22 00000036 01                          posx_fin db 1
    23 00000037 01                          posy_fin db 1
    24                                      
    25 00000038 01                          elemento_inicial db 1
    26                                  
    27 00000039 256C6920256C6900            format2	db	'%li %li', 0
    28 00000041 636C65617200                cmd_clear db "clear",0
    29                                      
    30 00000047 4573207475726E6F20-         esTurnoDe	db	'Es turno de los %s!',10,0
    30 00000050 6465206C6F73202573-
    30 00000059 210A00             
    31 0000005C 6F66696369616C6573-         oficiales   db 'oficiales',0
    31 00000065 00                 
    32 00000066 736F6C6461646F7300          soldados    db 'soldados',0
    33 0000006F 736F6C6461646F7300          jugadorActual db 'soldados',0
    34 00000078 636173696C6C65726F-         casilleroInvalido db 'casillero invalido!',10,0
    34 00000081 20696E76616C69646F-
    34 0000008A 210A00             
    35 0000008D 6D6F76696D69656E74-         msj_movimiento_oficial_invalido db 'movimiento_oficial_invalido! Vuelva a intentarlo',10,0
    35 00000096 6F5F6F66696369616C-
    35 0000009F 5F696E76616C69646F-
    35 000000A8 21205675656C766120-
    35 000000B1 6120696E74656E7461-
    35 000000BA 726C6F0A00         
    36 000000BF 6D6F76696D69656E74-         msj_movimiento_soldado_invalido db 'movimiento_soldado_invalido! Vuelva a intentarlo',10,0
    36 000000C8 6F5F736F6C6461646F-
    36 000000D1 5F696E76616C69646F-
    36 000000DA 21205675656C766120-
    36 000000E3 6120696E74656E7461-
    36 000000EC 726C6F0A00         
    37                                  
    38 000000F1 47616E61726F6E206C-         msj_ganaron_soldados_por_falta_oficiales db 'Ganaron los soldados, no hay mas oficiales que puedan defender la fortaleza!',10,0
    38 000000FA 6F7320736F6C646164-
    38 00000103 6F732C206E6F206861-
    38 0000010C 79206D6173206F6669-
    38 00000115 6369616C6573207175-
    38 0000011E 652070756564616E20-
    38 00000127 646566656E64657220-
    38 00000130 6C6120666F7274616C-
    38 00000139 657A61210A00       
    39 0000013F 47616E61726F6E206C-         msj_ganaron_soldados_por_invasion db 'Ganaron los soldados, invadieron la fortaleza!',10,0
    39 00000148 6F7320736F6C646164-
    39 00000151 6F732C20696E766164-
    39 0000015A 6965726F6E206C6120-
    39 00000163 666F7274616C657A61-
    39 0000016C 210A00             
    40 0000016F 47616E61726F6E206C-         msj_ganaron_oficiales_por_falta_soldados db 'Ganaron los oficiales, ya no quedan mas soldados!',10,0
    40 00000178 6F73206F6669636961-
    40 00000181 6C65732C207961206E-
    40 0000018A 6F2071756564616E20-
    40 00000193 6D617320736F6C6461-
    40 0000019C 646F73210A00       
    41                                  
    42 000001A2 46696E2064656C206A-         endGame    db 'Fin del juego!',10,0
    42 000001AB 7565676F210A00     
    43 000001B2 01                          turno db 1
    44 000001B3 02                          divisor db 2 
    45                                      
    46 000001B4 203132333435363700          matriz  db ' 1234567',0
    47 000001BD 31207C5858587C2000                  db '1 |XXX| ',0
    48 000001C6 325F7C5858587C5F00                  db '2_|XXX|_',0
    49 000001CF 334F20585858585800                  db '3O XXXXX',0
    50 000001D8 345858582058585800                  db '4XXX XXX',0
    51 000001E1 355858585820585800                  db '5XXXX XX',0
    52 000001EA 367E7C5858587C7E00                  db '6~|XXX|~',0
    53 000001F3 37207C5858587C2000                  db '7 |XXX| ',0
    54                                  
    55                                  section .bss    
    56 00000000 <res Ah>                    buffer		resb	10
    57 0000000A ????                        cadena resb 2
    58 0000000C ??                          numero  resb 1
    59                                  
    60                                  section .text
    61                                  main:
    62 00000000 4889E5                      mov rbp, rsp; for correct debugging
    63 00000003 4883EC08                    sub rsp, 8
    64 00000007 41BE02000000                mov r14, 2 ;seteo cantidad de oficiales.
    65 0000000D E886040000                  call asignar_jugador_inicial
    66                                  ciclo_juego:
    67 00000012 E826030000                  call clear_screen
    68 00000017 E818020000                  call mostrar_tablero
    69 0000001C E8FA030000                  call mostrar_jugador_actual
    70                                  pedir_movimiento:
    71 00000021 E82F030000                  call pedir_casillero_origen
    72                                  pedir_movimiento_destino:
    73 00000026 E894030000                  call pedir_casillero_destino
    74                                  
    75 0000002B 8A0425[B2010000]            mov al, [turno]
    76 00000032 3C01                        cmp al, 1
    77 00000034 7410                        je validar_movimiento_soldado
    78 00000036 E832060000                  call validar_movimiento_oficial ;hacer esto solo si es el turno del oficial.
    79 0000003B 4983FC00                    cmp r12, 0                  ; Si la validacion esta mal -> r12 != 0 -> volver a pedir origen-destin0
    80 0000003F 75E0                        jne pedir_movimiento         ; Si no es 0 -> back to pedir_movimiento
    81 00000041 E9BC010000                  jmp prox_turno
    82                                  
    83                                  validar_movimiento_soldado:
    84 00000046 B800000000                  mov rax,0
    85                                      
    86 0000004B 8A0425[36000000]            mov al, [posx_fin]
    87 00000052 8A2425[34000000]            mov ah, [posx_ini]
    88 00000059 28E0                        sub al, ah
    89                                  
    90 0000005B 3C00                        cmp al, 0
    91 0000005D 7415                        je validar_movimiento_soldado_horizontal
    92 0000005F 3CFF                        cmp al,-1 
    93 00000061 0F84D6000000                je validar_movimiento_soldado_arriba
    94 00000067 3C01                        cmp al, 1
    95 00000069 0F845C010000                je validar_movimiento_soldado_abajo
    96 0000006F E94F070000                  jmp movimiento_soldado_invalido
    97                                      
    98                                  ;fn terminada
    99                                  validar_movimiento_soldado_horizontal:
   100 00000074 B800000000                  mov rax,0
   101 00000079 8A0425[34000000]            mov al, [posx_ini]
   102                                  
   103 00000080 3C07                        cmp al, 7
   104 00000082 740D                        je validar_movimiento_soldado_horizontal_fila_siete_seis
   105 00000084 3C06                        cmp al, 6
   106 00000086 7409                        je validar_movimiento_soldado_horizontal_fila_siete_seis
   107 00000088 3C05                        cmp al, 5
   108 0000008A 7451                        je validar_movimiento_soldado_horizontal_fila_cinco
   109                                  
   110 0000008C E932070000                  jmp movimiento_soldado_invalido
   111                                  
   112                                  ;fn terminada
   113                                  validar_movimiento_soldado_horizontal_fila_siete_seis:
   114 00000091 BA00000000                  mov rdx,0
   115 00000096 8A1425[35000000]            mov dl, [posy_ini]
   116 0000009D 8A3425[37000000]            mov dh, [posy_fin]
   117                                  
   118 000000A4 80FA03                      cmp dl, 3
   119 000000A7 740F                        je validar_movimiento_soldado_horizontal_columna_tres_cinco
   120 000000A9 80FA04                      cmp dl, 4
   121 000000AC 7418                        je validar_movimiento_soldado_horizontal_columna_cuatro
   122 000000AE 80FA05                      cmp dl, 5
   123 000000B1 7405                        je validar_movimiento_soldado_horizontal_columna_tres_cinco
   124 000000B3 E90B070000                  jmp movimiento_soldado_invalido
   125                                  
   126                                  validar_movimiento_soldado_horizontal_columna_tres_cinco:
   127 000000B8 80FE04                      cmp dh, 4
   128 000000BB 0F8427070000                je movimiento_soldado_valido
   129 000000C1 E9FD060000                  jmp movimiento_soldado_invalido
   130                                  
   131                                  validar_movimiento_soldado_horizontal_columna_cuatro:
   132 000000C6 80FE03                      cmp dh, 3
   133 000000C9 0F8419070000                je movimiento_soldado_valido
   134 000000CF 80FE05                      cmp dh, 5
   135 000000D2 0F8410070000                je movimiento_soldado_valido
   136 000000D8 E9E6060000                  jmp movimiento_soldado_invalido
   137                                  
   138                                  validar_movimiento_soldado_horizontal_fila_cinco:
   139 000000DD BA00000000                  mov rdx,0
   140 000000E2 8A1425[35000000]            mov dl, [posy_ini]
   141 000000E9 8A3425[37000000]            mov dh, [posy_fin]
   142                                      
   143 000000F0 80FA03                      cmp dl, 3
   144 000000F3 7E0F                        jle movimiento_soldado_derecha
   145 000000F5 80FA04                      cmp dl, 4
   146 000000F8 742A                        je movimiento_soldado_derecha_izquierda
   147 000000FA 80FA07                      cmp dl, 7
   148 000000FD 7E15                        jle movimiento_soldado_izquierda
   149 000000FF E9BF060000                  jmp movimiento_soldado_invalido
   150                                  
   151                                  movimiento_soldado_derecha:
   152 00000104 28D6                        sub dh,dl
   153 00000106 80FE01                      cmp dh, 1
   154 00000109 0F84D9060000                je movimiento_soldado_valido
   155 0000010F E9AF060000                  jmp movimiento_soldado_invalido
   156                                  
   157                                  movimiento_soldado_izquierda:
   158 00000114 28D6                        sub dh,dl
   159 00000116 80FEFF                      cmp dh,-1
   160 00000119 0F84C9060000                je movimiento_soldado_valido
   161 0000011F E99F060000                  jmp movimiento_soldado_invalido
   162                                  
   163                                  movimiento_soldado_derecha_izquierda:
   164 00000124 28D6                        sub dh,dl
   165 00000126 80FEFF                      cmp dh,-1
   166 00000129 0F84B9060000                je movimiento_soldado_valido
   167 0000012F 80FE01                      cmp dh, 1
   168 00000132 0F84B0060000                je movimiento_soldado_valido
   169 00000138 E986060000                  jmp movimiento_soldado_invalido
   170                                  
   171                                  ;;fin validar movimientos horizontales
   172                                  validar_movimiento_soldado_arriba:
   173 0000013D B800000000                  mov rax,0
   174 00000142 8A0425[34000000]            mov al, [posx_ini]
   175                                      
   176 00000149 3C06                        cmp al, 6
   177 0000014B 7409                        je validar_movimiento_soldado_arriba_en_fortaleza
   178 0000014D 3C07                        cmp al, 7
   179 0000014F 7405                        je validar_movimiento_soldado_arriba_en_fortaleza
   180 00000151 E96D060000                  jmp movimiento_soldado_invalido
   181                                  
   182                                  validar_movimiento_soldado_arriba_en_fortaleza:
   183 00000156 BA00000000                  mov rdx,0
   184 0000015B 8A1425[35000000]            mov dl, [posy_ini]
   185 00000162 8A3425[37000000]            mov dh, [posy_fin]
   186                                  
   187 00000169 80FA03                      cmp dl, 3
   188 0000016C 740F                        je validar_movimiento_soldado_arriba_en_fortaleza_columna_tres
   189 0000016E 80FA04                      cmp dl, 4
   190 00000171 7421                        je validar_movimiento_soldado_arriba_en_fortaleza_columna_cuatro
   191 00000173 80FA05                      cmp dl, 5
   192 00000176 743C                        je validar_movimiento_soldado_arriba_en_fortaleza_columna_cinco
   193 00000178 E946060000                  jmp movimiento_soldado_invalido
   194                                  
   195                                  validar_movimiento_soldado_arriba_en_fortaleza_columna_tres:
   196 0000017D 80FE03                      cmp dh, 3
   197 00000180 0F8407060000                je movimiento_oficial_ok
   198 00000186 80FE04                      cmp dh, 4
   199 00000189 0F84FE050000                je movimiento_oficial_ok
   200 0000018F E92F060000                  jmp movimiento_soldado_invalido
   201                                  
   202                                  validar_movimiento_soldado_arriba_en_fortaleza_columna_cuatro:
   203 00000194 80FE03                      cmp dh, 3
   204 00000197 0F84F0050000                je movimiento_oficial_ok
   205 0000019D 80FE04                      cmp dh, 4
   206 000001A0 0F84E7050000                je movimiento_oficial_ok
   207 000001A6 80FE05                      cmp dh, 5
   208 000001A9 0F84DE050000                je movimiento_oficial_ok
   209 000001AF E90F060000                  jmp movimiento_soldado_invalido
   210                                  
   211                                  validar_movimiento_soldado_arriba_en_fortaleza_columna_cinco:
   212 000001B4 80FE04                      cmp dh, 4
   213 000001B7 0F84D0050000                je movimiento_oficial_ok
   214 000001BD 80FE05                      cmp dh, 5
   215 000001C0 0F84C7050000                je movimiento_oficial_ok
   216 000001C6 E9F8050000                  jmp movimiento_soldado_invalido
   217                                  
   218                                  validar_movimiento_soldado_abajo:
   219 000001CB BA00000000                  mov rdx,0
   220 000001D0 8A1425[35000000]            mov dl, [posy_ini]
   221 000001D7 8A3425[37000000]            mov dh, [posy_fin]
   222                                      
   223 000001DE 28D6                        sub dh, dl
   224 000001E0 80FEFF                      cmp dh,-1
   225 000001E3 0F84FF050000                je movimiento_soldado_valido
   226 000001E9 80FE00                      cmp dh, 0
   227 000001EC 0F84F6050000                je movimiento_soldado_valido
   228 000001F2 80FE01                      cmp dh, 1
   229 000001F5 0F84ED050000                je movimiento_soldado_valido
   230 000001FB E9C3050000                  jmp movimiento_soldado_invalido
   231                                  
   232                                  ;;fin validar_movimiento_soldado
   233 00000200 EB00                        jmp prox_turno
   234                                      
   235                                  prox_turno:
   236 00000202 E834020000                  call actualizar_turno
   237 00000207 E899000000                  call actualizar_tablero
   238                                      ;call eliminar_oficial_desentendido
   239 0000020C E8DC050000                  call verificar_ganador
   240 00000211 E9FCFDFFFF                  jmp ciclo_juego      ; Repite el bucle
   241                                          
   242                                      fin:
   243                                  ;    add rsp, 8             ; Restaura el espacio de la pila
   244                                      ;call clear_screen
   245                                  
   246 00000216 48BF-                       mov rdi, endGame
   246 00000218 [A201000000000000] 
   247 00000220 4883EC08                    sub rsp, 8
   248 00000224 E8(00000000)                call printf
   249 00000229 4883C408                    add rsp,8
   250                                  
   251 0000022D B44C                        mov ah, 4Ch    ; C√≥digo de funci√≥n para terminar el programa;    mov al, 0      ; C√≥digo de retorno (0 indica √©xito)
   252 0000022F B000                        mov al, 0      ; C√≥digo de retorno (0 indica √©xito)
   253 00000231 CD21                        int 21h        ; Llamada a la interrupci√≥n 21h
   254                                  
   255 00000233 C3                          ret
   256                                  
   257                                  mostrar_tablero:
   258 00000234 B800000000                  mov rax, 0
   259 00000239 48890425[2F000000]          mov [posicion], rax 
   260 00000241 B908000000                  mov rcx, cantidadColumnas
   261 00000246 4883EC08                    sub rsp, 8
   262                                      fila_loop:
   263 0000024A 51                              push rcx ;es necesario para loop, sino el registro rcx se pisa y loopea infinito
   264                                          ; Carga la direcci√≥n de la fila actual en la matriz
   265                                  
   266                                          ; Imprime la fila actual
   267                                  
   268 0000024B 48BF-                           mov rdi, matriz         ; Pasa la direcci√≥n de la fila a printf
   268 0000024D [B401000000000000] 
   269 00000255 48033C25[2F000000]              add rdi, [posicion]
   270 0000025D 4829C0                          sub rax, rax           ; Limpia rax para printf
   271                                          
   272                                          
   273 00000260 E8(00000000)                    call printf
   274                                          ; Imprime salto de l√≠nea despu√©s de cada fila
   275 00000265 48BF-                           mov rdi, saltoLinea
   275 00000267 [2D00000000000000] 
   276 0000026F 4831C0                          xor rax, rax           ; Limpia rax para printf
   277 00000272 E8(00000000)                    call printf
   278 00000277 59                              pop rcx ;es necesario para loop, sino el registro rcx se pisa y loopea infinito
   279                                          
   280                                          ; Sumar 10 a "posicion"
   281 00000278 488B0425[2F000000]              mov rax, [posicion]         ; Carga el valor de "posicion" en rax
   282 00000280 4883C009                        add rax, cantidadFilas                 ; Suma 10 a rax
   283 00000284 48890425[2F000000]              mov [posicion], rax         ; Guarda el nuevo valor en "posicion"
   284                                          
   285 0000028C E2BC                            loop fila_loop
   286                                          
   287 0000028E 48BF-                           mov rdi, saltoLinea
   287 00000290 [2D00000000000000] 
   288 00000298 4831C0                          xor rax, rax           ; Limpia rax para printf
   289 0000029B E8(00000000)                    call printf
   290 000002A0 4883C408                        add rsp, 8
   291 000002A4 C3                              ret
   292                                  
   293                                  actualizar_tablero:
   294                                      ;Posicionamiento en el elemento i,j de una matriz
   295                                      ;(i-1)*longitudFila + (j-1)*longitudElemento
   296                                      ;longitdFila= longitudElemento*cantidadColumnas
   297 000002A5 4829C9                      sub rcx, rcx
   298 000002A8 4829C0                      sub rax, rax
   299 000002AB 4829DB                      sub rbx, rbx
   300 000002AE 4D29D2                      sub r10, r10
   301 000002B1 8A0425[34000000]            mov al,[posx_ini] ;guardo el valor de la fila, en AL(8bits) 
   302                                                      ;ya que posx es db (byte= 8bits) sino guarda cualquier cosa
   303                                  ;    sub rax,1 -> no es necesaria la resta ya que la matriz empieza en 1,1
   304 000002B8 41B809000000                mov r8, cantidadFilas
   305 000002BE 49F7E8                      imul r8   ;me desplazo en la fila
   306 000002C1 4801C1                      add rcx,rax
   307                                      
   308 000002C4 8A0425[35000000]            mov al,[posy_ini] ;guardo el valor de la col,
   309                                  ;    sub rax,1
   310 000002CB 41B801000000                mov r8, longitudElemento ;guardo en r8 para darle longitud y poder multiplicar usando imul
   311 000002D1 49F7E8                      imul r8 ;me desplazo en la columna
   312 000002D4 4801C1                      add rcx,rax ;sumo los desplazamientos
   313                                      
   314                                      
   315 000002D7 48BB-                       mov rbx,matriz ;pongo el pto al inicio de la matriz
   315 000002D9 [B401000000000000] 
   316 000002E1 4801CB                      add rbx,rcx ;me posicione en la matriz
   317                                  
   318 000002E4 4C8B13                      mov r10, [rbx] ;guardo un elemento
   319 000002E7 4C8B4B01                    mov r9, [rbx+1] ;guardo en r9 lo que le sigue de matriz posterior al elemento a actualizar
   320 000002EB 41B820000000                mov r8, " " ; lo muevo a un reg para darle (y estar seguro de su) longitud
   321 000002F1 4C8903                      mov [rbx],r8 ;muevo el valor(de igual longitud). muevo a la posicion de la matriz a actualizar
   322                                      
   323                                      ;despues de agregar el nuevo valor, agregarle el resto de la matriz que estaba antes.
   324 000002F4 4C894B01                    mov [rbx+1],r9
   325                                      
   326                                      
   327                                      ;;repito con casillero_destino
   328                                      ;;y guardo en el destino lo que guarde en r10 (el elemento origen)
   329                                      
   330                                      
   331                                      ;Posicionamiento en el elemento i,j de una matriz
   332                                      ;(i-1)*longitudFila + (j-1)*longitudElemento
   333                                      ;longitdFila= longitudElemento*cantidadColumnas
   334 000002F8 4829C9                      sub rcx, rcx
   335 000002FB 8A0425[36000000]            mov al,[posx_fin] ;guardo el valor de la fila, en AL(8bits) 
   336                                                      ;ya que posx es db (byte= 8bits) sino guarda cualquier cosa
   337                                  ;    sub rax,1 -> no es necesaria la resta ya que la matriz empieza en 1,1
   338 00000302 41B809000000                mov r8, cantidadFilas
   339 00000308 49F7E8                      imul r8   ;me desplazo en la fila
   340 0000030B 4801C1                      add rcx,rax
   341                                      
   342 0000030E 8A0425[37000000]            mov al,[posy_fin] ;guardo el valor de la col,
   343                                  ;    sub rax,1
   344 00000315 41B801000000                mov r8, longitudElemento ;guardo en r8 para darle longitud y poder multiplicar usando imul
   345 0000031B 49F7E8                      imul r8 ;me desplazo en la columna
   346 0000031E 4801C1                      add rcx,rax ;sumo los desplazamientos
   347                                      
   348                                      
   349 00000321 48BB-                       mov rbx,matriz ;pongo el pto al inicio de la matriz
   349 00000323 [B401000000000000] 
   350 0000032B 4801CB                      add rbx,rcx ;me posicione en la matriz
   351                                  
   352 0000032E 4C8B4B01                    mov r9, [rbx+1] ;guardo en r9 lo que le sigue de matriz posterior al elemento a actualizar
   353 00000332 4D89D0                      mov r8, r10 ; lo muevo a un reg para darle (y estar seguro de su) longitud
   354 00000335 4C8903                      mov [rbx],r8 ;muevo el valor(de igual longitud). muevo a la posicion de la matriz a actualizar
   355                                      
   356                                      ;despues de agregar el nuevo valor, agregarle el resto de la matriz que estaba antes.
   357 00000338 4C894B01                    mov [rbx+1],r9
   358                                  
   359 0000033C C3                          ret
   360                                  
   361                                  clear_screen:
   362                                  
   363 0000033D 48BF-                       mov rdi, cmd_clear
   363 0000033F [4100000000000000] 
   364 00000347 4883EC08                    sub rsp, 8
   365 0000034B E8(00000000)                call system
   366 00000350 4883C408                    add rsp, 8
   367 00000354 C3                          ret
   368                                      
   369                                  pedir_casillero_origen:
   370                                      
   371 00000355 4889E0                      mov rax, rsp
   372 00000358 4883E00F                    and rax, 15
   373 0000035C 7404                        je no_restar_rsp_1
   374 0000035E 4883EC08                    sub rsp, 8
   375                                  no_restar_rsp_1:
   376 00000362 48BF-                       mov rdi, msjIngFilaColumnaOrigen
   376 00000364 [0000000000000000] 
   377 0000036C E8(00000000)                call printf
   378                                  
   379 00000371 48BF-                       mov rdi, cadena      ; Direcci√≥n de 'cadena'
   379 00000373 [0A00000000000000] 
   380 0000037B E8(00000000)                call gets
   381 00000380 4883C408                    add rsp, 8
   382                                  
   383                                      ; Extraer el primer car√°cter (primer n√∫mero)
   384 00000384 480FB60425-                 movzx rax, byte [cadena]     ; Cargar el primer car√°cter de 'cadena' en rax
   384 00000389 [0A000000]         
   385 0000038D 4883E830                    sub rax, '0'                 ; Convertir de ASCII a valor num√©rico
   386 00000391 880425[34000000]            mov [posx_ini], al            ; Guardar el valor en 'posx_ini'
   387                                      
   388 00000398 803C25[34000000]00          cmp byte [posx_ini], 0
   389 000003A0 0F8470FEFFFF                je fin               ; Si es 0, salta a "fin de juego"
   390                                      
   391                                      ; Extraer el segundo car√°cter (segundo n√∫mero)
   392 000003A6 480FB60425-                 movzx rax, byte [cadena + 1] ; Cargar el segundo car√°cter de 'cadena' en rax
   392 000003AB [0B000000]         
   393 000003AF 4883E830                    sub rax, '0'                 ; Convertir de ASCII a valor num√©rico
   394 000003B3 880425[35000000]            mov [posy_ini], al            ; Guardar el valor en 'posy_ini'
   395                                      
   396 000003BA E9EA000000                  jmp validar_casillero_origen
   397                                      
   398                                  pedir_casillero_destino:
   399 000003BF 4883EC08                    sub rsp, 8
   400 000003C3 48BF-                       mov rdi, msjIngFilaColumnaDestino
   400 000003C5 [1600000000000000] 
   401 000003CD E8(00000000)                call printf
   402 000003D2 4883C408                    add rsp, 8
   403                                  
   404 000003D6 48BF-                       mov rdi, cadena      ; Direcci√≥n de 'cadena'
   404 000003D8 [0A00000000000000] 
   405 000003E0 4883EC08                    sub rsp, 8
   406 000003E4 E8(00000000)                call gets
   407 000003E9 4883C408                    add rsp, 8
   408                                  
   409                                      ; Extraer el primer car√°cter (primer n√∫mero)
   410 000003ED 480FB60425-                 movzx rax, byte [cadena]     ; Cargar el primer car√°cter de 'cadena' en rax
   410 000003F2 [0A000000]         
   411 000003F6 4883E830                    sub rax, '0'                 ; Convertir de ASCII a valor num√©rico
   412 000003FA 880425[36000000]            mov [posx_fin], al            ; Guardar el valor en 'posx_ini'
   413                                      
   414                                      ; Extraer el segundo car√°cter (segundo n√∫mero)
   415 00000401 480FB60425-                 movzx rax, byte [cadena + 1] ; Cargar el segundo car√°cter de 'cadena' en rax
   415 00000406 [0B000000]         
   416 0000040A 4883E830                    sub rax, '0'                 ; Convertir de ASCII a valor num√©rico
   417 0000040E 880425[37000000]            mov [posy_fin], al            ; Guardar el valor en 'posy_ini'
   418 00000415 E9B2010000                  jmp es_destino_valido
   419 0000041A C3                          ret
   420                                      
   421                                  mostrar_jugador_actual:    
   422 0000041B 4883EC08                    sub rsp, 8
   423 0000041F 48BF-                       mov rdi, esTurnoDe
   423 00000421 [4700000000000000] 
   424 00000429 488B3425[6F000000]          mov rsi, [jugadorActual]
   425                                   
   426 00000431 E8(00000000)                call printf
   427 00000436 4883C408                    add rsp, 8
   428 0000043A C3                          ret
   429                                      
   430                                  actualizar_turno:
   431 0000043B 8A0425[B2010000]            mov al, [turno]
   432 00000442 800425[B2010000]01          add byte [turno], 1
   433 0000044A 8A0425[B2010000]            mov al, [turno]
   434 00000451 30E4                        xor ah, ah        ; Limpiar AH para asegurar que AX est√° correcto
   435                                  
   436                                      ; Dividir AX entre el divisor (2)
   437 00000453 4831DB                      xor rbx, rbx        
   438 00000456 8A1C25[B3010000]            mov bl, [divisor]
   439 0000045D F6F3                        div bl            ; AX / BL -> AL = cociente, AH = resto
   440                                  
   441                                      ; Ahora, AH contiene el resto (turno % 2)
   442 0000045F 80FC00                      cmp ah, 0         ; Compara el resto con 0
   443 00000462 7402                        je es_par         ; Si el resto es 0, turno es par
   444 00000464 EB19                        jmp es_impar      ; Si no, turno es impar
   445                                  
   446                                  es_par:          
   447 00000466 C60425[B2010000]00          mov byte[turno], 0
   448 0000046E 488D0425[5C000000]          lea rax, [oficiales]          ; Cargar la direcci√≥n de 'soldados' en AX
   449 00000476 48890425[6F000000]          mov [jugadorActual], rax
   450 0000047E C3                          ret
   451                                  
   452                                  es_impar:        
   453 0000047F C60425[B2010000]01          mov byte[turno], 1
   454 00000487 488D0425[66000000]          lea rax, [soldados]          ; Cargar la direcci√≥n de 'soldados' en AX
   455 0000048F 48890425[6F000000]          mov [jugadorActual], rax
   456 00000497 C3                          ret
   457                                      
   458                                  asignar_jugador_inicial:
   459 00000498 488D0425[66000000]          lea rax, [soldados]          ; Cargar la direcci√≥n de 'soldados' en AX
   460 000004A0 48890425[6F000000]          mov [jugadorActual], rax
   461 000004A8 C3                          ret
   462                                      
   463                                  validar_casillero_origen:
   464                                      ;;valido que este dentro del tablero
   465 000004A9 4829C0                      sub rax, rax
   466 000004AC 4829DB                      sub rbx, rbx
   467 000004AF 8A0425[34000000]            mov al,[posx_ini]
   468 000004B6 8A1C25[35000000]            mov bl,[posy_ini]
   469                                      
   470                                      validar_dentro_x:
   471 000004BD 3C01                        cmp al, 1
   472 000004BF 740E                        je validar_dentro_y
   473 000004C1 3C02                        cmp al, 2
   474 000004C3 740A                        je validar_dentro_y
   475 000004C5 3C06                        cmp al, 6
   476 000004C7 7406                        je validar_dentro_y
   477 000004C9 3C07                        cmp al, 7
   478 000004CB 7402                        je validar_dentro_y
   479 000004CD EB16                        jmp dentro_tablero_origen_ok
   480                                  validar_dentro_y:
   481 000004CF 80FB01                      cmp bl, 1
   482 000004D2 7476                        je origen_invalido
   483 000004D4 80FB02                      cmp bl, 2
   484 000004D7 7471                        je origen_invalido
   485 000004D9 80FB06                      cmp bl, 6
   486 000004DC 746C                        je origen_invalido
   487 000004DE 80FB07                      cmp bl, 7
   488 000004E1 7467                        je origen_invalido
   489 000004E3 EB00                        jmp dentro_tablero_origen_ok
   490                                      
   491                                  dentro_tablero_origen_ok:
   492 000004E5 8A0425[B2010000]            mov al, [turno]
   493 000004EC 30E4                        xor ah, ah        ; Limpiar AH para asegurar que AX est√° correcto
   494                                  
   495                                      ; Dividir AX entre el divisor (2)
   496 000004EE 4831DB                      xor rbx, rbx        
   497 000004F1 8A1C25[B3010000]            mov bl, [divisor]
   498 000004F8 F6F3                        div bl            ; AX / BL -> AL = cociente, AH = resto
   499                                  
   500                                      ; Ahora, AH contiene el resto (turno % 2)
   501 000004FA 80FC00                      cmp ah, 0         ; Compara el resto con 0
   502 000004FD 7468                        je es_oficial_valido         ; Si el resto es 0, turno es par
   503 000004FF EB01                        jmp es_soldado_valido ; Si no, turno es impar
   504 00000501 C3                          ret
   505                                      
   506                                  es_soldado_valido:
   507                                  ;busco el elemento en la matriz; y lo guardo en r10 para comparar el elemento.
   508 00000502 4829C9                      sub rcx, rcx
   509 00000505 4829C0                      sub rax, rax
   510 00000508 4829DB                      sub rbx, rbx
   511 0000050B 4D29D2                      sub r10, r10
   512 0000050E 8A0425[34000000]            mov al,[posx_ini] 
   513 00000515 41B809000000                mov r8, cantidadFilas
   514 0000051B 49F7E8                      imul r8
   515 0000051E 4801C1                      add rcx,rax
   516                                      
   517 00000521 8A0425[35000000]            mov al,[posy_ini]
   518 00000528 41B801000000                mov r8, longitudElemento 
   519 0000052E 49F7E8                      imul r8
   520 00000531 4801C1                      add rcx,rax
   521                                      
   522 00000534 48BB-                       mov rbx,matriz 
   522 00000536 [B401000000000000] 
   523 0000053E 4801CB                      add rbx,rcx ;me posicione en la matriz
   524                                  
   525 00000541 4C8B13                      mov r10, [rbx] ;guardo un elemento
   526 00000544 4180FA58                    cmp r10b, 'X'
   527 00000548 741C                        je turno_soldado_ok
   528                                      ;sino fue un mal ingreso:
   529                                  origen_invalido:
   530 0000054A 48BF-                       mov rdi, casilleroInvalido
   530 0000054C [7800000000000000] 
   531 00000554 4883EC08                    sub rsp, 8
   532 00000558 E8(00000000)                call printf
   533 0000055D 4883C408                    add rsp, 8
   534 00000561 E9EFFDFFFF                  jmp pedir_casillero_origen
   535                                  turno_soldado_ok:
   536 00000566 C3                          ret
   537                                      
   538                                  es_oficial_valido:
   539                                  ;busco el elemento en la matriz; y lo guardo en r10 para comparar el elemento.
   540 00000567 4829C9                      sub rcx, rcx
   541 0000056A 4829C0                      sub rax, rax
   542 0000056D 4829DB                      sub rbx, rbx
   543 00000570 4D29D2                      sub r10, r10
   544 00000573 8A0425[34000000]            mov al,[posx_ini] 
   545 0000057A 41B809000000                mov r8, cantidadFilas
   546 00000580 49F7E8                      imul r8
   547 00000583 4801C1                      add rcx,rax
   548                                      
   549 00000586 8A0425[35000000]            mov al,[posy_ini]
   550 0000058D 41B801000000                mov r8, longitudElemento 
   551 00000593 49F7E8                      imul r8
   552 00000596 4801C1                      add rcx,rax
   553                                      
   554 00000599 48BB-                       mov rbx,matriz 
   554 0000059B [B401000000000000] 
   555 000005A3 4801CB                      add rbx,rcx ;me posicione en la matriz
   556                                  
   557 000005A6 4C8B13                      mov r10, [rbx] ;guardo un elemento
   558                                  ;;
   559 000005A9 4180FA4F                    cmp r10b, 'O'
   560 000005AD 741C                        je turno_oficial_ok
   561                                      ;sino fue un mal ingreso:
   562 000005AF 48BF-                       mov rdi, casilleroInvalido
   562 000005B1 [7800000000000000] 
   563 000005B9 4883EC08                    sub rsp, 8
   564 000005BD E8(00000000)                call printf
   565 000005C2 4883C408                    add rsp, 8
   566 000005C6 E98AFDFFFF                  jmp pedir_casillero_origen
   567                                      turno_oficial_ok:
   568 000005CB C3                          ret    
   569                                      
   570                                      
   571                                  es_destino_valido:
   572                                      ;;valido que este dentro del tablero
   573 000005CC 4829C0                      sub rax, rax
   574 000005CF 4829DB                      sub rbx, rbx
   575 000005D2 8A0425[36000000]            mov al,[posx_fin]
   576 000005D9 8A1C25[37000000]            mov bl,[posy_fin]
   577                                      
   578                                  validar_dentro_x_fin:
   579 000005E0 3C01                        cmp al, 1
   580 000005E2 740E                        je validar_dentro_y_fin
   581 000005E4 3C02                        cmp al, 2
   582 000005E6 740A                        je validar_dentro_y_fin
   583 000005E8 3C06                        cmp al, 6
   584 000005EA 7406                        je validar_dentro_y_fin
   585 000005EC 3C07                        cmp al, 7
   586 000005EE 7402                        je validar_dentro_y_fin
   587 000005F0 EB16                        jmp dentro_tablero_destino_ok
   588                                  validar_dentro_y_fin:
   589 000005F2 80FB01                      cmp bl, 1
   590 000005F5 7459                        je destino_invalido
   591 000005F7 80FB02                      cmp bl, 2
   592 000005FA 7454                        je destino_invalido
   593 000005FC 80FB06                      cmp bl, 6
   594 000005FF 744F                        je destino_invalido
   595 00000601 80FB07                      cmp bl, 7
   596 00000604 744A                        je destino_invalido
   597 00000606 EB00                        jmp dentro_tablero_destino_ok
   598                                      
   599                                  dentro_tablero_destino_ok:
   600                                  ;busco el elemento en la matriz; y lo guardo en r10 para comparar el elemento.
   601 00000608 4829C9                      sub rcx, rcx
   602 0000060B 4829C0                      sub rax, rax
   603 0000060E 4829DB                      sub rbx, rbx
   604 00000611 4D29D2                      sub r10, r10
   605 00000614 8A0425[36000000]            mov al,[posx_fin] 
   606 0000061B 41B809000000                mov r8, cantidadFilas
   607 00000621 49F7E8                      imul r8
   608 00000624 4801C1                      add rcx,rax
   609                                      
   610 00000627 8A0425[37000000]            mov al,[posy_fin]
   611 0000062E 41B801000000                mov r8, longitudElemento 
   612 00000634 49F7E8                      imul r8
   613 00000637 4801C1                      add rcx,rax
   614                                      
   615 0000063A 48BB-                       mov rbx,matriz 
   615 0000063C [B401000000000000] 
   616 00000644 4801CB                      add rbx,rcx ;me posicione en la matriz
   617                                  
   618 00000647 4C8B13                      mov r10, [rbx] ;guardo un elemento
   619                                  ;;
   620 0000064A 4180FA20                    cmp r10b, ' '
   621 0000064E 741C                        je destino_ok
   622                                      ;sino fue un mal ingreso:
   623                                  destino_invalido:
   624 00000650 48BF-                       mov rdi, casilleroInvalido
   624 00000652 [7800000000000000] 
   625 0000065A 4883EC08                    sub rsp, 8
   626 0000065E E8(00000000)                call printf
   627 00000663 4883C408                    add rsp, 8
   628 00000667 E953FDFFFF                  jmp pedir_casillero_destino
   629                                  destino_ok:
   630 0000066C C3                          ret    
   631                                  validar_movimiento_oficial:
   632                                  ;;falta resolver esto -> solo de a 1 en cualqeuir dir.
   633 0000066D 41BC00000000                mov r12,0
   634 00000673 B800000000                  mov rax,0
   635 00000678 8A0425[34000000]            mov al, [posx_ini]
   636 0000067F 8A2425[36000000]            mov ah, [posx_fin]
   637 00000686 28E0                        sub al,ah
   638                                  
   639 00000688 BA00000000                  mov rdx,0
   640 0000068D 8A1425[35000000]            mov dl, [posy_ini]
   641 00000694 8A3425[37000000]            mov dh, [posy_fin]
   642 0000069B 28F2                        sub dl,dh
   643                                  
   644 0000069D 3C00                        cmp al, 0
   645 0000069F 7410                        je validar_movimientos_oficial_horizontal ;;listo
   646 000006A1 3C01                        cmp al, 1
   647 000006A3 7428                        je validar_movimiento_simple_oficial_arriba_abajo ;;listo
   648 000006A5 3CFF                        cmp al,-1
   649 000006A7 7424                        je validar_movimiento_simple_oficial_arriba_abajo ;;listo
   650                                      
   651 000006A9 3C02                        cmp al, 2
   652 000006AB 7440                        je validar_movimiento_doble_oficial_superiores ;;voy a validar esto
   653 000006AD 3CFE                        cmp al,-2
   654 000006AF 7450                        je validar_movimiento_doble_oficial_inferiores ;;falta validar
   655                                      
   656                                  ;;esto valida OK movimientos simples y dobles horizontales (falta validar dobles horizontales)
   657                                  validar_movimientos_oficial_horizontal:
   658                                      ;;movimiento simple
   659 000006B1 80FA01                      cmp dl, 1
   660 000006B4 0F84D3000000                je movimiento_oficial_ok
   661 000006BA 80FAFF                      cmp dl,-1
   662 000006BD 0F84CA000000                je movimiento_oficial_ok
   663                                      ;;movimiento doble (comio)
   664 000006C3 80FA02                      cmp dl, 2
   665 000006C6 744D                        je validar_movimiento_doble_izquierda ;; aca falta validar que haya X en el medio
   666 000006C8 80FAFE                      cmp dl,-2
   667 000006CB 744C                        je validar_movimiento_doble_derecha ;; aca falta validar que haya X en el medio
   668                                  ;funcion ready (no necesita nada mas)
   669                                  validar_movimiento_simple_oficial_arriba_abajo:
   670                                      ;;si se movio 1 en x, solo puede ser movimiento simple
   671 000006CD 80FA01                      cmp dl, 1
   672 000006D0 0F84B7000000                je movimiento_oficial_ok
   673 000006D6 80FAFF                      cmp dl,-1
   674 000006D9 0F84AE000000                je movimiento_oficial_ok
   675 000006DF 80FA00                      cmp dl, 0
   676 000006E2 0F84A5000000                je movimiento_oficial_ok
   677 000006E8 E9B8000000                  jmp movimiento_oficial_invalido
   678                                  
   679                                  ;;movimientos dobles!
   680                                  validar_movimiento_doble_oficial_superiores:
   681 000006ED 80FA02                      cmp dl, 2
   682 000006F0 742B                        je validar_movimiento_doble_izquierda_superior
   683 000006F2 80FAFE                      cmp dl,-2
   684 000006F5 7430                        je validar_movimiento_doble_derecha_superior
   685 000006F7 80FA00                      cmp dl, 0
   686 000006FA 7427                        je validar_movimiento_doble_superior
   687 000006FC E9A4000000                  jmp movimiento_oficial_invalido
   688                                  
   689                                  validar_movimiento_doble_oficial_inferiores:
   690 00000701 80FA02                      cmp dl, 2
   691 00000704 7427                        je validar_movimiento_doble_izquierda_inferior
   692 00000706 80FAFE                      cmp dl,-2
   693 00000709 742C                        je validar_movimiento_doble_derecha_inferior
   694 0000070B 80FA00                      cmp dl, 0
   695 0000070E 7423                        je validar_movimiento_doble_inferior
   696 00000710 E990000000                  jmp movimiento_oficial_invalido
   697                                      
   698                                  ;;tengo que validar que haya una X en los movimientos dobles
   699                                  ;;voy a setear una posicion posx - posy para buscar elemento en la matriz
   700                                  ;;si hay una X efectivamente habia un soldado -> eliminar soldado -> movimiento ok!
   701                                  ;;else invalido.
   702                                  
   703                                  ;;hasta este momento en ah y dh estan los valores x y destino respectivamente
   704                                  validar_movimiento_doble_izquierda:
   705 00000715 FEC6                        inc dh
   706 00000717 EB24                        jmp validar_habia_soldado_en_movimiento_doble
   707                                  validar_movimiento_doble_derecha:
   708 00000719 FECE                        dec dh
   709 0000071B EB20                        jmp validar_habia_soldado_en_movimiento_doble
   710                                  validar_movimiento_doble_izquierda_superior:
   711 0000071D FEC6                        inc dh
   712 0000071F FEC4                        inc ah
   713 00000721 EB1A                        jmp validar_habia_soldado_en_movimiento_doble
   714                                  validar_movimiento_doble_superior:
   715 00000723 FEC4                        inc ah
   716 00000725 EB16                        jmp validar_habia_soldado_en_movimiento_doble
   717                                  validar_movimiento_doble_derecha_superior:
   718 00000727 FECE                        dec dh
   719 00000729 FEC4                        inc ah
   720 0000072B EB10                        jmp validar_habia_soldado_en_movimiento_doble
   721                                  validar_movimiento_doble_izquierda_inferior:
   722 0000072D FEC6                        inc dh
   723 0000072F FECC                        dec ah
   724 00000731 EB0A                        jmp validar_habia_soldado_en_movimiento_doble
   725                                  validar_movimiento_doble_inferior:
   726 00000733 FECC                        dec ah
   727 00000735 EB06                        jmp validar_habia_soldado_en_movimiento_doble
   728                                  validar_movimiento_doble_derecha_inferior:
   729 00000737 FECE                        dec dh
   730 00000739 FECC                        dec ah
   731 0000073B EB00                        jmp validar_habia_soldado_en_movimiento_doble
   732                                  
   733                                  
   734                                  ;;falta estar seguro de lo que hago aca. (validar X e Y..)
   735                                  validar_habia_soldado_en_movimiento_doble:
   736                                      
   737 0000073D 4829DB                      sub rbx, rbx
   738 00000740 88E3                        mov bl, ah      
   739 00000742 4829C0                      sub rax, rax      
   740 00000745 88D8                        mov al, bl
   741                                  
   742 00000747 4829DB                      sub rbx, rbx
   743 0000074A 88F3                        mov bl, dh
   744                                                  
   745 0000074C 4829C9                      sub rcx, rcx
   746 0000074F 4829D2                      sub rdx, rdx
   747 00000752 4D29C0                      sub r8, r8
   748 00000755 4D29D2                      sub r10, r10
   749                                      
   750                                   
   751 00000758 41B809000000                mov r8, cantidadFilas
   752 0000075E 49F7E8                      imul r8
   753 00000761 4801C1                      add rcx,rax
   754                                      
   755 00000764 88D8                        mov al, bl
   756 00000766 41B801000000                mov r8, longitudElemento 
   757 0000076C 49F7E8                      imul r8
   758 0000076F 4801C1                      add rcx,rax
   759                                      
   760 00000772 4829DB                      sub rbx, rbx   
   761 00000775 48BB-                       mov rbx,matriz 
   761 00000777 [B401000000000000] 
   762 0000077F 4801CB                      add rbx,rcx ;me posicione en la matriz
   763                                  
   764 00000782 4C8B13                      mov r10, [rbx] ;guardo un elemento
   765 00000785 4180FA58                    cmp r10b, 'X'
   766 00000789 7402                        je movimiento_oficial_ok
   767 0000078B EB18                        jmp movimiento_oficial_invalido
   768                                  
   769                                  ;;fin;; validaciones terminan en estas 2 funciones.
   770                                  movimiento_oficial_ok:
   771                                      
   772 0000078D 4C8B4B01                    mov r9, [rbx+1] ;guardo en r9 lo que le sigue de matriz posterior al elemento a actualizar
   773 00000791 41B820000000                mov r8, " " ; lo muevo a un reg para darle (y estar seguro de su) longitud
   774 00000797 4C8903                      mov [rbx],r8 ;muevo el valor(de igual longitud). muevo a la posicion de la matriz a actualizar
   775                                      
   776                                      ;despues de agregar el nuevo valor, agregarle el resto de la matriz que estaba antes.
   777 0000079A 4C894B01                    mov [rbx+1],r9
   778                                  
   779 0000079E 41BC00000000                mov r12,0
   780 000007A4 C3                          ret
   781                                  movimiento_oficial_invalido:
   782 000007A5 48BF-                       mov rdi,msj_movimiento_oficial_invalido
   782 000007A7 [8D00000000000000] 
   783 000007AF 4883EC08                    sub rsp, 8
   784 000007B3 E8(00000000)                call printf
   785 000007B8 4883C408                    add rsp,8
   786                                      
   787 000007BC 41BC01000000                mov r12,1
   788 000007C2 C3                          ret
   789                                  
   790                                  movimiento_soldado_invalido:
   791 000007C3 4889E0                      mov rax, rsp
   792 000007C6 4883E00F                    and rax, 15
   793 000007CA 7404                        je no_restar_rsp
   794 000007CC 4883EC08                    sub rsp, 8
   795                                  no_restar_rsp:
   796 000007D0 48BF-                       mov rdi,msj_movimiento_soldado_invalido
   796 000007D2 [BF00000000000000] 
   797 000007DA E8(00000000)                call printf
   798 000007DF 4883C408                    add rsp,8
   799 000007E3 E939F8FFFF                  jmp pedir_movimiento
   800                                  
   801                                  movimiento_soldado_valido:
   802 000007E8 E915FAFFFF                  jmp prox_turno
   803                                  
   804                                  verificar_ganador:
   805 000007ED 4983FE00                    cmp r14, 0
   806 000007F1 0F8491000000                je ganaron_soldados_por_falta_oficiales
   807                                  verificar_invasion:
   808 000007F7 4829C9                      sub rcx, rcx
   809 000007FA 4829C0                      sub rax, rax
   810 000007FD 4829DB                      sub rbx, rbx
   811 00000800 4D29D2                      sub r10, r10
   812 00000803 B005                        mov al, 5
   813 00000805 41B809000000                mov r8, cantidadFilas
   814 0000080B 49F7E8                      imul r8
   815 0000080E 4801C1                      add rcx,rax
   816                                      
   817 00000811 B003                        mov al, 3
   818 00000813 41B801000000                mov r8, longitudElemento 
   819 00000819 49F7E8                      imul r8
   820 0000081C 4801C1                      add rcx,rax
   821                                      
   822 0000081F 48BB-                       mov rbx,matriz 
   822 00000821 [B401000000000000] 
   823 00000829 4801CB                      add rbx,rcx ;me posicione en la matriz
   824                                  
   825                                  ;fila_5_fortaleza
   826 0000082C 4C8B13                      mov r10, [rbx] ;guardo un elemento
   827 0000082F 4180FA58                    cmp r10b, 'X'
   828 00000833 7552                        jne no_invadieron_la_fortaleza
   829 00000835 4C8B5301                    mov r10, [rbx+1] ;guardo un elemento
   830 00000839 4180FA58                    cmp r10b, 'X'
   831 0000083D 7548                        jne no_invadieron_la_fortaleza
   832 0000083F 4C8B5302                    mov r10, [rbx+2] ;guardo un elemento
   833 00000843 4180FA58                    cmp r10b, 'X'
   834 00000847 753E                        jne no_invadieron_la_fortaleza
   835                                  ;fila_6_fortaleza
   836 00000849 4C8B5308                    mov r10, [rbx+8] ;guardo un elemento
   837 0000084D 4180FA58                    cmp r10b, 'X'
   838 00000851 7534                        jne no_invadieron_la_fortaleza
   839 00000853 4C8B5309                    mov r10, [rbx+9] ;guardo un elemento
   840 00000857 4180FA58                    cmp r10b, 'X'
   841 0000085B 752A                        jne no_invadieron_la_fortaleza
   842 0000085D 4C8B530A                    mov r10, [rbx+10] ;guardo un elemento
   843 00000861 4180FA58                    cmp r10b, 'X'
   844 00000865 7520                        jne no_invadieron_la_fortaleza
   845                                  ;fila_7_fortaleza
   846 00000867 4C8B5310                    mov r10, [rbx+16] ;guardo un elemento
   847 0000086B 4180FA58                    cmp r10b, 'X'
   848 0000086F 7516                        jne no_invadieron_la_fortaleza
   849 00000871 4C8B5311                    mov r10, [rbx+17] ;guardo un elemento
   850 00000875 4180FA58                    cmp r10b, 'X'
   851 00000879 750C                        jne no_invadieron_la_fortaleza
   852 0000087B 4C8B5312                    mov r10, [rbx+18] ;guardo un elemento
   853 0000087F 4180FA58                    cmp r10b, 'X'
   854 00000883 7502                        jne no_invadieron_la_fortaleza
   855                                  
   856 00000885 EB1D                        jmp ganaron_soldados_por_invasion
   857                                      
   858                                  no_invadieron_la_fortaleza:
   859 00000887 C3                          ret
   860                                  
   861                                  ganaron_soldados_por_falta_oficiales:
   862 00000888 48BF-                       mov rdi,msj_ganaron_soldados_por_falta_oficiales
   862 0000088A [F100000000000000] 
   863 00000892 4883EC08                    sub rsp, 8
   864 00000896 E8(00000000)                call printf
   865 0000089B 4883C408                    add rsp,8
   866 0000089F E972F9FFFF                  jmp fin
   867                                  
   868                                  ganaron_soldados_por_invasion:
   869 000008A4 48BF-                       mov rdi,msj_ganaron_soldados_por_invasion
   869 000008A6 [3F01000000000000] 
   870 000008AE 4883EC08                    sub rsp, 8
   871 000008B2 E8(00000000)                call printf
   872 000008B7 4883C408                    add rsp,8
   873 000008BB E956F9FFFF                  jmp fin
